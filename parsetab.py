
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CLASS COMMA CTECHAR CTEF CTEI CTESTRING DIVIDE DO ELIF ELSE EQUAL FLOAT FROM ID IF INHERITS INT LBRACE LBRACKET LPAREN MAIN MINUS OR PLUS POINT PROGRAM RBRACE RBRACKET READ RELOP RETURN RPAREN SEMICOLON STRING THEN TIMES TWOPOINTS UNTIL VOID WHILE WRITEprogram : PROGRAM ID TWOPOINTS program_aux mainprogram_aux : dec_vars class_aux functions_auxclass_aux : class \n                | class class_aux\n                | emptyfunctions_aux : functions \n                     | emptydec_vars : type_vars dec_vars_aux SEMICOLON \n                | type_vars dec_vars_aux SEMICOLON dec_vars\n                | emptytype_vars : type_aux\n                | type_aux LBRACKET exp RBRACKET\n                | type_aux LBRACKET exp RBRACKET LBRACKET exp RBRACKETdec_vars_aux : ID\n                    | ID COMMA dec_vars_auxfunctions : functType ID LPAREN RPAREN LBRACE functBody return RBRACE \n                 | functType ID LPAREN params RPAREN LBRACE functBody return RBRACE\n                 | functType ID LPAREN RPAREN LBRACE functBody return RBRACE functions\n                 | functType ID LPAREN params RPAREN LBRACE functBody return RBRACE functionsfunctType : VOID \n                | typeparams : type ID\n              | type ID COMMA paramstype : type_aux\n            | type_aux LBRACKET RBRACKET\n            | type_aux LBRACKET RBRACKET LBRACKET RBRACKETtype_aux : INT\n                | FLOAT\n                | CHAR\n                | STRING\n                | BOOL\n                | IDfunctBody : statutes_aux\n                | dec_vars statutes_auxreturn : RETURN expression SEMICOLON\n              | emptystatutes : assignation \n                | call SEMICOLON\n                | read\n                | write\n                | condition\n                | while\n                | forassignation : vars EQUAL expression SEMICOLONwrite : WRITE LPAREN write_aux RPAREN SEMICOLONwrite_aux : expression\n                | expression COMMA write_auxcondition : IF condition_auxcondition_aux : LPAREN expression RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2\n                    | LPAREN expression RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACEstatutes_aux : statutes \n                    | statutes statutes_auxcondition_aux_2 : ELIF condition_aux\n                        | emptywhile : WHILE LPAREN expression RPAREN DO LBRACE statutes_aux RBRACEfor : FROM assignation UNTIL expression DO LBRACE statutes_aux RBRACEclass : CLASS ID LBRACE dec_vars functions RBRACE\n               | CLASS ID INHERITS ID LBRACE dec_vars functions RBRACEmain : MAIN LBRACE statutes_aux RBRACE\n            | MAIN LBRACE dec_vars statutes_aux RBRACEexpression : expression_aux \n                    | expression_aux RELOP expression_aux\n                    | expression_aux AND expression_aux\n                    | expression_aux OR expression_auxexpression_aux : call\n                        | expcall : ID LPAREN call_aux RPAREN\n            | ID POINT ID LPAREN call_aux RPARENcall_aux : call_aux_2 \n                | emptycall_aux_2 : exp \n                | exp COMMA call_aux_2read : READ LPAREN read_aux RPAREN SEMICOLONread_aux : vars\n                | vars COMMA read_auxvars : ID \n            | ID vars_auxvars_aux : LBRACKET exp RBRACKET \n                | LBRACKET exp RBRACKET LBRACKET exp RBRACKETexp : term \n            | term PLUS exp\n            | term MINUS expterm : factor\n                | factor TIMES term\n                | factor DIVIDE termfactor :  PLUS cte \n            | MINUS cte \n            | cte \n            | LPAREN expression RPARENcte : ID\n            | CTEI\n            | CTEF\n            | CTESTRING\n            | CTECHARempty :  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,16,84,114,],[0,-1,-59,-60,]),'ID':([2,4,5,7,8,9,10,11,12,13,14,15,18,19,20,21,24,25,29,30,31,32,33,35,36,39,40,43,50,51,52,54,55,56,57,58,60,65,68,69,70,72,73,74,77,78,88,89,90,91,93,94,95,96,97,98,101,102,103,105,111,112,113,128,131,134,139,141,142,145,147,151,154,155,156,157,160,161,163,170,171,172,176,177,178,180,185,190,193,194,195,198,199,201,204,205,207,],[3,5,-32,-95,23,-10,-11,-27,-28,-29,-30,-31,5,-3,-5,34,44,60,66,-20,-21,-24,-4,5,23,44,44,83,86,86,-37,-39,-40,-41,-42,-43,-32,100,5,104,-9,-12,44,44,44,44,-38,83,44,120,44,100,83,-48,83,83,5,-25,5,44,83,83,83,83,153,5,-44,44,44,100,83,60,-26,-57,5,-13,44,-73,-45,86,60,5,86,86,86,83,-58,5,-95,-55,-56,5,-49,-54,-53,86,-50,]),'TWOPOINTS':([3,],[4,]),'CLASS':([4,7,9,19,35,70,155,185,],[-95,21,-10,21,-8,-9,-57,-58,]),'VOID':([4,7,9,18,19,20,33,35,68,70,103,134,155,156,185,190,198,],[-95,-95,-10,30,-3,-5,-4,-8,-95,-9,30,-95,-57,30,-58,30,30,]),'INT':([4,7,9,18,19,20,25,33,35,68,70,101,103,134,151,155,156,171,172,185,190,198,],[11,-95,-10,11,-3,-5,11,-4,11,11,-9,11,11,11,11,-57,11,11,11,-58,11,11,]),'FLOAT':([4,7,9,18,19,20,25,33,35,68,70,101,103,134,151,155,156,171,172,185,190,198,],[12,-95,-10,12,-3,-5,12,-4,12,12,-9,12,12,12,12,-57,12,12,12,-58,12,12,]),'CHAR':([4,7,9,18,19,20,25,33,35,68,70,101,103,134,151,155,156,171,172,185,190,198,],[13,-95,-10,13,-3,-5,13,-4,13,13,-9,13,13,13,13,-57,13,13,13,-58,13,13,]),'STRING':([4,7,9,18,19,20,25,33,35,68,70,101,103,134,151,155,156,171,172,185,190,198,],[14,-95,-10,14,-3,-5,14,-4,14,14,-9,14,14,14,14,-57,14,14,14,-58,14,14,]),'BOOL':([4,7,9,18,19,20,25,33,35,68,70,101,103,134,151,155,156,171,172,185,190,198,],[15,-95,-10,15,-3,-5,15,-4,15,15,-9,15,15,15,15,-57,15,15,15,-58,15,15,]),'MAIN':([4,6,7,9,18,19,20,26,27,28,33,35,70,155,185,190,196,198,202,],[-95,17,-95,-10,-95,-3,-5,-2,-6,-7,-4,-8,-9,-57,-58,-16,-18,-17,-19,]),'LBRACKET':([5,10,11,12,13,14,15,32,60,72,86,100,102,143,],[-32,24,-27,-28,-29,-30,-31,67,93,105,93,93,132,160,]),'READ':([9,25,35,50,51,52,54,55,56,57,58,70,88,96,139,151,161,163,170,171,176,177,178,193,194,195,199,201,204,205,207,],[-10,61,-8,61,61,-37,-39,-40,-41,-42,-43,-9,-38,-48,-44,61,-73,-45,61,61,61,61,61,-95,-55,-56,-49,-54,-53,61,-50,]),'WRITE':([9,25,35,50,51,52,54,55,56,57,58,70,88,96,139,151,161,163,170,171,176,177,178,193,194,195,199,201,204,205,207,],[-10,62,-8,62,62,-37,-39,-40,-41,-42,-43,-9,-38,-48,-44,62,-73,-45,62,62,62,62,62,-95,-55,-56,-49,-54,-53,62,-50,]),'IF':([9,25,35,50,51,52,54,55,56,57,58,70,88,96,139,151,161,163,170,171,176,177,178,193,194,195,199,201,204,205,207,],[-10,63,-8,63,63,-37,-39,-40,-41,-42,-43,-9,-38,-48,-44,63,-73,-45,63,63,63,63,63,-95,-55,-56,-49,-54,-53,63,-50,]),'WHILE':([9,25,35,50,51,52,54,55,56,57,58,70,88,96,139,151,161,163,170,171,176,177,178,193,194,195,199,201,204,205,207,],[-10,64,-8,64,64,-37,-39,-40,-41,-42,-43,-9,-38,-48,-44,64,-73,-45,64,64,64,64,64,-95,-55,-56,-49,-54,-53,64,-50,]),'FROM':([9,25,35,50,51,52,54,55,56,57,58,70,88,96,139,151,161,163,170,171,176,177,178,193,194,195,199,201,204,205,207,],[-10,65,-8,65,65,-37,-39,-40,-41,-42,-43,-9,-38,-48,-44,65,-73,-45,65,65,65,65,65,-95,-55,-56,-49,-54,-53,65,-50,]),'LBRACE':([17,34,104,129,152,165,166,167,203,],[25,68,134,151,171,176,177,178,205,]),'SEMICOLON':([22,23,38,41,42,44,45,46,47,48,53,71,75,76,80,81,82,83,106,107,108,109,110,115,136,137,138,140,144,146,174,191,],[35,-14,-80,-83,-88,-90,-91,-92,-93,-94,88,-15,-86,-87,-61,-65,-66,-90,-81,-82,-84,-85,-89,139,-62,-63,-64,-67,161,163,-68,197,]),'COMMA':([23,38,41,42,44,45,46,47,48,75,76,80,81,82,83,92,100,106,107,108,109,110,119,123,125,136,137,138,140,143,153,174,186,],[36,-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,-61,-65,-66,-90,-77,-76,-81,-82,-84,-85,-89,141,145,147,-62,-63,-64,-67,-78,172,-68,-79,]),'PLUS':([24,38,41,42,43,44,45,46,47,48,73,74,75,76,77,78,83,89,90,93,95,97,98,105,108,109,110,111,112,113,128,141,142,147,160,180,],[39,73,-83,-88,39,-90,-91,-92,-93,-94,39,39,-86,-87,39,39,-90,39,39,39,39,39,39,39,-84,-85,-89,39,39,39,39,39,39,39,39,39,]),'MINUS':([24,38,41,42,43,44,45,46,47,48,73,74,75,76,77,78,83,89,90,93,95,97,98,105,108,109,110,111,112,113,128,141,142,147,160,180,],[40,74,-83,-88,40,-90,-91,-92,-93,-94,40,40,-86,-87,40,40,-90,40,40,40,40,40,40,40,-84,-85,-89,40,40,40,40,40,40,40,40,40,]),'LPAREN':([24,43,60,61,62,63,64,66,73,74,77,78,83,86,89,90,93,95,97,98,105,111,112,113,120,128,141,142,147,160,180,200,],[43,43,90,94,95,97,98,101,43,43,43,43,90,90,43,43,43,43,43,43,43,43,43,43,142,43,43,43,43,43,43,97,]),'CTEI':([24,39,40,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'CTEF':([24,39,40,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CTESTRING':([24,39,40,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'CTECHAR':([24,39,40,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'INHERITS':([34,],[69,]),'RBRACKET':([37,38,41,42,44,45,46,47,48,67,75,76,106,107,108,109,110,121,132,135,175,],[72,-80,-83,-88,-90,-91,-92,-93,-94,102,-86,-87,-81,-82,-84,-85,-89,143,154,157,186,]),'RELOP':([38,41,42,44,45,46,47,48,75,76,80,81,82,83,106,107,108,109,110,140,174,],[-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,111,-65,-66,-90,-81,-82,-84,-85,-89,-67,-68,]),'AND':([38,41,42,44,45,46,47,48,75,76,80,81,82,83,106,107,108,109,110,140,174,],[-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,112,-65,-66,-90,-81,-82,-84,-85,-89,-67,-68,]),'OR':([38,41,42,44,45,46,47,48,75,76,80,81,82,83,106,107,108,109,110,140,174,],[-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,113,-65,-66,-90,-81,-82,-84,-85,-89,-67,-68,]),'RPAREN':([38,41,42,44,45,46,47,48,75,76,79,80,81,82,83,90,92,100,101,106,107,108,109,110,116,117,118,119,122,123,124,125,126,127,130,136,137,138,140,142,143,153,158,159,162,164,174,184,186,],[-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,110,-61,-65,-66,-90,-95,-77,-76,129,-81,-82,-84,-85,-89,140,-69,-70,-71,144,-74,146,-46,148,149,152,-62,-63,-64,-67,-95,-78,-22,-72,174,-75,-47,-68,-23,-79,]),'DO':([38,41,42,44,45,46,47,48,75,76,80,81,82,83,106,107,108,109,110,136,137,138,140,149,150,174,],[-80,-83,-88,-90,-91,-92,-93,-94,-86,-87,-61,-65,-66,-90,-81,-82,-84,-85,-89,-62,-63,-64,-67,166,167,-68,]),'TIMES':([41,42,44,45,46,47,48,75,76,83,110,],[77,-88,-90,-91,-92,-93,-94,-86,-87,-90,-89,]),'DIVIDE':([41,42,44,45,46,47,48,75,76,83,110,],[78,-88,-90,-91,-92,-93,-94,-86,-87,-90,-89,]),'RBRACE':([49,51,52,54,55,56,57,58,85,87,88,96,133,139,161,163,168,169,173,179,181,182,183,187,188,189,190,192,193,194,195,196,197,198,199,201,202,204,206,207,],[84,-51,-37,-39,-40,-41,-42,-43,114,-52,-38,-48,155,-44,-73,-45,-95,-33,185,190,-36,-34,-95,193,194,195,-16,198,-95,-55,-56,-18,-35,-17,-49,-54,-19,-53,207,-50,]),'RETURN':([51,52,54,55,56,57,58,87,88,96,139,161,163,168,169,182,183,193,194,195,199,201,204,207,],[-51,-37,-39,-40,-41,-42,-43,-52,-38,-48,-44,-73,-45,180,-33,-34,180,-95,-55,-56,-49,-54,-53,-50,]),'EQUAL':([59,60,86,92,100,143,186,],[89,-76,-76,-77,-76,-78,-79,]),'POINT':([60,83,86,],[91,91,91,]),'UNTIL':([99,139,],[128,-44,]),'THEN':([148,],[165,]),'ELIF':([193,],[200,]),'ELSE':([193,199,201,204,207,],[-95,203,-54,-53,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([4,],[6,]),'dec_vars':([4,25,35,68,134,151,171,],[7,50,70,103,156,170,170,]),'type_vars':([4,25,35,68,134,151,171,],[8,8,8,8,8,8,8,]),'empty':([4,7,18,19,25,35,68,90,134,142,151,168,171,183,193,],[9,20,28,20,9,9,9,118,9,118,9,181,9,181,201,]),'type_aux':([4,18,25,35,68,101,103,134,151,156,171,172,190,198,],[10,32,10,10,10,32,32,10,10,32,10,32,32,32,]),'main':([6,],[16,]),'class_aux':([7,19,],[18,33,]),'class':([7,19,],[19,19,]),'dec_vars_aux':([8,36,],[22,71,]),'functions_aux':([18,],[26,]),'functions':([18,103,156,190,198,],[27,133,173,196,202,]),'functType':([18,103,156,190,198,],[29,29,29,29,29,]),'type':([18,101,103,156,172,190,198,],[31,131,31,31,131,31,31,]),'exp':([24,43,73,74,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[37,82,106,107,82,119,121,82,82,82,135,82,82,82,82,119,119,82,175,82,]),'term':([24,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[38,38,38,38,108,109,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor':([24,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'cte':([24,39,40,43,73,74,77,78,89,90,93,95,97,98,105,111,112,113,128,141,142,147,160,180,],[42,75,76,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statutes_aux':([25,50,51,151,170,171,176,177,178,205,],[49,85,87,169,182,169,187,188,189,206,]),'statutes':([25,50,51,151,170,171,176,177,178,205,],[51,51,51,51,51,51,51,51,51,51,]),'assignation':([25,50,51,65,151,170,171,176,177,178,205,],[52,52,52,99,52,52,52,52,52,52,52,]),'call':([25,43,50,51,89,95,97,98,111,112,113,128,147,151,170,171,176,177,178,180,205,],[53,81,53,53,81,81,81,81,81,81,81,81,81,53,53,53,53,53,53,81,53,]),'read':([25,50,51,151,170,171,176,177,178,205,],[54,54,54,54,54,54,54,54,54,54,]),'write':([25,50,51,151,170,171,176,177,178,205,],[55,55,55,55,55,55,55,55,55,55,]),'condition':([25,50,51,151,170,171,176,177,178,205,],[56,56,56,56,56,56,56,56,56,56,]),'while':([25,50,51,151,170,171,176,177,178,205,],[57,57,57,57,57,57,57,57,57,57,]),'for':([25,50,51,151,170,171,176,177,178,205,],[58,58,58,58,58,58,58,58,58,58,]),'vars':([25,50,51,65,94,145,151,170,171,176,177,178,205,],[59,59,59,59,123,123,59,59,59,59,59,59,59,]),'expression':([43,89,95,97,98,128,147,180,],[79,115,125,126,127,150,125,191,]),'expression_aux':([43,89,95,97,98,111,112,113,128,147,180,],[80,80,80,80,80,136,137,138,80,80,80,]),'vars_aux':([60,86,100,],[92,92,92,]),'condition_aux':([63,200,],[96,204,]),'call_aux':([90,142,],[116,159,]),'call_aux_2':([90,141,142,],[117,158,117,]),'read_aux':([94,145,],[122,162,]),'write_aux':([95,147,],[124,164,]),'params':([101,172,],[130,184,]),'functBody':([151,171,],[168,183,]),'return':([168,183,],[179,192,]),'condition_aux_2':([193,],[199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID TWOPOINTS program_aux main','program',5,'p_program','parser.py',5),
  ('program_aux -> dec_vars class_aux functions_aux','program_aux',3,'p_program_aux','parser.py',9),
  ('class_aux -> class','class_aux',1,'p_class_aux','parser.py',13),
  ('class_aux -> class class_aux','class_aux',2,'p_class_aux','parser.py',14),
  ('class_aux -> empty','class_aux',1,'p_class_aux','parser.py',15),
  ('functions_aux -> functions','functions_aux',1,'p_functions_aux','parser.py',19),
  ('functions_aux -> empty','functions_aux',1,'p_functions_aux','parser.py',20),
  ('dec_vars -> type_vars dec_vars_aux SEMICOLON','dec_vars',3,'p_dec_vars','parser.py',24),
  ('dec_vars -> type_vars dec_vars_aux SEMICOLON dec_vars','dec_vars',4,'p_dec_vars','parser.py',25),
  ('dec_vars -> empty','dec_vars',1,'p_dec_vars','parser.py',26),
  ('type_vars -> type_aux','type_vars',1,'p_type_vars','parser.py',30),
  ('type_vars -> type_aux LBRACKET exp RBRACKET','type_vars',4,'p_type_vars','parser.py',31),
  ('type_vars -> type_aux LBRACKET exp RBRACKET LBRACKET exp RBRACKET','type_vars',7,'p_type_vars','parser.py',32),
  ('dec_vars_aux -> ID','dec_vars_aux',1,'p_dec_vars_aux','parser.py',36),
  ('dec_vars_aux -> ID COMMA dec_vars_aux','dec_vars_aux',3,'p_dec_vars_aux','parser.py',37),
  ('functions -> functType ID LPAREN RPAREN LBRACE functBody return RBRACE','functions',8,'p_functions','parser.py',41),
  ('functions -> functType ID LPAREN params RPAREN LBRACE functBody return RBRACE','functions',9,'p_functions','parser.py',42),
  ('functions -> functType ID LPAREN RPAREN LBRACE functBody return RBRACE functions','functions',9,'p_functions','parser.py',43),
  ('functions -> functType ID LPAREN params RPAREN LBRACE functBody return RBRACE functions','functions',10,'p_functions','parser.py',44),
  ('functType -> VOID','functType',1,'p_functType','parser.py',48),
  ('functType -> type','functType',1,'p_functType','parser.py',49),
  ('params -> type ID','params',2,'p_params','parser.py',53),
  ('params -> type ID COMMA params','params',4,'p_params','parser.py',54),
  ('type -> type_aux','type',1,'p_type','parser.py',58),
  ('type -> type_aux LBRACKET RBRACKET','type',3,'p_type','parser.py',59),
  ('type -> type_aux LBRACKET RBRACKET LBRACKET RBRACKET','type',5,'p_type','parser.py',60),
  ('type_aux -> INT','type_aux',1,'p_type_aux','parser.py',64),
  ('type_aux -> FLOAT','type_aux',1,'p_type_aux','parser.py',65),
  ('type_aux -> CHAR','type_aux',1,'p_type_aux','parser.py',66),
  ('type_aux -> STRING','type_aux',1,'p_type_aux','parser.py',67),
  ('type_aux -> BOOL','type_aux',1,'p_type_aux','parser.py',68),
  ('type_aux -> ID','type_aux',1,'p_type_aux','parser.py',69),
  ('functBody -> statutes_aux','functBody',1,'p_functBody','parser.py',73),
  ('functBody -> dec_vars statutes_aux','functBody',2,'p_functBody','parser.py',74),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','parser.py',78),
  ('return -> empty','return',1,'p_return','parser.py',79),
  ('statutes -> assignation','statutes',1,'p_statutes','parser.py',83),
  ('statutes -> call SEMICOLON','statutes',2,'p_statutes','parser.py',84),
  ('statutes -> read','statutes',1,'p_statutes','parser.py',85),
  ('statutes -> write','statutes',1,'p_statutes','parser.py',86),
  ('statutes -> condition','statutes',1,'p_statutes','parser.py',87),
  ('statutes -> while','statutes',1,'p_statutes','parser.py',88),
  ('statutes -> for','statutes',1,'p_statutes','parser.py',89),
  ('assignation -> vars EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser.py',93),
  ('write -> WRITE LPAREN write_aux RPAREN SEMICOLON','write',5,'p_write','parser.py',97),
  ('write_aux -> expression','write_aux',1,'p_write_aux','parser.py',101),
  ('write_aux -> expression COMMA write_aux','write_aux',3,'p_write_aux','parser.py',102),
  ('condition -> IF condition_aux','condition',2,'p_condition','parser.py',106),
  ('condition_aux -> LPAREN expression RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2','condition_aux',8,'p_condition_aux','parser.py',110),
  ('condition_aux -> LPAREN expression RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE','condition_aux',12,'p_condition_aux','parser.py',111),
  ('statutes_aux -> statutes','statutes_aux',1,'p_statutes_aux','parser.py',115),
  ('statutes_aux -> statutes statutes_aux','statutes_aux',2,'p_statutes_aux','parser.py',116),
  ('condition_aux_2 -> ELIF condition_aux','condition_aux_2',2,'p_condition_aux_2','parser.py',120),
  ('condition_aux_2 -> empty','condition_aux_2',1,'p_condition_aux_2','parser.py',121),
  ('while -> WHILE LPAREN expression RPAREN DO LBRACE statutes_aux RBRACE','while',8,'p_while','parser.py',125),
  ('for -> FROM assignation UNTIL expression DO LBRACE statutes_aux RBRACE','for',8,'p_for','parser.py',129),
  ('class -> CLASS ID LBRACE dec_vars functions RBRACE','class',6,'p_class','parser.py',133),
  ('class -> CLASS ID INHERITS ID LBRACE dec_vars functions RBRACE','class',8,'p_class','parser.py',134),
  ('main -> MAIN LBRACE statutes_aux RBRACE','main',4,'p_main','parser.py',138),
  ('main -> MAIN LBRACE dec_vars statutes_aux RBRACE','main',5,'p_main','parser.py',139),
  ('expression -> expression_aux','expression',1,'p_expression','parser.py',143),
  ('expression -> expression_aux RELOP expression_aux','expression',3,'p_expression','parser.py',144),
  ('expression -> expression_aux AND expression_aux','expression',3,'p_expression','parser.py',145),
  ('expression -> expression_aux OR expression_aux','expression',3,'p_expression','parser.py',146),
  ('expression_aux -> call','expression_aux',1,'p_expression_aux','parser.py',150),
  ('expression_aux -> exp','expression_aux',1,'p_expression_aux','parser.py',151),
  ('call -> ID LPAREN call_aux RPAREN','call',4,'p_call','parser.py',155),
  ('call -> ID POINT ID LPAREN call_aux RPAREN','call',6,'p_call','parser.py',156),
  ('call_aux -> call_aux_2','call_aux',1,'p_call_aux','parser.py',160),
  ('call_aux -> empty','call_aux',1,'p_call_aux','parser.py',161),
  ('call_aux_2 -> exp','call_aux_2',1,'p_call_aux_2','parser.py',165),
  ('call_aux_2 -> exp COMMA call_aux_2','call_aux_2',3,'p_call_aux_2','parser.py',166),
  ('read -> READ LPAREN read_aux RPAREN SEMICOLON','read',5,'p_read','parser.py',170),
  ('read_aux -> vars','read_aux',1,'p_read_aux','parser.py',174),
  ('read_aux -> vars COMMA read_aux','read_aux',3,'p_read_aux','parser.py',175),
  ('vars -> ID','vars',1,'p_vars','parser.py',179),
  ('vars -> ID vars_aux','vars',2,'p_vars','parser.py',180),
  ('vars_aux -> LBRACKET exp RBRACKET','vars_aux',3,'p_vars_aux','parser.py',184),
  ('vars_aux -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET','vars_aux',6,'p_vars_aux','parser.py',185),
  ('exp -> term','exp',1,'p_exp','parser.py',189),
  ('exp -> term PLUS exp','exp',3,'p_exp','parser.py',190),
  ('exp -> term MINUS exp','exp',3,'p_exp','parser.py',191),
  ('term -> factor','term',1,'p_term','parser.py',195),
  ('term -> factor TIMES term','term',3,'p_term','parser.py',196),
  ('term -> factor DIVIDE term','term',3,'p_term','parser.py',197),
  ('factor -> PLUS cte','factor',2,'p_factor','parser.py',201),
  ('factor -> MINUS cte','factor',2,'p_factor','parser.py',202),
  ('factor -> cte','factor',1,'p_factor','parser.py',203),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',204),
  ('cte -> ID','cte',1,'p_cte','parser.py',208),
  ('cte -> CTEI','cte',1,'p_cte','parser.py',209),
  ('cte -> CTEF','cte',1,'p_cte','parser.py',210),
  ('cte -> CTESTRING','cte',1,'p_cte','parser.py',211),
  ('cte -> CTECHAR','cte',1,'p_cte','parser.py',212),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',216),
]
