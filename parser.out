Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID TWOPOINTS program_body main END
Rule 2     program_body -> program_body_vars program_body_class program_body_funct
Rule 3     program_body_vars -> dec_vars
Rule 4     program_body_vars -> empty
Rule 5     program_body_class -> classes
Rule 6     program_body_class -> empty
Rule 7     program_body_funct -> functions
Rule 8     program_body_funct -> empty
Rule 9     dec_vars -> VAR dec_vars_aux
Rule 10    dec_vars_aux -> simple_type vars_simple_type SEMICOLON
Rule 11    dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux
Rule 12    dec_vars_aux -> complex_type vars_complex_type SEMICOLON
Rule 13    dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux
Rule 14    vars_complex_type -> ID
Rule 15    vars_complex_type -> ID COMMA vars_complex_type
Rule 16    vars_simple_type -> ID
Rule 17    vars_simple_type -> ID COMMA vars_simple_type
Rule 18    vars_simple_type -> ID vars_simple_type_aux
Rule 19    vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type
Rule 20    vars_simple_type_aux -> LBRACKET CTEI RBRACKET
Rule 21    vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 22    simple_type -> INT
Rule 23    simple_type -> FLOAT
Rule 24    simple_type -> CHAR
Rule 25    simple_type -> BOOL
Rule 26    complex_type -> ID
Rule 27    classes -> CLASS ID classes_aux
Rule 28    classes -> CLASS ID classes_aux classes
Rule 29    classes_aux -> LBRACE dec_vars functions RBRACE
Rule 30    classes_aux -> LBRACE functions RBRACE
Rule 31    classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE
Rule 32    classes_aux -> INHERITS ID LBRACE functions RBRACE
Rule 33    functions -> FUNCT functions_aux
Rule 34    functions -> FUNCT functions_aux functions
Rule 35    functions_aux -> VOID ID LPAREN params RPAREN body
Rule 36    functions_aux -> VOID ID LPAREN RPAREN body
Rule 37    functions_aux -> simple_type ID LPAREN RPAREN body
Rule 38    functions_aux -> simple_type ID LPAREN params RPAREN body
Rule 39    params -> simple_type ID
Rule 40    params -> simple_type ID COMMA params
Rule 41    body -> LBRACE dec_vars statutes_aux RBRACE
Rule 42    body -> LBRACE statutes_aux RBRACE
Rule 43    body -> LBRACE statutes_aux RETURN ID RBRACE
Rule 44    body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE
Rule 45    statutes -> call SEMICOLON
Rule 46    statutes -> assignation
Rule 47    statutes -> read
Rule 48    statutes -> write
Rule 49    statutes -> condition
Rule 50    statutes -> while
Rule 51    statutes -> for
Rule 52    statutes_aux -> statutes
Rule 53    statutes_aux -> statutes statutes_aux
Rule 54    assignation -> var EQUAL exp SEMICOLON
Rule 55    var -> ID
Rule 56    var -> ID var_aux
Rule 57    var_aux -> POINT ID
Rule 58    var_aux -> POINT ID var_aux_2
Rule 59    var_aux -> var_aux_2
Rule 60    var_aux_2 -> LBRACKET exp RBRACKET
Rule 61    var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 62    call -> ID LPAREN RPAREN
Rule 63    call -> ID POINT ID LPAREN RPAREN
Rule 64    call -> ID LPAREN call_aux RPAREN
Rule 65    call -> ID POINT ID LPAREN call_aux RPAREN
Rule 66    call_aux -> exp
Rule 67    call_aux -> exp COMMA call_aux
Rule 68    condition -> IF condition_aux
Rule 69    condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2
Rule 70    condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE
Rule 71    condition_aux_2 -> ELIF condition_aux
Rule 72    condition_aux_2 -> empty
Rule 73    read -> READ LPAREN var RPAREN SEMICOLON
Rule 74    write -> WRITE LPAREN write_aux RPAREN SEMICOLON
Rule 75    write_aux -> exp
Rule 76    write_aux -> exp COMMA write_aux
Rule 77    write_aux -> CTESTRING
Rule 78    write_aux -> CTESTRING COMMA write_aux
Rule 79    while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
Rule 80    for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
Rule 81    exp -> n_exp
Rule 82    exp -> n_exp OR exp
Rule 83    n_exp -> l_exp
Rule 84    n_exp -> l_exp AND n_exp
Rule 85    l_exp -> a_exp
Rule 86    l_exp -> a_exp RELOP a_exp
Rule 87    a_exp -> term
Rule 88    a_exp -> term PLUS a_exp
Rule 89    a_exp -> term MINUS a_exp
Rule 90    term -> factor
Rule 91    term -> factor TIMES term
Rule 92    term -> factor DIVIDE term
Rule 93    factor -> LPAREN exp RPAREN
Rule 94    factor -> var
Rule 95    factor -> call
Rule 96    factor -> factor_aux
Rule 97    factor_aux -> cte
Rule 98    factor_aux -> PLUS cte
Rule 99    factor_aux -> MINUS cte
Rule 100   cte -> ID
Rule 101   cte -> CTEI
Rule 102   cte -> CTEF
Rule 103   cte -> CTECHAR
Rule 104   cte -> bool
Rule 105   bool -> TRUE
Rule 106   bool -> FALSE
Rule 107   main -> MAIN LBRACE statutes_aux RBRACE
Rule 108   main -> MAIN LBRACE dec_vars statutes_aux RBRACE
Rule 109   empty -> <empty>

Terminals, with rules where they appear

AND                  : 84
BOOL                 : 25
CHAR                 : 24
CLASS                : 27 28
COMMA                : 15 17 19 40 67 76 78
CTECHAR              : 103
CTEF                 : 102
CTEI                 : 20 21 21 101
CTESTRING            : 77 78
DIVIDE               : 92
DO                   : 79 80
ELIF                 : 71
ELSE                 : 70
END                  : 1
EQUAL                : 54
FALSE                : 106
FLOAT                : 23
FROM                 : 80
FUNCT                : 33 34
ID                   : 1 14 15 16 17 18 19 26 27 28 31 32 35 36 37 38 39 40 43 44 55 56 57 58 62 63 63 64 65 65 100
IF                   : 68
INHERITS             : 31 32
INT                  : 22
LBRACE               : 29 30 31 32 41 42 43 44 69 70 70 79 80 107 108
LBRACKET             : 20 21 21 60 61 61
LPAREN               : 35 36 37 38 62 63 64 65 69 70 73 74 79 80 80 93
MAIN                 : 107 108
MINUS                : 89 99
OR                   : 82
PLUS                 : 88 98
POINT                : 57 58 63 65
PROGRAM              : 1
RBRACE               : 29 30 31 32 41 42 43 44 69 70 70 79 80 107 108
RBRACKET             : 20 21 21 60 61 61
READ                 : 73
RELOP                : 86
RETURN               : 43 44
RPAREN               : 35 36 37 38 62 63 64 65 69 70 73 74 79 80 80 93
SEMICOLON            : 10 11 12 13 45 54 73 74
THEN                 : 69 70
TIMES                : 91
TRUE                 : 105
TWOPOINTS            : 1
UNTIL                : 80
VAR                  : 9
VOID                 : 35 36
WHILE                : 79
WRITE                : 74
error                : 

Nonterminals, with rules where they appear

a_exp                : 85 86 86 88 89
assignation          : 46
body                 : 35 36 37 38
bool                 : 104
call                 : 45 95
call_aux             : 64 65 67
classes              : 5 28
classes_aux          : 27 28
complex_type         : 12 13
condition            : 49
condition_aux        : 68 71
condition_aux_2      : 69 70
cte                  : 97 98 99
dec_vars             : 3 29 31 41 44 108
dec_vars_aux         : 9 11 13
empty                : 4 6 8 72
exp                  : 54 60 61 61 66 67 69 70 75 76 79 80 80 82 93
factor               : 90 91 92
factor_aux           : 96
for                  : 51
functions            : 7 29 30 31 32 34
functions_aux        : 33 34
l_exp                : 83 84
main                 : 1
n_exp                : 81 82 84
params               : 35 38 40
program              : 0
program_body         : 1
program_body_class   : 2
program_body_funct   : 2
program_body_vars    : 2
read                 : 47
simple_type          : 10 11 37 38 39 40
statutes             : 52 53
statutes_aux         : 41 42 43 44 53 69 70 70 79 80 107 108
term                 : 87 88 89 91 92
var                  : 54 73 94
var_aux              : 56
var_aux_2            : 58 59
vars_complex_type    : 12 13 15
vars_simple_type     : 10 11 17 19
vars_simple_type_aux : 18 19
while                : 50
write                : 48
write_aux            : 74 76 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID TWOPOINTS program_body main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID TWOPOINTS program_body main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . TWOPOINTS program_body main END

    TWOPOINTS       shift and go to state 4


state 4

    (1) program -> PROGRAM ID TWOPOINTS . program_body main END
    (2) program_body -> . program_body_vars program_body_class program_body_funct
    (3) program_body_vars -> . dec_vars
    (4) program_body_vars -> . empty
    (9) dec_vars -> . VAR dec_vars_aux
    (109) empty -> .

    VAR             shift and go to state 9
    CLASS           reduce using rule 109 (empty -> .)
    FUNCT           reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    program_body                   shift and go to state 5
    program_body_vars              shift and go to state 6
    dec_vars                       shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID TWOPOINTS program_body . main END
    (107) main -> . MAIN LBRACE statutes_aux RBRACE
    (108) main -> . MAIN LBRACE dec_vars statutes_aux RBRACE

    MAIN            shift and go to state 11

    main                           shift and go to state 10

state 6

    (2) program_body -> program_body_vars . program_body_class program_body_funct
    (5) program_body_class -> . classes
    (6) program_body_class -> . empty
    (27) classes -> . CLASS ID classes_aux
    (28) classes -> . CLASS ID classes_aux classes
    (109) empty -> .

    CLASS           shift and go to state 15
    FUNCT           reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    program_body_class             shift and go to state 12
    classes                        shift and go to state 13
    empty                          shift and go to state 14

state 7

    (3) program_body_vars -> dec_vars .

    CLASS           reduce using rule 3 (program_body_vars -> dec_vars .)
    FUNCT           reduce using rule 3 (program_body_vars -> dec_vars .)
    MAIN            reduce using rule 3 (program_body_vars -> dec_vars .)


state 8

    (4) program_body_vars -> empty .

    CLASS           reduce using rule 4 (program_body_vars -> empty .)
    FUNCT           reduce using rule 4 (program_body_vars -> empty .)
    MAIN            reduce using rule 4 (program_body_vars -> empty .)


state 9

    (9) dec_vars -> VAR . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

    dec_vars_aux                   shift and go to state 16
    simple_type                    shift and go to state 17
    complex_type                   shift and go to state 18

state 10

    (1) program -> PROGRAM ID TWOPOINTS program_body main . END

    END             shift and go to state 24


state 11

    (107) main -> MAIN . LBRACE statutes_aux RBRACE
    (108) main -> MAIN . LBRACE dec_vars statutes_aux RBRACE

    LBRACE          shift and go to state 25


state 12

    (2) program_body -> program_body_vars program_body_class . program_body_funct
    (7) program_body_funct -> . functions
    (8) program_body_funct -> . empty
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions
    (109) empty -> .

    FUNCT           shift and go to state 29
    MAIN            reduce using rule 109 (empty -> .)

    program_body_funct             shift and go to state 26
    functions                      shift and go to state 27
    empty                          shift and go to state 28

state 13

    (5) program_body_class -> classes .

    FUNCT           reduce using rule 5 (program_body_class -> classes .)
    MAIN            reduce using rule 5 (program_body_class -> classes .)


state 14

    (6) program_body_class -> empty .

    FUNCT           reduce using rule 6 (program_body_class -> empty .)
    MAIN            reduce using rule 6 (program_body_class -> empty .)


state 15

    (27) classes -> CLASS . ID classes_aux
    (28) classes -> CLASS . ID classes_aux classes

    ID              shift and go to state 30


state 16

    (9) dec_vars -> VAR dec_vars_aux .

    CLASS           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FUNCT           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    MAIN            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    ID              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    READ            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WRITE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    IF              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WHILE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FROM            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)


state 17

    (10) dec_vars_aux -> simple_type . vars_simple_type SEMICOLON
    (11) dec_vars_aux -> simple_type . vars_simple_type SEMICOLON dec_vars_aux
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 31

state 18

    (12) dec_vars_aux -> complex_type . vars_complex_type SEMICOLON
    (13) dec_vars_aux -> complex_type . vars_complex_type SEMICOLON dec_vars_aux
    (14) vars_complex_type -> . ID
    (15) vars_complex_type -> . ID COMMA vars_complex_type

    ID              shift and go to state 34

    vars_complex_type              shift and go to state 33

state 19

    (22) simple_type -> INT .

    ID              reduce using rule 22 (simple_type -> INT .)


state 20

    (23) simple_type -> FLOAT .

    ID              reduce using rule 23 (simple_type -> FLOAT .)


state 21

    (24) simple_type -> CHAR .

    ID              reduce using rule 24 (simple_type -> CHAR .)


state 22

    (25) simple_type -> BOOL .

    ID              reduce using rule 25 (simple_type -> BOOL .)


state 23

    (26) complex_type -> ID .

    ID              reduce using rule 26 (complex_type -> ID .)


state 24

    (1) program -> PROGRAM ID TWOPOINTS program_body main END .

    $end            reduce using rule 1 (program -> PROGRAM ID TWOPOINTS program_body main END .)


state 25

    (107) main -> MAIN LBRACE . statutes_aux RBRACE
    (108) main -> MAIN LBRACE . dec_vars statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (9) dec_vars -> . VAR dec_vars_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    VAR             shift and go to state 9
    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 35
    dec_vars                       shift and go to state 36
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 26

    (2) program_body -> program_body_vars program_body_class program_body_funct .

    MAIN            reduce using rule 2 (program_body -> program_body_vars program_body_class program_body_funct .)


state 27

    (7) program_body_funct -> functions .

    MAIN            reduce using rule 7 (program_body_funct -> functions .)


state 28

    (8) program_body_funct -> empty .

    MAIN            reduce using rule 8 (program_body_funct -> empty .)


state 29

    (33) functions -> FUNCT . functions_aux
    (34) functions -> FUNCT . functions_aux functions
    (35) functions_aux -> . VOID ID LPAREN params RPAREN body
    (36) functions_aux -> . VOID ID LPAREN RPAREN body
    (37) functions_aux -> . simple_type ID LPAREN RPAREN body
    (38) functions_aux -> . simple_type ID LPAREN params RPAREN body
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    VOID            shift and go to state 53
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    functions_aux                  shift and go to state 52
    simple_type                    shift and go to state 54

state 30

    (27) classes -> CLASS ID . classes_aux
    (28) classes -> CLASS ID . classes_aux classes
    (29) classes_aux -> . LBRACE dec_vars functions RBRACE
    (30) classes_aux -> . LBRACE functions RBRACE
    (31) classes_aux -> . INHERITS ID LBRACE dec_vars functions RBRACE
    (32) classes_aux -> . INHERITS ID LBRACE functions RBRACE

    LBRACE          shift and go to state 56
    INHERITS        shift and go to state 57

    classes_aux                    shift and go to state 55

state 31

    (10) dec_vars_aux -> simple_type vars_simple_type . SEMICOLON
    (11) dec_vars_aux -> simple_type vars_simple_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 58


state 32

    (16) vars_simple_type -> ID .
    (17) vars_simple_type -> ID . COMMA vars_simple_type
    (18) vars_simple_type -> ID . vars_simple_type_aux
    (19) vars_simple_type -> ID . vars_simple_type_aux COMMA vars_simple_type
    (20) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET
    (21) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET

    SEMICOLON       reduce using rule 16 (vars_simple_type -> ID .)
    COMMA           shift and go to state 59
    LBRACKET        shift and go to state 61

    vars_simple_type_aux           shift and go to state 60

state 33

    (12) dec_vars_aux -> complex_type vars_complex_type . SEMICOLON
    (13) dec_vars_aux -> complex_type vars_complex_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 62


state 34

    (14) vars_complex_type -> ID .
    (15) vars_complex_type -> ID . COMMA vars_complex_type

    SEMICOLON       reduce using rule 14 (vars_complex_type -> ID .)
    COMMA           shift and go to state 63


state 35

    (107) main -> MAIN LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 64


state 36

    (108) main -> MAIN LBRACE dec_vars . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 65
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 37

    (52) statutes_aux -> statutes .
    (53) statutes_aux -> statutes . statutes_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    RBRACE          reduce using rule 52 (statutes_aux -> statutes .)
    RETURN          reduce using rule 52 (statutes_aux -> statutes .)
    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes                       shift and go to state 37
    statutes_aux                   shift and go to state 66
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 38

    (45) statutes -> call . SEMICOLON

    SEMICOLON       shift and go to state 67


state 39

    (46) statutes -> assignation .

    ID              reduce using rule 46 (statutes -> assignation .)
    READ            reduce using rule 46 (statutes -> assignation .)
    WRITE           reduce using rule 46 (statutes -> assignation .)
    IF              reduce using rule 46 (statutes -> assignation .)
    WHILE           reduce using rule 46 (statutes -> assignation .)
    FROM            reduce using rule 46 (statutes -> assignation .)
    RBRACE          reduce using rule 46 (statutes -> assignation .)
    RETURN          reduce using rule 46 (statutes -> assignation .)


state 40

    (47) statutes -> read .

    ID              reduce using rule 47 (statutes -> read .)
    READ            reduce using rule 47 (statutes -> read .)
    WRITE           reduce using rule 47 (statutes -> read .)
    IF              reduce using rule 47 (statutes -> read .)
    WHILE           reduce using rule 47 (statutes -> read .)
    FROM            reduce using rule 47 (statutes -> read .)
    RBRACE          reduce using rule 47 (statutes -> read .)
    RETURN          reduce using rule 47 (statutes -> read .)


state 41

    (48) statutes -> write .

    ID              reduce using rule 48 (statutes -> write .)
    READ            reduce using rule 48 (statutes -> write .)
    WRITE           reduce using rule 48 (statutes -> write .)
    IF              reduce using rule 48 (statutes -> write .)
    WHILE           reduce using rule 48 (statutes -> write .)
    FROM            reduce using rule 48 (statutes -> write .)
    RBRACE          reduce using rule 48 (statutes -> write .)
    RETURN          reduce using rule 48 (statutes -> write .)


state 42

    (49) statutes -> condition .

    ID              reduce using rule 49 (statutes -> condition .)
    READ            reduce using rule 49 (statutes -> condition .)
    WRITE           reduce using rule 49 (statutes -> condition .)
    IF              reduce using rule 49 (statutes -> condition .)
    WHILE           reduce using rule 49 (statutes -> condition .)
    FROM            reduce using rule 49 (statutes -> condition .)
    RBRACE          reduce using rule 49 (statutes -> condition .)
    RETURN          reduce using rule 49 (statutes -> condition .)


state 43

    (50) statutes -> while .

    ID              reduce using rule 50 (statutes -> while .)
    READ            reduce using rule 50 (statutes -> while .)
    WRITE           reduce using rule 50 (statutes -> while .)
    IF              reduce using rule 50 (statutes -> while .)
    WHILE           reduce using rule 50 (statutes -> while .)
    FROM            reduce using rule 50 (statutes -> while .)
    RBRACE          reduce using rule 50 (statutes -> while .)
    RETURN          reduce using rule 50 (statutes -> while .)


state 44

    (51) statutes -> for .

    ID              reduce using rule 51 (statutes -> for .)
    READ            reduce using rule 51 (statutes -> for .)
    WRITE           reduce using rule 51 (statutes -> for .)
    IF              reduce using rule 51 (statutes -> for .)
    WHILE           reduce using rule 51 (statutes -> for .)
    FROM            reduce using rule 51 (statutes -> for .)
    RBRACE          reduce using rule 51 (statutes -> for .)
    RETURN          reduce using rule 51 (statutes -> for .)


state 45

    (62) call -> ID . LPAREN RPAREN
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . LPAREN call_aux RPAREN
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN
    (55) var -> ID .
    (56) var -> ID . var_aux
    (57) var_aux -> . POINT ID
    (58) var_aux -> . POINT ID var_aux_2
    (59) var_aux -> . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    LPAREN          shift and go to state 68
    POINT           shift and go to state 69
    EQUAL           reduce using rule 55 (var -> ID .)
    LBRACKET        shift and go to state 72

    var_aux                        shift and go to state 70
    var_aux_2                      shift and go to state 71

state 46

    (54) assignation -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 73


state 47

    (73) read -> READ . LPAREN var RPAREN SEMICOLON

    LPAREN          shift and go to state 74


state 48

    (74) write -> WRITE . LPAREN write_aux RPAREN SEMICOLON

    LPAREN          shift and go to state 75


state 49

    (68) condition -> IF . condition_aux
    (69) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 77

    condition_aux                  shift and go to state 76

state 50

    (79) while -> WHILE . LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 78


state 51

    (80) for -> FROM . LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 79


state 52

    (33) functions -> FUNCT functions_aux .
    (34) functions -> FUNCT functions_aux . functions
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    MAIN            reduce using rule 33 (functions -> FUNCT functions_aux .)
    RBRACE          reduce using rule 33 (functions -> FUNCT functions_aux .)
    FUNCT           shift and go to state 29

    functions                      shift and go to state 80

state 53

    (35) functions_aux -> VOID . ID LPAREN params RPAREN body
    (36) functions_aux -> VOID . ID LPAREN RPAREN body

    ID              shift and go to state 81


state 54

    (37) functions_aux -> simple_type . ID LPAREN RPAREN body
    (38) functions_aux -> simple_type . ID LPAREN params RPAREN body

    ID              shift and go to state 82


state 55

    (27) classes -> CLASS ID classes_aux .
    (28) classes -> CLASS ID classes_aux . classes
    (27) classes -> . CLASS ID classes_aux
    (28) classes -> . CLASS ID classes_aux classes

    FUNCT           reduce using rule 27 (classes -> CLASS ID classes_aux .)
    MAIN            reduce using rule 27 (classes -> CLASS ID classes_aux .)
    CLASS           shift and go to state 15

    classes                        shift and go to state 83

state 56

    (29) classes_aux -> LBRACE . dec_vars functions RBRACE
    (30) classes_aux -> LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 9
    FUNCT           shift and go to state 29

    dec_vars                       shift and go to state 84
    functions                      shift and go to state 85

state 57

    (31) classes_aux -> INHERITS . ID LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS . ID LBRACE functions RBRACE

    ID              shift and go to state 86


state 58

    (10) dec_vars_aux -> simple_type vars_simple_type SEMICOLON .
    (11) dec_vars_aux -> simple_type vars_simple_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

  ! shift/reduce conflict for ID resolved as shift
    CLASS           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    FUNCT           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    MAIN            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    READ            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    WRITE           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    IF              reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    WHILE           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    FROM            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

  ! ID              [ reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .) ]

    simple_type                    shift and go to state 17
    dec_vars_aux                   shift and go to state 87
    complex_type                   shift and go to state 18

state 59

    (17) vars_simple_type -> ID COMMA . vars_simple_type
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 88

state 60

    (18) vars_simple_type -> ID vars_simple_type_aux .
    (19) vars_simple_type -> ID vars_simple_type_aux . COMMA vars_simple_type

    SEMICOLON       reduce using rule 18 (vars_simple_type -> ID vars_simple_type_aux .)
    COMMA           shift and go to state 89


state 61

    (20) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET
    (21) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET

    CTEI            shift and go to state 90


state 62

    (12) dec_vars_aux -> complex_type vars_complex_type SEMICOLON .
    (13) dec_vars_aux -> complex_type vars_complex_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

  ! shift/reduce conflict for ID resolved as shift
    CLASS           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    FUNCT           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    MAIN            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    READ            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    WRITE           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    IF              reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    WHILE           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    FROM            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

  ! ID              [ reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .) ]

    complex_type                   shift and go to state 18
    dec_vars_aux                   shift and go to state 91
    simple_type                    shift and go to state 17

state 63

    (15) vars_complex_type -> ID COMMA . vars_complex_type
    (14) vars_complex_type -> . ID
    (15) vars_complex_type -> . ID COMMA vars_complex_type

    ID              shift and go to state 34

    vars_complex_type              shift and go to state 92

state 64

    (107) main -> MAIN LBRACE statutes_aux RBRACE .

    END             reduce using rule 107 (main -> MAIN LBRACE statutes_aux RBRACE .)


state 65

    (108) main -> MAIN LBRACE dec_vars statutes_aux . RBRACE

    RBRACE          shift and go to state 93


state 66

    (53) statutes_aux -> statutes statutes_aux .

    RBRACE          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)
    RETURN          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)


state 67

    (45) statutes -> call SEMICOLON .

    ID              reduce using rule 45 (statutes -> call SEMICOLON .)
    READ            reduce using rule 45 (statutes -> call SEMICOLON .)
    WRITE           reduce using rule 45 (statutes -> call SEMICOLON .)
    IF              reduce using rule 45 (statutes -> call SEMICOLON .)
    WHILE           reduce using rule 45 (statutes -> call SEMICOLON .)
    FROM            reduce using rule 45 (statutes -> call SEMICOLON .)
    RBRACE          reduce using rule 45 (statutes -> call SEMICOLON .)
    RETURN          reduce using rule 45 (statutes -> call SEMICOLON .)


state 68

    (62) call -> ID LPAREN . RPAREN
    (64) call -> ID LPAREN . call_aux RPAREN
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    RPAREN          shift and go to state 96
    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    call_aux                       shift and go to state 97
    exp                            shift and go to state 98
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 69

    (63) call -> ID POINT . ID LPAREN RPAREN
    (65) call -> ID POINT . ID LPAREN call_aux RPAREN
    (57) var_aux -> POINT . ID
    (58) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 116


state 70

    (56) var -> ID var_aux .

    EQUAL           reduce using rule 56 (var -> ID var_aux .)
    TIMES           reduce using rule 56 (var -> ID var_aux .)
    DIVIDE          reduce using rule 56 (var -> ID var_aux .)
    PLUS            reduce using rule 56 (var -> ID var_aux .)
    MINUS           reduce using rule 56 (var -> ID var_aux .)
    RELOP           reduce using rule 56 (var -> ID var_aux .)
    AND             reduce using rule 56 (var -> ID var_aux .)
    OR              reduce using rule 56 (var -> ID var_aux .)
    COMMA           reduce using rule 56 (var -> ID var_aux .)
    RPAREN          reduce using rule 56 (var -> ID var_aux .)
    RBRACKET        reduce using rule 56 (var -> ID var_aux .)
    SEMICOLON       reduce using rule 56 (var -> ID var_aux .)


state 71

    (59) var_aux -> var_aux_2 .

    EQUAL           reduce using rule 59 (var_aux -> var_aux_2 .)
    TIMES           reduce using rule 59 (var_aux -> var_aux_2 .)
    DIVIDE          reduce using rule 59 (var_aux -> var_aux_2 .)
    PLUS            reduce using rule 59 (var_aux -> var_aux_2 .)
    MINUS           reduce using rule 59 (var_aux -> var_aux_2 .)
    RELOP           reduce using rule 59 (var_aux -> var_aux_2 .)
    AND             reduce using rule 59 (var_aux -> var_aux_2 .)
    OR              reduce using rule 59 (var_aux -> var_aux_2 .)
    COMMA           reduce using rule 59 (var_aux -> var_aux_2 .)
    RPAREN          reduce using rule 59 (var_aux -> var_aux_2 .)
    RBRACKET        reduce using rule 59 (var_aux -> var_aux_2 .)
    SEMICOLON       reduce using rule 59 (var_aux -> var_aux_2 .)


state 72

    (60) var_aux_2 -> LBRACKET . exp RBRACKET
    (61) var_aux_2 -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 117
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 73

    (54) assignation -> var EQUAL . exp SEMICOLON
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    var                            shift and go to state 106
    exp                            shift and go to state 118
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 74

    (73) read -> READ LPAREN . var RPAREN SEMICOLON
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 120

    var                            shift and go to state 119

state 75

    (74) write -> WRITE LPAREN . write_aux RPAREN SEMICOLON
    (75) write_aux -> . exp
    (76) write_aux -> . exp COMMA write_aux
    (77) write_aux -> . CTESTRING
    (78) write_aux -> . CTESTRING COMMA write_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    CTESTRING       shift and go to state 123
    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    write_aux                      shift and go to state 121
    exp                            shift and go to state 122
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 76

    (68) condition -> IF condition_aux .

    ID              reduce using rule 68 (condition -> IF condition_aux .)
    READ            reduce using rule 68 (condition -> IF condition_aux .)
    WRITE           reduce using rule 68 (condition -> IF condition_aux .)
    IF              reduce using rule 68 (condition -> IF condition_aux .)
    WHILE           reduce using rule 68 (condition -> IF condition_aux .)
    FROM            reduce using rule 68 (condition -> IF condition_aux .)
    RBRACE          reduce using rule 68 (condition -> IF condition_aux .)
    RETURN          reduce using rule 68 (condition -> IF condition_aux .)


state 77

    (69) condition_aux -> LPAREN . exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> LPAREN . exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 124
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 78

    (79) while -> WHILE LPAREN . exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 125
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 79

    (80) for -> FROM LPAREN . exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 126
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 80

    (34) functions -> FUNCT functions_aux functions .

    MAIN            reduce using rule 34 (functions -> FUNCT functions_aux functions .)
    RBRACE          reduce using rule 34 (functions -> FUNCT functions_aux functions .)


state 81

    (35) functions_aux -> VOID ID . LPAREN params RPAREN body
    (36) functions_aux -> VOID ID . LPAREN RPAREN body

    LPAREN          shift and go to state 127


state 82

    (37) functions_aux -> simple_type ID . LPAREN RPAREN body
    (38) functions_aux -> simple_type ID . LPAREN params RPAREN body

    LPAREN          shift and go to state 128


state 83

    (28) classes -> CLASS ID classes_aux classes .

    FUNCT           reduce using rule 28 (classes -> CLASS ID classes_aux classes .)
    MAIN            reduce using rule 28 (classes -> CLASS ID classes_aux classes .)


state 84

    (29) classes_aux -> LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 29

    functions                      shift and go to state 129

state 85

    (30) classes_aux -> LBRACE functions . RBRACE

    RBRACE          shift and go to state 130


state 86

    (31) classes_aux -> INHERITS ID . LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS ID . LBRACE functions RBRACE

    LBRACE          shift and go to state 131


state 87

    (11) dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .

    CLASS           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FUNCT           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    MAIN            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)


state 88

    (17) vars_simple_type -> ID COMMA vars_simple_type .

    SEMICOLON       reduce using rule 17 (vars_simple_type -> ID COMMA vars_simple_type .)


state 89

    (19) vars_simple_type -> ID vars_simple_type_aux COMMA . vars_simple_type
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 132

state 90

    (20) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET
    (21) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 133


state 91

    (13) dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .

    CLASS           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    FUNCT           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    MAIN            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)


state 92

    (15) vars_complex_type -> ID COMMA vars_complex_type .

    SEMICOLON       reduce using rule 15 (vars_complex_type -> ID COMMA vars_complex_type .)


state 93

    (108) main -> MAIN LBRACE dec_vars statutes_aux RBRACE .

    END             reduce using rule 108 (main -> MAIN LBRACE dec_vars statutes_aux RBRACE .)


state 94

    (55) var -> ID .
    (56) var -> ID . var_aux
    (62) call -> ID . LPAREN RPAREN
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . LPAREN call_aux RPAREN
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN
    (100) cte -> ID .
    (57) var_aux -> . POINT ID
    (58) var_aux -> . POINT ID var_aux_2
    (59) var_aux -> . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

  ! reduce/reduce conflict for TIMES resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RELOP resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (var -> ID .)
    TIMES           reduce using rule 55 (var -> ID .)
    DIVIDE          reduce using rule 55 (var -> ID .)
    PLUS            reduce using rule 55 (var -> ID .)
    MINUS           reduce using rule 55 (var -> ID .)
    RELOP           reduce using rule 55 (var -> ID .)
    AND             reduce using rule 55 (var -> ID .)
    OR              reduce using rule 55 (var -> ID .)
    COMMA           reduce using rule 55 (var -> ID .)
    RPAREN          reduce using rule 55 (var -> ID .)
    RBRACKET        reduce using rule 55 (var -> ID .)
    SEMICOLON       reduce using rule 55 (var -> ID .)
    LPAREN          shift and go to state 68
    POINT           shift and go to state 69
    LBRACKET        shift and go to state 72

  ! TIMES           [ reduce using rule 100 (cte -> ID .) ]
  ! DIVIDE          [ reduce using rule 100 (cte -> ID .) ]
  ! PLUS            [ reduce using rule 100 (cte -> ID .) ]
  ! MINUS           [ reduce using rule 100 (cte -> ID .) ]
  ! RELOP           [ reduce using rule 100 (cte -> ID .) ]
  ! AND             [ reduce using rule 100 (cte -> ID .) ]
  ! OR              [ reduce using rule 100 (cte -> ID .) ]
  ! COMMA           [ reduce using rule 100 (cte -> ID .) ]
  ! RPAREN          [ reduce using rule 100 (cte -> ID .) ]
  ! RBRACKET        [ reduce using rule 100 (cte -> ID .) ]
  ! SEMICOLON       [ reduce using rule 100 (cte -> ID .) ]

    var_aux                        shift and go to state 70
    var_aux_2                      shift and go to state 71

state 95

    (93) factor -> LPAREN . exp RPAREN
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 134
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 96

    (62) call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 62 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 62 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 62 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RELOP           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 62 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 62 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 62 (call -> ID LPAREN RPAREN .)


state 97

    (64) call -> ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 135


state 98

    (66) call_aux -> exp .
    (67) call_aux -> exp . COMMA call_aux

    RPAREN          reduce using rule 66 (call_aux -> exp .)
    COMMA           shift and go to state 136


state 99

    (81) exp -> n_exp .
    (82) exp -> n_exp . OR exp

    COMMA           reduce using rule 81 (exp -> n_exp .)
    RPAREN          reduce using rule 81 (exp -> n_exp .)
    RBRACKET        reduce using rule 81 (exp -> n_exp .)
    SEMICOLON       reduce using rule 81 (exp -> n_exp .)
    OR              shift and go to state 137


state 100

    (83) n_exp -> l_exp .
    (84) n_exp -> l_exp . AND n_exp

    OR              reduce using rule 83 (n_exp -> l_exp .)
    COMMA           reduce using rule 83 (n_exp -> l_exp .)
    RPAREN          reduce using rule 83 (n_exp -> l_exp .)
    RBRACKET        reduce using rule 83 (n_exp -> l_exp .)
    SEMICOLON       reduce using rule 83 (n_exp -> l_exp .)
    AND             shift and go to state 138


state 101

    (85) l_exp -> a_exp .
    (86) l_exp -> a_exp . RELOP a_exp

    AND             reduce using rule 85 (l_exp -> a_exp .)
    OR              reduce using rule 85 (l_exp -> a_exp .)
    COMMA           reduce using rule 85 (l_exp -> a_exp .)
    RPAREN          reduce using rule 85 (l_exp -> a_exp .)
    RBRACKET        reduce using rule 85 (l_exp -> a_exp .)
    SEMICOLON       reduce using rule 85 (l_exp -> a_exp .)
    RELOP           shift and go to state 139


state 102

    (87) a_exp -> term .
    (88) a_exp -> term . PLUS a_exp
    (89) a_exp -> term . MINUS a_exp

    RELOP           reduce using rule 87 (a_exp -> term .)
    AND             reduce using rule 87 (a_exp -> term .)
    OR              reduce using rule 87 (a_exp -> term .)
    COMMA           reduce using rule 87 (a_exp -> term .)
    RPAREN          reduce using rule 87 (a_exp -> term .)
    RBRACKET        reduce using rule 87 (a_exp -> term .)
    SEMICOLON       reduce using rule 87 (a_exp -> term .)
    PLUS            shift and go to state 140
    MINUS           shift and go to state 141


state 103

    (98) factor_aux -> PLUS . cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    ID              shift and go to state 143
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    cte                            shift and go to state 142
    bool                           shift and go to state 113

state 104

    (99) factor_aux -> MINUS . cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    ID              shift and go to state 143
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    cte                            shift and go to state 144
    bool                           shift and go to state 113

state 105

    (90) term -> factor .
    (91) term -> factor . TIMES term
    (92) term -> factor . DIVIDE term

    PLUS            reduce using rule 90 (term -> factor .)
    MINUS           reduce using rule 90 (term -> factor .)
    RELOP           reduce using rule 90 (term -> factor .)
    AND             reduce using rule 90 (term -> factor .)
    OR              reduce using rule 90 (term -> factor .)
    COMMA           reduce using rule 90 (term -> factor .)
    RPAREN          reduce using rule 90 (term -> factor .)
    RBRACKET        reduce using rule 90 (term -> factor .)
    SEMICOLON       reduce using rule 90 (term -> factor .)
    TIMES           shift and go to state 145
    DIVIDE          shift and go to state 146


state 106

    (94) factor -> var .

    TIMES           reduce using rule 94 (factor -> var .)
    DIVIDE          reduce using rule 94 (factor -> var .)
    PLUS            reduce using rule 94 (factor -> var .)
    MINUS           reduce using rule 94 (factor -> var .)
    RELOP           reduce using rule 94 (factor -> var .)
    AND             reduce using rule 94 (factor -> var .)
    OR              reduce using rule 94 (factor -> var .)
    COMMA           reduce using rule 94 (factor -> var .)
    RPAREN          reduce using rule 94 (factor -> var .)
    RBRACKET        reduce using rule 94 (factor -> var .)
    SEMICOLON       reduce using rule 94 (factor -> var .)


state 107

    (95) factor -> call .

    TIMES           reduce using rule 95 (factor -> call .)
    DIVIDE          reduce using rule 95 (factor -> call .)
    PLUS            reduce using rule 95 (factor -> call .)
    MINUS           reduce using rule 95 (factor -> call .)
    RELOP           reduce using rule 95 (factor -> call .)
    AND             reduce using rule 95 (factor -> call .)
    OR              reduce using rule 95 (factor -> call .)
    COMMA           reduce using rule 95 (factor -> call .)
    RPAREN          reduce using rule 95 (factor -> call .)
    RBRACKET        reduce using rule 95 (factor -> call .)
    SEMICOLON       reduce using rule 95 (factor -> call .)


state 108

    (96) factor -> factor_aux .

    TIMES           reduce using rule 96 (factor -> factor_aux .)
    DIVIDE          reduce using rule 96 (factor -> factor_aux .)
    PLUS            reduce using rule 96 (factor -> factor_aux .)
    MINUS           reduce using rule 96 (factor -> factor_aux .)
    RELOP           reduce using rule 96 (factor -> factor_aux .)
    AND             reduce using rule 96 (factor -> factor_aux .)
    OR              reduce using rule 96 (factor -> factor_aux .)
    COMMA           reduce using rule 96 (factor -> factor_aux .)
    RPAREN          reduce using rule 96 (factor -> factor_aux .)
    RBRACKET        reduce using rule 96 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 96 (factor -> factor_aux .)


state 109

    (97) factor_aux -> cte .

    TIMES           reduce using rule 97 (factor_aux -> cte .)
    DIVIDE          reduce using rule 97 (factor_aux -> cte .)
    PLUS            reduce using rule 97 (factor_aux -> cte .)
    MINUS           reduce using rule 97 (factor_aux -> cte .)
    RELOP           reduce using rule 97 (factor_aux -> cte .)
    AND             reduce using rule 97 (factor_aux -> cte .)
    OR              reduce using rule 97 (factor_aux -> cte .)
    COMMA           reduce using rule 97 (factor_aux -> cte .)
    RPAREN          reduce using rule 97 (factor_aux -> cte .)
    RBRACKET        reduce using rule 97 (factor_aux -> cte .)
    SEMICOLON       reduce using rule 97 (factor_aux -> cte .)


state 110

    (101) cte -> CTEI .

    TIMES           reduce using rule 101 (cte -> CTEI .)
    DIVIDE          reduce using rule 101 (cte -> CTEI .)
    PLUS            reduce using rule 101 (cte -> CTEI .)
    MINUS           reduce using rule 101 (cte -> CTEI .)
    RELOP           reduce using rule 101 (cte -> CTEI .)
    AND             reduce using rule 101 (cte -> CTEI .)
    OR              reduce using rule 101 (cte -> CTEI .)
    COMMA           reduce using rule 101 (cte -> CTEI .)
    RPAREN          reduce using rule 101 (cte -> CTEI .)
    RBRACKET        reduce using rule 101 (cte -> CTEI .)
    SEMICOLON       reduce using rule 101 (cte -> CTEI .)


state 111

    (102) cte -> CTEF .

    TIMES           reduce using rule 102 (cte -> CTEF .)
    DIVIDE          reduce using rule 102 (cte -> CTEF .)
    PLUS            reduce using rule 102 (cte -> CTEF .)
    MINUS           reduce using rule 102 (cte -> CTEF .)
    RELOP           reduce using rule 102 (cte -> CTEF .)
    AND             reduce using rule 102 (cte -> CTEF .)
    OR              reduce using rule 102 (cte -> CTEF .)
    COMMA           reduce using rule 102 (cte -> CTEF .)
    RPAREN          reduce using rule 102 (cte -> CTEF .)
    RBRACKET        reduce using rule 102 (cte -> CTEF .)
    SEMICOLON       reduce using rule 102 (cte -> CTEF .)


state 112

    (103) cte -> CTECHAR .

    TIMES           reduce using rule 103 (cte -> CTECHAR .)
    DIVIDE          reduce using rule 103 (cte -> CTECHAR .)
    PLUS            reduce using rule 103 (cte -> CTECHAR .)
    MINUS           reduce using rule 103 (cte -> CTECHAR .)
    RELOP           reduce using rule 103 (cte -> CTECHAR .)
    AND             reduce using rule 103 (cte -> CTECHAR .)
    OR              reduce using rule 103 (cte -> CTECHAR .)
    COMMA           reduce using rule 103 (cte -> CTECHAR .)
    RPAREN          reduce using rule 103 (cte -> CTECHAR .)
    RBRACKET        reduce using rule 103 (cte -> CTECHAR .)
    SEMICOLON       reduce using rule 103 (cte -> CTECHAR .)


state 113

    (104) cte -> bool .

    TIMES           reduce using rule 104 (cte -> bool .)
    DIVIDE          reduce using rule 104 (cte -> bool .)
    PLUS            reduce using rule 104 (cte -> bool .)
    MINUS           reduce using rule 104 (cte -> bool .)
    RELOP           reduce using rule 104 (cte -> bool .)
    AND             reduce using rule 104 (cte -> bool .)
    OR              reduce using rule 104 (cte -> bool .)
    COMMA           reduce using rule 104 (cte -> bool .)
    RPAREN          reduce using rule 104 (cte -> bool .)
    RBRACKET        reduce using rule 104 (cte -> bool .)
    SEMICOLON       reduce using rule 104 (cte -> bool .)


state 114

    (105) bool -> TRUE .

    TIMES           reduce using rule 105 (bool -> TRUE .)
    DIVIDE          reduce using rule 105 (bool -> TRUE .)
    PLUS            reduce using rule 105 (bool -> TRUE .)
    MINUS           reduce using rule 105 (bool -> TRUE .)
    RELOP           reduce using rule 105 (bool -> TRUE .)
    AND             reduce using rule 105 (bool -> TRUE .)
    OR              reduce using rule 105 (bool -> TRUE .)
    COMMA           reduce using rule 105 (bool -> TRUE .)
    RPAREN          reduce using rule 105 (bool -> TRUE .)
    RBRACKET        reduce using rule 105 (bool -> TRUE .)
    SEMICOLON       reduce using rule 105 (bool -> TRUE .)


state 115

    (106) bool -> FALSE .

    TIMES           reduce using rule 106 (bool -> FALSE .)
    DIVIDE          reduce using rule 106 (bool -> FALSE .)
    PLUS            reduce using rule 106 (bool -> FALSE .)
    MINUS           reduce using rule 106 (bool -> FALSE .)
    RELOP           reduce using rule 106 (bool -> FALSE .)
    AND             reduce using rule 106 (bool -> FALSE .)
    OR              reduce using rule 106 (bool -> FALSE .)
    COMMA           reduce using rule 106 (bool -> FALSE .)
    RPAREN          reduce using rule 106 (bool -> FALSE .)
    RBRACKET        reduce using rule 106 (bool -> FALSE .)
    SEMICOLON       reduce using rule 106 (bool -> FALSE .)


state 116

    (63) call -> ID POINT ID . LPAREN RPAREN
    (65) call -> ID POINT ID . LPAREN call_aux RPAREN
    (57) var_aux -> POINT ID .
    (58) var_aux -> POINT ID . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    LPAREN          shift and go to state 147
    EQUAL           reduce using rule 57 (var_aux -> POINT ID .)
    TIMES           reduce using rule 57 (var_aux -> POINT ID .)
    DIVIDE          reduce using rule 57 (var_aux -> POINT ID .)
    PLUS            reduce using rule 57 (var_aux -> POINT ID .)
    MINUS           reduce using rule 57 (var_aux -> POINT ID .)
    RELOP           reduce using rule 57 (var_aux -> POINT ID .)
    AND             reduce using rule 57 (var_aux -> POINT ID .)
    OR              reduce using rule 57 (var_aux -> POINT ID .)
    COMMA           reduce using rule 57 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 57 (var_aux -> POINT ID .)
    RBRACKET        reduce using rule 57 (var_aux -> POINT ID .)
    SEMICOLON       reduce using rule 57 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 72

    var_aux_2                      shift and go to state 148

state 117

    (60) var_aux_2 -> LBRACKET exp . RBRACKET
    (61) var_aux_2 -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET

    RBRACKET        shift and go to state 149


state 118

    (54) assignation -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 150


state 119

    (73) read -> READ LPAREN var . RPAREN SEMICOLON

    RPAREN          shift and go to state 151


state 120

    (55) var -> ID .
    (56) var -> ID . var_aux
    (57) var_aux -> . POINT ID
    (58) var_aux -> . POINT ID var_aux_2
    (59) var_aux -> . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    RPAREN          reduce using rule 55 (var -> ID .)
    POINT           shift and go to state 152
    LBRACKET        shift and go to state 72

    var_aux                        shift and go to state 70
    var_aux_2                      shift and go to state 71

state 121

    (74) write -> WRITE LPAREN write_aux . RPAREN SEMICOLON

    RPAREN          shift and go to state 153


state 122

    (75) write_aux -> exp .
    (76) write_aux -> exp . COMMA write_aux

    RPAREN          reduce using rule 75 (write_aux -> exp .)
    COMMA           shift and go to state 154


state 123

    (77) write_aux -> CTESTRING .
    (78) write_aux -> CTESTRING . COMMA write_aux

    RPAREN          reduce using rule 77 (write_aux -> CTESTRING .)
    COMMA           shift and go to state 155


state 124

    (69) condition_aux -> LPAREN exp . RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> LPAREN exp . RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 156


state 125

    (79) while -> WHILE LPAREN exp . RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 157


state 126

    (80) for -> FROM LPAREN exp . RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 158


state 127

    (35) functions_aux -> VOID ID LPAREN . params RPAREN body
    (36) functions_aux -> VOID ID LPAREN . RPAREN body
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    RPAREN          shift and go to state 160
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    params                         shift and go to state 159
    simple_type                    shift and go to state 161

state 128

    (37) functions_aux -> simple_type ID LPAREN . RPAREN body
    (38) functions_aux -> simple_type ID LPAREN . params RPAREN body
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    RPAREN          shift and go to state 162
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    simple_type                    shift and go to state 161
    params                         shift and go to state 163

state 129

    (29) classes_aux -> LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 164


state 130

    (30) classes_aux -> LBRACE functions RBRACE .

    CLASS           reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)
    FUNCT           reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)
    MAIN            reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)


state 131

    (31) classes_aux -> INHERITS ID LBRACE . dec_vars functions RBRACE
    (32) classes_aux -> INHERITS ID LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 9
    FUNCT           shift and go to state 29

    dec_vars                       shift and go to state 165
    functions                      shift and go to state 166

state 132

    (19) vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .

    SEMICOLON       reduce using rule 19 (vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .)


state 133

    (20) vars_simple_type_aux -> LBRACKET CTEI RBRACKET .
    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 20 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 20 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 167


state 134

    (93) factor -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 168


state 135

    (64) call -> ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)


state 136

    (67) call_aux -> exp COMMA . call_aux
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 98
    call_aux                       shift and go to state 169
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 137

    (82) exp -> n_exp OR . exp
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    n_exp                          shift and go to state 99
    exp                            shift and go to state 170
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 138

    (84) n_exp -> l_exp AND . n_exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    l_exp                          shift and go to state 100
    n_exp                          shift and go to state 171
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 139

    (86) l_exp -> a_exp RELOP . a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    a_exp                          shift and go to state 172
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 140

    (88) a_exp -> term PLUS . a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    term                           shift and go to state 102
    a_exp                          shift and go to state 173
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 141

    (89) a_exp -> term MINUS . a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    term                           shift and go to state 102
    a_exp                          shift and go to state 174
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 142

    (98) factor_aux -> PLUS cte .

    TIMES           reduce using rule 98 (factor_aux -> PLUS cte .)
    DIVIDE          reduce using rule 98 (factor_aux -> PLUS cte .)
    PLUS            reduce using rule 98 (factor_aux -> PLUS cte .)
    MINUS           reduce using rule 98 (factor_aux -> PLUS cte .)
    RELOP           reduce using rule 98 (factor_aux -> PLUS cte .)
    AND             reduce using rule 98 (factor_aux -> PLUS cte .)
    OR              reduce using rule 98 (factor_aux -> PLUS cte .)
    COMMA           reduce using rule 98 (factor_aux -> PLUS cte .)
    RPAREN          reduce using rule 98 (factor_aux -> PLUS cte .)
    RBRACKET        reduce using rule 98 (factor_aux -> PLUS cte .)
    SEMICOLON       reduce using rule 98 (factor_aux -> PLUS cte .)


state 143

    (100) cte -> ID .

    TIMES           reduce using rule 100 (cte -> ID .)
    DIVIDE          reduce using rule 100 (cte -> ID .)
    PLUS            reduce using rule 100 (cte -> ID .)
    MINUS           reduce using rule 100 (cte -> ID .)
    RELOP           reduce using rule 100 (cte -> ID .)
    AND             reduce using rule 100 (cte -> ID .)
    OR              reduce using rule 100 (cte -> ID .)
    COMMA           reduce using rule 100 (cte -> ID .)
    RPAREN          reduce using rule 100 (cte -> ID .)
    RBRACKET        reduce using rule 100 (cte -> ID .)
    SEMICOLON       reduce using rule 100 (cte -> ID .)


state 144

    (99) factor_aux -> MINUS cte .

    TIMES           reduce using rule 99 (factor_aux -> MINUS cte .)
    DIVIDE          reduce using rule 99 (factor_aux -> MINUS cte .)
    PLUS            reduce using rule 99 (factor_aux -> MINUS cte .)
    MINUS           reduce using rule 99 (factor_aux -> MINUS cte .)
    RELOP           reduce using rule 99 (factor_aux -> MINUS cte .)
    AND             reduce using rule 99 (factor_aux -> MINUS cte .)
    OR              reduce using rule 99 (factor_aux -> MINUS cte .)
    COMMA           reduce using rule 99 (factor_aux -> MINUS cte .)
    RPAREN          reduce using rule 99 (factor_aux -> MINUS cte .)
    RBRACKET        reduce using rule 99 (factor_aux -> MINUS cte .)
    SEMICOLON       reduce using rule 99 (factor_aux -> MINUS cte .)


state 145

    (91) term -> factor TIMES . term
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    factor                         shift and go to state 105
    term                           shift and go to state 175
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 146

    (92) term -> factor DIVIDE . term
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    factor                         shift and go to state 105
    term                           shift and go to state 176
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 147

    (63) call -> ID POINT ID LPAREN . RPAREN
    (65) call -> ID POINT ID LPAREN . call_aux RPAREN
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    RPAREN          shift and go to state 177
    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    call_aux                       shift and go to state 178
    exp                            shift and go to state 98
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 148

    (58) var_aux -> POINT ID var_aux_2 .

    EQUAL           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    TIMES           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    DIVIDE          reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    PLUS            reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    MINUS           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RELOP           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    AND             reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    OR              reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    COMMA           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RPAREN          reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RBRACKET        reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    SEMICOLON       reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)


state 149

    (60) var_aux_2 -> LBRACKET exp RBRACKET .
    (61) var_aux_2 -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET

    EQUAL           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 179


state 150

    (54) assignation -> var EQUAL exp SEMICOLON .

    ID              reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    FROM            reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)


state 151

    (73) read -> READ LPAREN var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 180


state 152

    (57) var_aux -> POINT . ID
    (58) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 181


state 153

    (74) write -> WRITE LPAREN write_aux RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 154

    (76) write_aux -> exp COMMA . write_aux
    (75) write_aux -> . exp
    (76) write_aux -> . exp COMMA write_aux
    (77) write_aux -> . CTESTRING
    (78) write_aux -> . CTESTRING COMMA write_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    CTESTRING       shift and go to state 123
    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 122
    write_aux                      shift and go to state 183
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 155

    (78) write_aux -> CTESTRING COMMA . write_aux
    (75) write_aux -> . exp
    (76) write_aux -> . exp COMMA write_aux
    (77) write_aux -> . CTESTRING
    (78) write_aux -> . CTESTRING COMMA write_aux
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    CTESTRING       shift and go to state 123
    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    write_aux                      shift and go to state 184
    exp                            shift and go to state 122
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 156

    (69) condition_aux -> LPAREN exp RPAREN . THEN LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> LPAREN exp RPAREN . THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    THEN            shift and go to state 185


state 157

    (79) while -> WHILE LPAREN exp RPAREN . DO LBRACE statutes_aux RBRACE

    DO              shift and go to state 186


state 158

    (80) for -> FROM LPAREN exp RPAREN . UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    UNTIL           shift and go to state 187


state 159

    (35) functions_aux -> VOID ID LPAREN params . RPAREN body

    RPAREN          shift and go to state 188


state 160

    (36) functions_aux -> VOID ID LPAREN RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 190

    body                           shift and go to state 189

state 161

    (39) params -> simple_type . ID
    (40) params -> simple_type . ID COMMA params

    ID              shift and go to state 191


state 162

    (37) functions_aux -> simple_type ID LPAREN RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 190

    body                           shift and go to state 192

state 163

    (38) functions_aux -> simple_type ID LPAREN params . RPAREN body

    RPAREN          shift and go to state 193


state 164

    (29) classes_aux -> LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)
    FUNCT           reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)


state 165

    (31) classes_aux -> INHERITS ID LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 29

    functions                      shift and go to state 194

state 166

    (32) classes_aux -> INHERITS ID LBRACE functions . RBRACE

    RBRACE          shift and go to state 195


state 167

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET

    CTEI            shift and go to state 196


state 168

    (93) factor -> LPAREN exp RPAREN .

    TIMES           reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    RELOP           reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    AND             reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    OR              reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 93 (factor -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 93 (factor -> LPAREN exp RPAREN .)


state 169

    (67) call_aux -> exp COMMA call_aux .

    RPAREN          reduce using rule 67 (call_aux -> exp COMMA call_aux .)


state 170

    (82) exp -> n_exp OR exp .

    COMMA           reduce using rule 82 (exp -> n_exp OR exp .)
    RPAREN          reduce using rule 82 (exp -> n_exp OR exp .)
    RBRACKET        reduce using rule 82 (exp -> n_exp OR exp .)
    SEMICOLON       reduce using rule 82 (exp -> n_exp OR exp .)


state 171

    (84) n_exp -> l_exp AND n_exp .

    OR              reduce using rule 84 (n_exp -> l_exp AND n_exp .)
    COMMA           reduce using rule 84 (n_exp -> l_exp AND n_exp .)
    RPAREN          reduce using rule 84 (n_exp -> l_exp AND n_exp .)
    RBRACKET        reduce using rule 84 (n_exp -> l_exp AND n_exp .)
    SEMICOLON       reduce using rule 84 (n_exp -> l_exp AND n_exp .)


state 172

    (86) l_exp -> a_exp RELOP a_exp .

    AND             reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)
    OR              reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)
    COMMA           reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)
    RPAREN          reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)
    RBRACKET        reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)
    SEMICOLON       reduce using rule 86 (l_exp -> a_exp RELOP a_exp .)


state 173

    (88) a_exp -> term PLUS a_exp .

    RELOP           reduce using rule 88 (a_exp -> term PLUS a_exp .)
    AND             reduce using rule 88 (a_exp -> term PLUS a_exp .)
    OR              reduce using rule 88 (a_exp -> term PLUS a_exp .)
    COMMA           reduce using rule 88 (a_exp -> term PLUS a_exp .)
    RPAREN          reduce using rule 88 (a_exp -> term PLUS a_exp .)
    RBRACKET        reduce using rule 88 (a_exp -> term PLUS a_exp .)
    SEMICOLON       reduce using rule 88 (a_exp -> term PLUS a_exp .)


state 174

    (89) a_exp -> term MINUS a_exp .

    RELOP           reduce using rule 89 (a_exp -> term MINUS a_exp .)
    AND             reduce using rule 89 (a_exp -> term MINUS a_exp .)
    OR              reduce using rule 89 (a_exp -> term MINUS a_exp .)
    COMMA           reduce using rule 89 (a_exp -> term MINUS a_exp .)
    RPAREN          reduce using rule 89 (a_exp -> term MINUS a_exp .)
    RBRACKET        reduce using rule 89 (a_exp -> term MINUS a_exp .)
    SEMICOLON       reduce using rule 89 (a_exp -> term MINUS a_exp .)


state 175

    (91) term -> factor TIMES term .

    PLUS            reduce using rule 91 (term -> factor TIMES term .)
    MINUS           reduce using rule 91 (term -> factor TIMES term .)
    RELOP           reduce using rule 91 (term -> factor TIMES term .)
    AND             reduce using rule 91 (term -> factor TIMES term .)
    OR              reduce using rule 91 (term -> factor TIMES term .)
    COMMA           reduce using rule 91 (term -> factor TIMES term .)
    RPAREN          reduce using rule 91 (term -> factor TIMES term .)
    RBRACKET        reduce using rule 91 (term -> factor TIMES term .)
    SEMICOLON       reduce using rule 91 (term -> factor TIMES term .)


state 176

    (92) term -> factor DIVIDE term .

    PLUS            reduce using rule 92 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 92 (term -> factor DIVIDE term .)
    RELOP           reduce using rule 92 (term -> factor DIVIDE term .)
    AND             reduce using rule 92 (term -> factor DIVIDE term .)
    OR              reduce using rule 92 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 92 (term -> factor DIVIDE term .)
    RPAREN          reduce using rule 92 (term -> factor DIVIDE term .)
    RBRACKET        reduce using rule 92 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 92 (term -> factor DIVIDE term .)


state 177

    (63) call -> ID POINT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    TIMES           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    PLUS            reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    MINUS           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RELOP           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    AND             reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    OR              reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    COMMA           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)


state 178

    (65) call -> ID POINT ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 197


state 179

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 198
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 180

    (73) read -> READ LPAREN var RPAREN SEMICOLON .

    ID              reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    READ            reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WRITE           reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    IF              reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FROM            reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (read -> READ LPAREN var RPAREN SEMICOLON .)


state 181

    (57) var_aux -> POINT ID .
    (58) var_aux -> POINT ID . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    RPAREN          reduce using rule 57 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 72

    var_aux_2                      shift and go to state 148

state 182

    (74) write -> WRITE LPAREN write_aux RPAREN SEMICOLON .

    ID              reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    READ            reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    WRITE           reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    IF              reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    FROM            reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    RBRACE          reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)


state 183

    (76) write_aux -> exp COMMA write_aux .

    RPAREN          reduce using rule 76 (write_aux -> exp COMMA write_aux .)


state 184

    (78) write_aux -> CTESTRING COMMA write_aux .

    RPAREN          reduce using rule 78 (write_aux -> CTESTRING COMMA write_aux .)


state 185

    (69) condition_aux -> LPAREN exp RPAREN THEN . LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> LPAREN exp RPAREN THEN . LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 199


state 186

    (79) while -> WHILE LPAREN exp RPAREN DO . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 200


state 187

    (80) for -> FROM LPAREN exp RPAREN UNTIL . LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 201


state 188

    (35) functions_aux -> VOID ID LPAREN params RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 190

    body                           shift and go to state 202

state 189

    (36) functions_aux -> VOID ID LPAREN RPAREN body .

    FUNCT           reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)
    MAIN            reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)
    RBRACE          reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)


state 190

    (41) body -> LBRACE . dec_vars statutes_aux RBRACE
    (42) body -> LBRACE . statutes_aux RBRACE
    (43) body -> LBRACE . statutes_aux RETURN ID RBRACE
    (44) body -> LBRACE . dec_vars statutes_aux RETURN ID RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    VAR             shift and go to state 9
    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    dec_vars                       shift and go to state 203
    statutes_aux                   shift and go to state 204
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 191

    (39) params -> simple_type ID .
    (40) params -> simple_type ID . COMMA params

    RPAREN          reduce using rule 39 (params -> simple_type ID .)
    COMMA           shift and go to state 205


state 192

    (37) functions_aux -> simple_type ID LPAREN RPAREN body .

    FUNCT           reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)
    MAIN            reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)
    RBRACE          reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)


state 193

    (38) functions_aux -> simple_type ID LPAREN params RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 190

    body                           shift and go to state 206

state 194

    (31) classes_aux -> INHERITS ID LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 207


state 195

    (32) classes_aux -> INHERITS ID LBRACE functions RBRACE .

    CLASS           reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)
    FUNCT           reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)
    MAIN            reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)


state 196

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET

    RBRACKET        shift and go to state 208


state 197

    (65) call -> ID POINT ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)


state 198

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 209


state 199

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE . statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE . statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 210
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 200

    (79) while -> WHILE LPAREN exp RPAREN DO LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 211
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 201

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN . exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) exp -> . n_exp
    (82) exp -> . n_exp OR exp
    (83) n_exp -> . l_exp
    (84) n_exp -> . l_exp AND n_exp
    (85) l_exp -> . a_exp
    (86) l_exp -> . a_exp RELOP a_exp
    (87) a_exp -> . term
    (88) a_exp -> . term PLUS a_exp
    (89) a_exp -> . term MINUS a_exp
    (90) term -> . factor
    (91) term -> . factor TIMES term
    (92) term -> . factor DIVIDE term
    (93) factor -> . LPAREN exp RPAREN
    (94) factor -> . var
    (95) factor -> . call
    (96) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (97) factor_aux -> . cte
    (98) factor_aux -> . PLUS cte
    (99) factor_aux -> . MINUS cte
    (100) cte -> . ID
    (101) cte -> . CTEI
    (102) cte -> . CTEF
    (103) cte -> . CTECHAR
    (104) cte -> . bool
    (105) bool -> . TRUE
    (106) bool -> . FALSE

    LPAREN          shift and go to state 95
    ID              shift and go to state 94
    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    CTEI            shift and go to state 110
    CTEF            shift and go to state 111
    CTECHAR         shift and go to state 112
    TRUE            shift and go to state 114
    FALSE           shift and go to state 115

    exp                            shift and go to state 212
    n_exp                          shift and go to state 99
    l_exp                          shift and go to state 100
    a_exp                          shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 105
    var                            shift and go to state 106
    call                           shift and go to state 107
    factor_aux                     shift and go to state 108
    cte                            shift and go to state 109
    bool                           shift and go to state 113

state 202

    (35) functions_aux -> VOID ID LPAREN params RPAREN body .

    FUNCT           reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)
    MAIN            reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)
    RBRACE          reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)


state 203

    (41) body -> LBRACE dec_vars . statutes_aux RBRACE
    (44) body -> LBRACE dec_vars . statutes_aux RETURN ID RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 213
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 204

    (42) body -> LBRACE statutes_aux . RBRACE
    (43) body -> LBRACE statutes_aux . RETURN ID RBRACE

    RBRACE          shift and go to state 214
    RETURN          shift and go to state 215


state 205

    (40) params -> simple_type ID COMMA . params
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    simple_type                    shift and go to state 161
    params                         shift and go to state 216

state 206

    (38) functions_aux -> simple_type ID LPAREN params RPAREN body .

    FUNCT           reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)
    MAIN            reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)
    RBRACE          reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)


state 207

    (31) classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)
    FUNCT           reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)


state 208

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 209

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    EQUAL           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 210

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux . RBRACE condition_aux_2
    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux . RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    RBRACE          shift and go to state 217


state 211

    (79) while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 218


state 212

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp . RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 219


state 213

    (41) body -> LBRACE dec_vars statutes_aux . RBRACE
    (44) body -> LBRACE dec_vars statutes_aux . RETURN ID RBRACE

    RBRACE          shift and go to state 220
    RETURN          shift and go to state 221


state 214

    (42) body -> LBRACE statutes_aux RBRACE .

    FUNCT           reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)
    MAIN            reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)


state 215

    (43) body -> LBRACE statutes_aux RETURN . ID RBRACE

    ID              shift and go to state 222


state 216

    (40) params -> simple_type ID COMMA params .

    RPAREN          reduce using rule 40 (params -> simple_type ID COMMA params .)


state 217

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE . condition_aux_2
    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE . condition_aux_2 ELSE LBRACE statutes_aux RBRACE
    (71) condition_aux_2 -> . ELIF condition_aux
    (72) condition_aux_2 -> . empty
    (109) empty -> .

    ELIF            shift and go to state 224
    ELSE            reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    WRITE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    condition_aux_2                shift and go to state 223
    empty                          shift and go to state 225

state 218

    (79) while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .

    ID              reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 79 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)


state 219

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN . DO LBRACE statutes_aux RBRACE

    DO              shift and go to state 226


state 220

    (41) body -> LBRACE dec_vars statutes_aux RBRACE .

    FUNCT           reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    MAIN            reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    RBRACE          reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)


state 221

    (44) body -> LBRACE dec_vars statutes_aux RETURN . ID RBRACE

    ID              shift and go to state 227


state 222

    (43) body -> LBRACE statutes_aux RETURN ID . RBRACE

    RBRACE          shift and go to state 228


state 223

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .
    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 . ELSE LBRACE statutes_aux RBRACE

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    READ            reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    WRITE           reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    IF              reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    WHILE           reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    FROM            reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    RBRACE          reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    RETURN          reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .)
    ELSE            shift and go to state 229

  ! ELSE            [ reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 .) ]


state 224

    (71) condition_aux_2 -> ELIF . condition_aux
    (69) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2
    (70) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 77

    condition_aux                  shift and go to state 230

state 225

    (72) condition_aux_2 -> empty .

    ELSE            reduce using rule 72 (condition_aux_2 -> empty .)
    ID              reduce using rule 72 (condition_aux_2 -> empty .)
    READ            reduce using rule 72 (condition_aux_2 -> empty .)
    WRITE           reduce using rule 72 (condition_aux_2 -> empty .)
    IF              reduce using rule 72 (condition_aux_2 -> empty .)
    WHILE           reduce using rule 72 (condition_aux_2 -> empty .)
    FROM            reduce using rule 72 (condition_aux_2 -> empty .)
    RBRACE          reduce using rule 72 (condition_aux_2 -> empty .)
    RETURN          reduce using rule 72 (condition_aux_2 -> empty .)


state 226

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 231


state 227

    (44) body -> LBRACE dec_vars statutes_aux RETURN ID . RBRACE

    RBRACE          shift and go to state 232


state 228

    (43) body -> LBRACE statutes_aux RETURN ID RBRACE .

    FUNCT           reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)
    MAIN            reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)
    RBRACE          reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)


state 229

    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 233


state 230

    (71) condition_aux_2 -> ELIF condition_aux .

    ELSE            reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    ID              reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    READ            reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    WRITE           reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    IF              reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    WHILE           reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    FROM            reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    RBRACE          reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)
    RETURN          reduce using rule 71 (condition_aux_2 -> ELIF condition_aux .)


state 231

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 234
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 232

    (44) body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .

    FUNCT           reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)
    MAIN            reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)
    RBRACE          reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)


state 233

    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . call SEMICOLON
    (46) statutes -> . assignation
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (54) assignation -> . var EQUAL exp SEMICOLON
    (73) read -> . READ LPAREN var RPAREN SEMICOLON
    (74) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (79) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (80) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 45
    READ            shift and go to state 47
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    FROM            shift and go to state 51

    statutes_aux                   shift and go to state 235
    statutes                       shift and go to state 37
    call                           shift and go to state 38
    assignation                    shift and go to state 39
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44
    var                            shift and go to state 46

state 234

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 236


state 235

    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 237


state 236

    (80) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .

    ID              reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 80 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)


state 237

    (70) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .

    ID              reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)
    ELSE            reduce using rule 70 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_2 ELSE LBRACE statutes_aux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 223 resolved as shift
WARNING: reduce/reduce conflict in state 94 resolved using rule (var -> ID)
WARNING: rejected rule (cte -> ID) in state 94
