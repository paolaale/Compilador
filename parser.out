Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID TWOPOINTS program_body main END
Rule 2     program_body -> program_body_vars program_body_class program_body_funct
Rule 3     program_body_vars -> dec_vars
Rule 4     program_body_vars -> empty
Rule 5     program_body_class -> classes
Rule 6     program_body_class -> empty
Rule 7     program_body_funct -> functions
Rule 8     program_body_funct -> empty
Rule 9     dec_vars -> VAR dec_vars_aux
Rule 10    dec_vars_aux -> simple_type vars_simple_type SEMICOLON
Rule 11    dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux
Rule 12    dec_vars_aux -> complex_type vars_complex_type SEMICOLON
Rule 13    dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux
Rule 14    vars_complex_type -> ID
Rule 15    vars_complex_type -> ID COMMA vars_complex_type
Rule 16    vars_simple_type -> ID
Rule 17    vars_simple_type -> ID COMMA vars_simple_type
Rule 18    vars_simple_type -> ID vars_simple_type_aux
Rule 19    vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type
Rule 20    vars_simple_type_aux -> LBRACKET CTEI RBRACKET
Rule 21    vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 22    simple_type -> INT
Rule 23    simple_type -> FLOAT
Rule 24    simple_type -> CHAR
Rule 25    simple_type -> BOOL
Rule 26    complex_type -> ID
Rule 27    classes -> CLASS ID classes_aux
Rule 28    classes -> CLASS ID classes_aux classes
Rule 29    classes_aux -> LBRACE dec_vars functions RBRACE
Rule 30    classes_aux -> LBRACE functions RBRACE
Rule 31    classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE
Rule 32    classes_aux -> INHERITS ID LBRACE functions RBRACE
Rule 33    functions -> FUNCT functions_aux
Rule 34    functions -> FUNCT functions_aux functions
Rule 35    functions_aux -> VOID ID LPAREN params RPAREN body
Rule 36    functions_aux -> VOID ID LPAREN RPAREN body
Rule 37    functions_aux -> simple_type ID LPAREN RPAREN body
Rule 38    functions_aux -> simple_type ID LPAREN params RPAREN body
Rule 39    params -> simple_type ID
Rule 40    params -> simple_type ID COMMA params
Rule 41    body -> LBRACE dec_vars statutes_aux RBRACE
Rule 42    body -> LBRACE statutes_aux RBRACE
Rule 43    body -> LBRACE statutes_aux RETURN ID RBRACE
Rule 44    body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE
Rule 45    statutes -> ASSIGN assignation
Rule 46    statutes -> CALL call SEMICOLON
Rule 47    statutes -> read
Rule 48    statutes -> write
Rule 49    statutes -> condition
Rule 50    statutes -> while
Rule 51    statutes -> for
Rule 52    statutes_aux -> statutes
Rule 53    statutes_aux -> statutes statutes_aux
Rule 54    assignation -> var EQUAL exp SEMICOLON
Rule 55    var -> ID
Rule 56    var -> ID var_aux
Rule 57    var_aux -> POINT ID
Rule 58    var_aux -> POINT ID var_aux_2
Rule 59    var_aux -> var_aux_2
Rule 60    var_aux_2 -> LBRACKET exp RBRACKET
Rule 61    var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 62    call -> ID LPAREN RPAREN
Rule 63    call -> ID POINT ID LPAREN RPAREN
Rule 64    call -> ID LPAREN call_aux RPAREN
Rule 65    call -> ID POINT ID LPAREN call_aux RPAREN
Rule 66    call_aux -> exp
Rule 67    call_aux -> exp COMMA call_aux
Rule 68    condition -> IF condition_aux
Rule 69    condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3
Rule 70    condition_aux -> condition_aux_2
Rule 71    condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux
Rule 72    condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE
Rule 73    condition_aux_3 -> empty
Rule 74    read -> READ LPAREN var RPAREN SEMICOLON
Rule 75    write -> WRITE LPAREN write_aux RPAREN SEMICOLON
Rule 76    write_aux -> exp
Rule 77    write_aux -> exp COMMA write_aux
Rule 78    write_aux -> CTESTRING
Rule 79    write_aux -> CTESTRING COMMA write_aux
Rule 80    while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
Rule 81    for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
Rule 82    exp -> n_exp
Rule 83    exp -> n_exp OR exp
Rule 84    n_exp -> l_exp
Rule 85    n_exp -> l_exp AND n_exp
Rule 86    l_exp -> a_exp
Rule 87    l_exp -> a_exp RELOP a_exp
Rule 88    a_exp -> term
Rule 89    a_exp -> term PLUS a_exp
Rule 90    a_exp -> term MINUS a_exp
Rule 91    term -> factor
Rule 92    term -> factor TIMES term
Rule 93    term -> factor DIVIDE term
Rule 94    factor -> LPAREN exp RPAREN
Rule 95    factor -> var
Rule 96    factor -> call
Rule 97    factor -> factor_aux
Rule 98    factor_aux -> cte
Rule 99    factor_aux -> PLUS cte
Rule 100   factor_aux -> MINUS cte
Rule 101   cte -> ID
Rule 102   cte -> CTEI
Rule 103   cte -> CTEF
Rule 104   cte -> CTECHAR
Rule 105   cte -> bool
Rule 106   bool -> TRUE
Rule 107   bool -> FALSE
Rule 108   main -> MAIN LBRACE statutes_aux RBRACE
Rule 109   main -> MAIN LBRACE dec_vars statutes_aux RBRACE
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 85
ASSIGN               : 45
BOOL                 : 25
CALL                 : 46
CHAR                 : 24
CLASS                : 27 28
COMMA                : 15 17 19 40 67 77 79
CTECHAR              : 104
CTEF                 : 103
CTEI                 : 20 21 21 102
CTESTRING            : 78 79
DIVIDE               : 93
DO                   : 80 81
ELIF                 : 71
ELSE                 : 72
END                  : 1
EQUAL                : 54
FALSE                : 107
FLOAT                : 23
FROM                 : 81
FUNCT                : 33 34
ID                   : 1 14 15 16 17 18 19 26 27 28 31 32 35 36 37 38 39 40 43 44 55 56 57 58 62 63 63 64 65 65 101
IF                   : 68
INHERITS             : 31 32
INT                  : 22
LBRACE               : 29 30 31 32 41 42 43 44 69 71 72 80 81 108 109
LBRACKET             : 20 21 21 60 61 61
LPAREN               : 35 36 37 38 62 63 64 65 69 71 74 75 80 81 81 94
MAIN                 : 108 109
MINUS                : 90 100
OR                   : 83
PLUS                 : 89 99
POINT                : 57 58 63 65
PROGRAM              : 1
RBRACE               : 29 30 31 32 41 42 43 44 69 71 72 80 81 108 109
RBRACKET             : 20 21 21 60 61 61
READ                 : 74
RELOP                : 87
RETURN               : 43 44
RPAREN               : 35 36 37 38 62 63 64 65 69 71 74 75 80 81 81 94
SEMICOLON            : 10 11 12 13 46 54 74 75
THEN                 : 69 71
TIMES                : 92
TRUE                 : 106
TWOPOINTS            : 1
UNTIL                : 81
VAR                  : 9
VOID                 : 35 36
WHILE                : 80
WRITE                : 75
error                : 

Nonterminals, with rules where they appear

a_exp                : 86 87 87 89 90
assignation          : 45
body                 : 35 36 37 38
bool                 : 105
call                 : 46 96
call_aux             : 64 65 67
classes              : 5 28
classes_aux          : 27 28
complex_type         : 12 13
condition            : 49
condition_aux        : 68 71
condition_aux_2      : 70
condition_aux_3      : 69
cte                  : 98 99 100
dec_vars             : 3 29 31 41 44 109
dec_vars_aux         : 9 11 13
empty                : 4 6 8 73
exp                  : 54 60 61 61 66 67 69 71 76 77 80 81 81 83 94
factor               : 91 92 93
factor_aux           : 97
for                  : 51
functions            : 7 29 30 31 32 34
functions_aux        : 33 34
l_exp                : 84 85
main                 : 1
n_exp                : 82 83 85
params               : 35 38 40
program              : 0
program_body         : 1
program_body_class   : 2
program_body_funct   : 2
program_body_vars    : 2
read                 : 47
simple_type          : 10 11 37 38 39 40
statutes             : 52 53
statutes_aux         : 41 42 43 44 53 69 71 72 80 81 108 109
term                 : 88 89 90 92 93
var                  : 54 74 95
var_aux              : 56
var_aux_2            : 58 59
vars_complex_type    : 12 13 15
vars_simple_type     : 10 11 17 19
vars_simple_type_aux : 18 19
while                : 50
write                : 48
write_aux            : 75 77 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID TWOPOINTS program_body main END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID TWOPOINTS program_body main END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . TWOPOINTS program_body main END

    TWOPOINTS       shift and go to state 4


state 4

    (1) program -> PROGRAM ID TWOPOINTS . program_body main END
    (2) program_body -> . program_body_vars program_body_class program_body_funct
    (3) program_body_vars -> . dec_vars
    (4) program_body_vars -> . empty
    (9) dec_vars -> . VAR dec_vars_aux
    (110) empty -> .

    VAR             shift and go to state 9
    CLASS           reduce using rule 110 (empty -> .)
    FUNCT           reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    program_body                   shift and go to state 5
    program_body_vars              shift and go to state 6
    dec_vars                       shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID TWOPOINTS program_body . main END
    (108) main -> . MAIN LBRACE statutes_aux RBRACE
    (109) main -> . MAIN LBRACE dec_vars statutes_aux RBRACE

    MAIN            shift and go to state 11

    main                           shift and go to state 10

state 6

    (2) program_body -> program_body_vars . program_body_class program_body_funct
    (5) program_body_class -> . classes
    (6) program_body_class -> . empty
    (27) classes -> . CLASS ID classes_aux
    (28) classes -> . CLASS ID classes_aux classes
    (110) empty -> .

    CLASS           shift and go to state 15
    FUNCT           reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    program_body_class             shift and go to state 12
    classes                        shift and go to state 13
    empty                          shift and go to state 14

state 7

    (3) program_body_vars -> dec_vars .

    CLASS           reduce using rule 3 (program_body_vars -> dec_vars .)
    FUNCT           reduce using rule 3 (program_body_vars -> dec_vars .)
    MAIN            reduce using rule 3 (program_body_vars -> dec_vars .)


state 8

    (4) program_body_vars -> empty .

    CLASS           reduce using rule 4 (program_body_vars -> empty .)
    FUNCT           reduce using rule 4 (program_body_vars -> empty .)
    MAIN            reduce using rule 4 (program_body_vars -> empty .)


state 9

    (9) dec_vars -> VAR . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

    dec_vars_aux                   shift and go to state 16
    simple_type                    shift and go to state 17
    complex_type                   shift and go to state 18

state 10

    (1) program -> PROGRAM ID TWOPOINTS program_body main . END

    END             shift and go to state 24


state 11

    (108) main -> MAIN . LBRACE statutes_aux RBRACE
    (109) main -> MAIN . LBRACE dec_vars statutes_aux RBRACE

    LBRACE          shift and go to state 25


state 12

    (2) program_body -> program_body_vars program_body_class . program_body_funct
    (7) program_body_funct -> . functions
    (8) program_body_funct -> . empty
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions
    (110) empty -> .

    FUNCT           shift and go to state 29
    MAIN            reduce using rule 110 (empty -> .)

    program_body_funct             shift and go to state 26
    functions                      shift and go to state 27
    empty                          shift and go to state 28

state 13

    (5) program_body_class -> classes .

    FUNCT           reduce using rule 5 (program_body_class -> classes .)
    MAIN            reduce using rule 5 (program_body_class -> classes .)


state 14

    (6) program_body_class -> empty .

    FUNCT           reduce using rule 6 (program_body_class -> empty .)
    MAIN            reduce using rule 6 (program_body_class -> empty .)


state 15

    (27) classes -> CLASS . ID classes_aux
    (28) classes -> CLASS . ID classes_aux classes

    ID              shift and go to state 30


state 16

    (9) dec_vars -> VAR dec_vars_aux .

    CLASS           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FUNCT           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    MAIN            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    ASSIGN          reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    CALL            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    READ            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WRITE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    IF              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WHILE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FROM            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)


state 17

    (10) dec_vars_aux -> simple_type . vars_simple_type SEMICOLON
    (11) dec_vars_aux -> simple_type . vars_simple_type SEMICOLON dec_vars_aux
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 31

state 18

    (12) dec_vars_aux -> complex_type . vars_complex_type SEMICOLON
    (13) dec_vars_aux -> complex_type . vars_complex_type SEMICOLON dec_vars_aux
    (14) vars_complex_type -> . ID
    (15) vars_complex_type -> . ID COMMA vars_complex_type

    ID              shift and go to state 34

    vars_complex_type              shift and go to state 33

state 19

    (22) simple_type -> INT .

    ID              reduce using rule 22 (simple_type -> INT .)


state 20

    (23) simple_type -> FLOAT .

    ID              reduce using rule 23 (simple_type -> FLOAT .)


state 21

    (24) simple_type -> CHAR .

    ID              reduce using rule 24 (simple_type -> CHAR .)


state 22

    (25) simple_type -> BOOL .

    ID              reduce using rule 25 (simple_type -> BOOL .)


state 23

    (26) complex_type -> ID .

    ID              reduce using rule 26 (complex_type -> ID .)


state 24

    (1) program -> PROGRAM ID TWOPOINTS program_body main END .

    $end            reduce using rule 1 (program -> PROGRAM ID TWOPOINTS program_body main END .)


state 25

    (108) main -> MAIN LBRACE . statutes_aux RBRACE
    (109) main -> MAIN LBRACE . dec_vars statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (9) dec_vars -> . VAR dec_vars_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    VAR             shift and go to state 9
    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 35
    dec_vars                       shift and go to state 36
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 26

    (2) program_body -> program_body_vars program_body_class program_body_funct .

    MAIN            reduce using rule 2 (program_body -> program_body_vars program_body_class program_body_funct .)


state 27

    (7) program_body_funct -> functions .

    MAIN            reduce using rule 7 (program_body_funct -> functions .)


state 28

    (8) program_body_funct -> empty .

    MAIN            reduce using rule 8 (program_body_funct -> empty .)


state 29

    (33) functions -> FUNCT . functions_aux
    (34) functions -> FUNCT . functions_aux functions
    (35) functions_aux -> . VOID ID LPAREN params RPAREN body
    (36) functions_aux -> . VOID ID LPAREN RPAREN body
    (37) functions_aux -> . simple_type ID LPAREN RPAREN body
    (38) functions_aux -> . simple_type ID LPAREN params RPAREN body
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    VOID            shift and go to state 51
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    functions_aux                  shift and go to state 50
    simple_type                    shift and go to state 52

state 30

    (27) classes -> CLASS ID . classes_aux
    (28) classes -> CLASS ID . classes_aux classes
    (29) classes_aux -> . LBRACE dec_vars functions RBRACE
    (30) classes_aux -> . LBRACE functions RBRACE
    (31) classes_aux -> . INHERITS ID LBRACE dec_vars functions RBRACE
    (32) classes_aux -> . INHERITS ID LBRACE functions RBRACE

    LBRACE          shift and go to state 54
    INHERITS        shift and go to state 55

    classes_aux                    shift and go to state 53

state 31

    (10) dec_vars_aux -> simple_type vars_simple_type . SEMICOLON
    (11) dec_vars_aux -> simple_type vars_simple_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 56


state 32

    (16) vars_simple_type -> ID .
    (17) vars_simple_type -> ID . COMMA vars_simple_type
    (18) vars_simple_type -> ID . vars_simple_type_aux
    (19) vars_simple_type -> ID . vars_simple_type_aux COMMA vars_simple_type
    (20) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET
    (21) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET

    SEMICOLON       reduce using rule 16 (vars_simple_type -> ID .)
    COMMA           shift and go to state 57
    LBRACKET        shift and go to state 59

    vars_simple_type_aux           shift and go to state 58

state 33

    (12) dec_vars_aux -> complex_type vars_complex_type . SEMICOLON
    (13) dec_vars_aux -> complex_type vars_complex_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 60


state 34

    (14) vars_complex_type -> ID .
    (15) vars_complex_type -> ID . COMMA vars_complex_type

    SEMICOLON       reduce using rule 14 (vars_complex_type -> ID .)
    COMMA           shift and go to state 61


state 35

    (108) main -> MAIN LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 62


state 36

    (109) main -> MAIN LBRACE dec_vars . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 63
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 37

    (52) statutes_aux -> statutes .
    (53) statutes_aux -> statutes . statutes_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    RBRACE          reduce using rule 52 (statutes_aux -> statutes .)
    RETURN          reduce using rule 52 (statutes_aux -> statutes .)
    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes                       shift and go to state 37
    statutes_aux                   shift and go to state 64
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 38

    (45) statutes -> ASSIGN . assignation
    (54) assignation -> . var EQUAL exp SEMICOLON
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 67

    assignation                    shift and go to state 65
    var                            shift and go to state 66

state 39

    (46) statutes -> CALL . call SEMICOLON
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN

    ID              shift and go to state 69

    call                           shift and go to state 68

state 40

    (47) statutes -> read .

    ASSIGN          reduce using rule 47 (statutes -> read .)
    CALL            reduce using rule 47 (statutes -> read .)
    READ            reduce using rule 47 (statutes -> read .)
    WRITE           reduce using rule 47 (statutes -> read .)
    IF              reduce using rule 47 (statutes -> read .)
    WHILE           reduce using rule 47 (statutes -> read .)
    FROM            reduce using rule 47 (statutes -> read .)
    RBRACE          reduce using rule 47 (statutes -> read .)
    RETURN          reduce using rule 47 (statutes -> read .)


state 41

    (48) statutes -> write .

    ASSIGN          reduce using rule 48 (statutes -> write .)
    CALL            reduce using rule 48 (statutes -> write .)
    READ            reduce using rule 48 (statutes -> write .)
    WRITE           reduce using rule 48 (statutes -> write .)
    IF              reduce using rule 48 (statutes -> write .)
    WHILE           reduce using rule 48 (statutes -> write .)
    FROM            reduce using rule 48 (statutes -> write .)
    RBRACE          reduce using rule 48 (statutes -> write .)
    RETURN          reduce using rule 48 (statutes -> write .)


state 42

    (49) statutes -> condition .

    ASSIGN          reduce using rule 49 (statutes -> condition .)
    CALL            reduce using rule 49 (statutes -> condition .)
    READ            reduce using rule 49 (statutes -> condition .)
    WRITE           reduce using rule 49 (statutes -> condition .)
    IF              reduce using rule 49 (statutes -> condition .)
    WHILE           reduce using rule 49 (statutes -> condition .)
    FROM            reduce using rule 49 (statutes -> condition .)
    RBRACE          reduce using rule 49 (statutes -> condition .)
    RETURN          reduce using rule 49 (statutes -> condition .)


state 43

    (50) statutes -> while .

    ASSIGN          reduce using rule 50 (statutes -> while .)
    CALL            reduce using rule 50 (statutes -> while .)
    READ            reduce using rule 50 (statutes -> while .)
    WRITE           reduce using rule 50 (statutes -> while .)
    IF              reduce using rule 50 (statutes -> while .)
    WHILE           reduce using rule 50 (statutes -> while .)
    FROM            reduce using rule 50 (statutes -> while .)
    RBRACE          reduce using rule 50 (statutes -> while .)
    RETURN          reduce using rule 50 (statutes -> while .)


state 44

    (51) statutes -> for .

    ASSIGN          reduce using rule 51 (statutes -> for .)
    CALL            reduce using rule 51 (statutes -> for .)
    READ            reduce using rule 51 (statutes -> for .)
    WRITE           reduce using rule 51 (statutes -> for .)
    IF              reduce using rule 51 (statutes -> for .)
    WHILE           reduce using rule 51 (statutes -> for .)
    FROM            reduce using rule 51 (statutes -> for .)
    RBRACE          reduce using rule 51 (statutes -> for .)
    RETURN          reduce using rule 51 (statutes -> for .)


state 45

    (74) read -> READ . LPAREN var RPAREN SEMICOLON

    LPAREN          shift and go to state 70


state 46

    (75) write -> WRITE . LPAREN write_aux RPAREN SEMICOLON

    LPAREN          shift and go to state 71


state 47

    (68) condition -> IF . condition_aux
    (69) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3
    (70) condition_aux -> . condition_aux_2
    (71) condition_aux_2 -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux

    LPAREN          shift and go to state 73

    condition_aux                  shift and go to state 72
    condition_aux_2                shift and go to state 74

state 48

    (80) while -> WHILE . LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 75


state 49

    (81) for -> FROM . LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 76


state 50

    (33) functions -> FUNCT functions_aux .
    (34) functions -> FUNCT functions_aux . functions
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    MAIN            reduce using rule 33 (functions -> FUNCT functions_aux .)
    RBRACE          reduce using rule 33 (functions -> FUNCT functions_aux .)
    FUNCT           shift and go to state 29

    functions                      shift and go to state 77

state 51

    (35) functions_aux -> VOID . ID LPAREN params RPAREN body
    (36) functions_aux -> VOID . ID LPAREN RPAREN body

    ID              shift and go to state 78


state 52

    (37) functions_aux -> simple_type . ID LPAREN RPAREN body
    (38) functions_aux -> simple_type . ID LPAREN params RPAREN body

    ID              shift and go to state 79


state 53

    (27) classes -> CLASS ID classes_aux .
    (28) classes -> CLASS ID classes_aux . classes
    (27) classes -> . CLASS ID classes_aux
    (28) classes -> . CLASS ID classes_aux classes

    FUNCT           reduce using rule 27 (classes -> CLASS ID classes_aux .)
    MAIN            reduce using rule 27 (classes -> CLASS ID classes_aux .)
    CLASS           shift and go to state 15

    classes                        shift and go to state 80

state 54

    (29) classes_aux -> LBRACE . dec_vars functions RBRACE
    (30) classes_aux -> LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 9
    FUNCT           shift and go to state 29

    dec_vars                       shift and go to state 81
    functions                      shift and go to state 82

state 55

    (31) classes_aux -> INHERITS . ID LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS . ID LBRACE functions RBRACE

    ID              shift and go to state 83


state 56

    (10) dec_vars_aux -> simple_type vars_simple_type SEMICOLON .
    (11) dec_vars_aux -> simple_type vars_simple_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

    CLASS           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    FUNCT           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    MAIN            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    ASSIGN          reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    CALL            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    READ            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    WRITE           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    IF              reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    WHILE           reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    FROM            reduce using rule 10 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

    simple_type                    shift and go to state 17
    dec_vars_aux                   shift and go to state 84
    complex_type                   shift and go to state 18

state 57

    (17) vars_simple_type -> ID COMMA . vars_simple_type
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 85

state 58

    (18) vars_simple_type -> ID vars_simple_type_aux .
    (19) vars_simple_type -> ID vars_simple_type_aux . COMMA vars_simple_type

    SEMICOLON       reduce using rule 18 (vars_simple_type -> ID vars_simple_type_aux .)
    COMMA           shift and go to state 86


state 59

    (20) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET
    (21) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET

    CTEI            shift and go to state 87


state 60

    (12) dec_vars_aux -> complex_type vars_complex_type SEMICOLON .
    (13) dec_vars_aux -> complex_type vars_complex_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON
    (11) dec_vars_aux -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (12) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON
    (13) dec_vars_aux -> . complex_type vars_complex_type SEMICOLON dec_vars_aux
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL
    (26) complex_type -> . ID

    CLASS           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    FUNCT           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    MAIN            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    ASSIGN          reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    CALL            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    READ            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    WRITE           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    IF              reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    WHILE           reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    FROM            reduce using rule 12 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22
    ID              shift and go to state 23

    complex_type                   shift and go to state 18
    dec_vars_aux                   shift and go to state 88
    simple_type                    shift and go to state 17

state 61

    (15) vars_complex_type -> ID COMMA . vars_complex_type
    (14) vars_complex_type -> . ID
    (15) vars_complex_type -> . ID COMMA vars_complex_type

    ID              shift and go to state 34

    vars_complex_type              shift and go to state 89

state 62

    (108) main -> MAIN LBRACE statutes_aux RBRACE .

    END             reduce using rule 108 (main -> MAIN LBRACE statutes_aux RBRACE .)


state 63

    (109) main -> MAIN LBRACE dec_vars statutes_aux . RBRACE

    RBRACE          shift and go to state 90


state 64

    (53) statutes_aux -> statutes statutes_aux .

    RBRACE          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)
    RETURN          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)


state 65

    (45) statutes -> ASSIGN assignation .

    ASSIGN          reduce using rule 45 (statutes -> ASSIGN assignation .)
    CALL            reduce using rule 45 (statutes -> ASSIGN assignation .)
    READ            reduce using rule 45 (statutes -> ASSIGN assignation .)
    WRITE           reduce using rule 45 (statutes -> ASSIGN assignation .)
    IF              reduce using rule 45 (statutes -> ASSIGN assignation .)
    WHILE           reduce using rule 45 (statutes -> ASSIGN assignation .)
    FROM            reduce using rule 45 (statutes -> ASSIGN assignation .)
    RBRACE          reduce using rule 45 (statutes -> ASSIGN assignation .)
    RETURN          reduce using rule 45 (statutes -> ASSIGN assignation .)


state 66

    (54) assignation -> var . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 91


state 67

    (55) var -> ID .
    (56) var -> ID . var_aux
    (57) var_aux -> . POINT ID
    (58) var_aux -> . POINT ID var_aux_2
    (59) var_aux -> . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    EQUAL           reduce using rule 55 (var -> ID .)
    RPAREN          reduce using rule 55 (var -> ID .)
    POINT           shift and go to state 93
    LBRACKET        shift and go to state 95

    var_aux                        shift and go to state 92
    var_aux_2                      shift and go to state 94

state 68

    (46) statutes -> CALL call . SEMICOLON

    SEMICOLON       shift and go to state 96


state 69

    (62) call -> ID . LPAREN RPAREN
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . LPAREN call_aux RPAREN
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN

    LPAREN          shift and go to state 97
    POINT           shift and go to state 98


state 70

    (74) read -> READ LPAREN . var RPAREN SEMICOLON
    (55) var -> . ID
    (56) var -> . ID var_aux

    ID              shift and go to state 67

    var                            shift and go to state 99

state 71

    (75) write -> WRITE LPAREN . write_aux RPAREN SEMICOLON
    (76) write_aux -> . exp
    (77) write_aux -> . exp COMMA write_aux
    (78) write_aux -> . CTESTRING
    (79) write_aux -> . CTESTRING COMMA write_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    CTESTRING       shift and go to state 103
    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    write_aux                      shift and go to state 101
    exp                            shift and go to state 102
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 72

    (68) condition -> IF condition_aux .

    ASSIGN          reduce using rule 68 (condition -> IF condition_aux .)
    CALL            reduce using rule 68 (condition -> IF condition_aux .)
    READ            reduce using rule 68 (condition -> IF condition_aux .)
    WRITE           reduce using rule 68 (condition -> IF condition_aux .)
    IF              reduce using rule 68 (condition -> IF condition_aux .)
    WHILE           reduce using rule 68 (condition -> IF condition_aux .)
    FROM            reduce using rule 68 (condition -> IF condition_aux .)
    RBRACE          reduce using rule 68 (condition -> IF condition_aux .)
    RETURN          reduce using rule 68 (condition -> IF condition_aux .)


state 73

    (69) condition_aux -> LPAREN . exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN . exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 122
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 74

    (70) condition_aux -> condition_aux_2 .

    ASSIGN          reduce using rule 70 (condition_aux -> condition_aux_2 .)
    CALL            reduce using rule 70 (condition_aux -> condition_aux_2 .)
    READ            reduce using rule 70 (condition_aux -> condition_aux_2 .)
    WRITE           reduce using rule 70 (condition_aux -> condition_aux_2 .)
    IF              reduce using rule 70 (condition_aux -> condition_aux_2 .)
    WHILE           reduce using rule 70 (condition_aux -> condition_aux_2 .)
    FROM            reduce using rule 70 (condition_aux -> condition_aux_2 .)
    RBRACE          reduce using rule 70 (condition_aux -> condition_aux_2 .)
    RETURN          reduce using rule 70 (condition_aux -> condition_aux_2 .)


state 75

    (80) while -> WHILE LPAREN . exp RPAREN DO LBRACE statutes_aux RBRACE
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 123
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 76

    (81) for -> FROM LPAREN . exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 124
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 77

    (34) functions -> FUNCT functions_aux functions .

    MAIN            reduce using rule 34 (functions -> FUNCT functions_aux functions .)
    RBRACE          reduce using rule 34 (functions -> FUNCT functions_aux functions .)


state 78

    (35) functions_aux -> VOID ID . LPAREN params RPAREN body
    (36) functions_aux -> VOID ID . LPAREN RPAREN body

    LPAREN          shift and go to state 125


state 79

    (37) functions_aux -> simple_type ID . LPAREN RPAREN body
    (38) functions_aux -> simple_type ID . LPAREN params RPAREN body

    LPAREN          shift and go to state 126


state 80

    (28) classes -> CLASS ID classes_aux classes .

    FUNCT           reduce using rule 28 (classes -> CLASS ID classes_aux classes .)
    MAIN            reduce using rule 28 (classes -> CLASS ID classes_aux classes .)


state 81

    (29) classes_aux -> LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 29

    functions                      shift and go to state 127

state 82

    (30) classes_aux -> LBRACE functions . RBRACE

    RBRACE          shift and go to state 128


state 83

    (31) classes_aux -> INHERITS ID . LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS ID . LBRACE functions RBRACE

    LBRACE          shift and go to state 129


state 84

    (11) dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .

    CLASS           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FUNCT           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    MAIN            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    ASSIGN          reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 11 (dec_vars_aux -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)


state 85

    (17) vars_simple_type -> ID COMMA vars_simple_type .

    SEMICOLON       reduce using rule 17 (vars_simple_type -> ID COMMA vars_simple_type .)


state 86

    (19) vars_simple_type -> ID vars_simple_type_aux COMMA . vars_simple_type
    (16) vars_simple_type -> . ID
    (17) vars_simple_type -> . ID COMMA vars_simple_type
    (18) vars_simple_type -> . ID vars_simple_type_aux
    (19) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 32

    vars_simple_type               shift and go to state 130

state 87

    (20) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET
    (21) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 131


state 88

    (13) dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .

    CLASS           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    FUNCT           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    MAIN            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    ASSIGN          reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 13 (dec_vars_aux -> complex_type vars_complex_type SEMICOLON dec_vars_aux .)


state 89

    (15) vars_complex_type -> ID COMMA vars_complex_type .

    SEMICOLON       reduce using rule 15 (vars_complex_type -> ID COMMA vars_complex_type .)


state 90

    (109) main -> MAIN LBRACE dec_vars statutes_aux RBRACE .

    END             reduce using rule 109 (main -> MAIN LBRACE dec_vars statutes_aux RBRACE .)


state 91

    (54) assignation -> var EQUAL . exp SEMICOLON
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    var                            shift and go to state 111
    exp                            shift and go to state 132
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 92

    (56) var -> ID var_aux .

    EQUAL           reduce using rule 56 (var -> ID var_aux .)
    RPAREN          reduce using rule 56 (var -> ID var_aux .)
    TIMES           reduce using rule 56 (var -> ID var_aux .)
    DIVIDE          reduce using rule 56 (var -> ID var_aux .)
    PLUS            reduce using rule 56 (var -> ID var_aux .)
    MINUS           reduce using rule 56 (var -> ID var_aux .)
    RELOP           reduce using rule 56 (var -> ID var_aux .)
    AND             reduce using rule 56 (var -> ID var_aux .)
    OR              reduce using rule 56 (var -> ID var_aux .)
    COMMA           reduce using rule 56 (var -> ID var_aux .)
    SEMICOLON       reduce using rule 56 (var -> ID var_aux .)
    RBRACKET        reduce using rule 56 (var -> ID var_aux .)


state 93

    (57) var_aux -> POINT . ID
    (58) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 133


state 94

    (59) var_aux -> var_aux_2 .

    EQUAL           reduce using rule 59 (var_aux -> var_aux_2 .)
    RPAREN          reduce using rule 59 (var_aux -> var_aux_2 .)
    TIMES           reduce using rule 59 (var_aux -> var_aux_2 .)
    DIVIDE          reduce using rule 59 (var_aux -> var_aux_2 .)
    PLUS            reduce using rule 59 (var_aux -> var_aux_2 .)
    MINUS           reduce using rule 59 (var_aux -> var_aux_2 .)
    RELOP           reduce using rule 59 (var_aux -> var_aux_2 .)
    AND             reduce using rule 59 (var_aux -> var_aux_2 .)
    OR              reduce using rule 59 (var_aux -> var_aux_2 .)
    COMMA           reduce using rule 59 (var_aux -> var_aux_2 .)
    SEMICOLON       reduce using rule 59 (var_aux -> var_aux_2 .)
    RBRACKET        reduce using rule 59 (var_aux -> var_aux_2 .)


state 95

    (60) var_aux_2 -> LBRACKET . exp RBRACKET
    (61) var_aux_2 -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 134
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 96

    (46) statutes -> CALL call SEMICOLON .

    ASSIGN          reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    CALL            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    READ            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    WRITE           reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    IF              reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    WHILE           reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    FROM            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    RBRACE          reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    RETURN          reduce using rule 46 (statutes -> CALL call SEMICOLON .)


state 97

    (62) call -> ID LPAREN . RPAREN
    (64) call -> ID LPAREN . call_aux RPAREN
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    RPAREN          shift and go to state 135
    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    call_aux                       shift and go to state 136
    exp                            shift and go to state 137
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 98

    (63) call -> ID POINT . ID LPAREN RPAREN
    (65) call -> ID POINT . ID LPAREN call_aux RPAREN

    ID              shift and go to state 138


state 99

    (74) read -> READ LPAREN var . RPAREN SEMICOLON

    RPAREN          shift and go to state 139


state 100

    (94) factor -> LPAREN . exp RPAREN
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 140
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 101

    (75) write -> WRITE LPAREN write_aux . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 102

    (76) write_aux -> exp .
    (77) write_aux -> exp . COMMA write_aux

    RPAREN          reduce using rule 76 (write_aux -> exp .)
    COMMA           shift and go to state 142


state 103

    (78) write_aux -> CTESTRING .
    (79) write_aux -> CTESTRING . COMMA write_aux

    RPAREN          reduce using rule 78 (write_aux -> CTESTRING .)
    COMMA           shift and go to state 143


state 104

    (82) exp -> n_exp .
    (83) exp -> n_exp . OR exp

    COMMA           reduce using rule 82 (exp -> n_exp .)
    RPAREN          reduce using rule 82 (exp -> n_exp .)
    SEMICOLON       reduce using rule 82 (exp -> n_exp .)
    RBRACKET        reduce using rule 82 (exp -> n_exp .)
    OR              shift and go to state 144


state 105

    (84) n_exp -> l_exp .
    (85) n_exp -> l_exp . AND n_exp

    OR              reduce using rule 84 (n_exp -> l_exp .)
    COMMA           reduce using rule 84 (n_exp -> l_exp .)
    RPAREN          reduce using rule 84 (n_exp -> l_exp .)
    SEMICOLON       reduce using rule 84 (n_exp -> l_exp .)
    RBRACKET        reduce using rule 84 (n_exp -> l_exp .)
    AND             shift and go to state 145


state 106

    (86) l_exp -> a_exp .
    (87) l_exp -> a_exp . RELOP a_exp

    AND             reduce using rule 86 (l_exp -> a_exp .)
    OR              reduce using rule 86 (l_exp -> a_exp .)
    COMMA           reduce using rule 86 (l_exp -> a_exp .)
    RPAREN          reduce using rule 86 (l_exp -> a_exp .)
    SEMICOLON       reduce using rule 86 (l_exp -> a_exp .)
    RBRACKET        reduce using rule 86 (l_exp -> a_exp .)
    RELOP           shift and go to state 146


state 107

    (88) a_exp -> term .
    (89) a_exp -> term . PLUS a_exp
    (90) a_exp -> term . MINUS a_exp

    RELOP           reduce using rule 88 (a_exp -> term .)
    AND             reduce using rule 88 (a_exp -> term .)
    OR              reduce using rule 88 (a_exp -> term .)
    COMMA           reduce using rule 88 (a_exp -> term .)
    RPAREN          reduce using rule 88 (a_exp -> term .)
    SEMICOLON       reduce using rule 88 (a_exp -> term .)
    RBRACKET        reduce using rule 88 (a_exp -> term .)
    PLUS            shift and go to state 147
    MINUS           shift and go to state 148


state 108

    (99) factor_aux -> PLUS . cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    ID              shift and go to state 150
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    cte                            shift and go to state 149
    bool                           shift and go to state 119

state 109

    (100) factor_aux -> MINUS . cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    ID              shift and go to state 150
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    cte                            shift and go to state 151
    bool                           shift and go to state 119

state 110

    (91) term -> factor .
    (92) term -> factor . TIMES term
    (93) term -> factor . DIVIDE term

    PLUS            reduce using rule 91 (term -> factor .)
    MINUS           reduce using rule 91 (term -> factor .)
    RELOP           reduce using rule 91 (term -> factor .)
    AND             reduce using rule 91 (term -> factor .)
    OR              reduce using rule 91 (term -> factor .)
    COMMA           reduce using rule 91 (term -> factor .)
    RPAREN          reduce using rule 91 (term -> factor .)
    SEMICOLON       reduce using rule 91 (term -> factor .)
    RBRACKET        reduce using rule 91 (term -> factor .)
    TIMES           shift and go to state 152
    DIVIDE          shift and go to state 153


state 111

    (95) factor -> var .

    TIMES           reduce using rule 95 (factor -> var .)
    DIVIDE          reduce using rule 95 (factor -> var .)
    PLUS            reduce using rule 95 (factor -> var .)
    MINUS           reduce using rule 95 (factor -> var .)
    RELOP           reduce using rule 95 (factor -> var .)
    AND             reduce using rule 95 (factor -> var .)
    OR              reduce using rule 95 (factor -> var .)
    COMMA           reduce using rule 95 (factor -> var .)
    RPAREN          reduce using rule 95 (factor -> var .)
    SEMICOLON       reduce using rule 95 (factor -> var .)
    RBRACKET        reduce using rule 95 (factor -> var .)


state 112

    (96) factor -> call .

    TIMES           reduce using rule 96 (factor -> call .)
    DIVIDE          reduce using rule 96 (factor -> call .)
    PLUS            reduce using rule 96 (factor -> call .)
    MINUS           reduce using rule 96 (factor -> call .)
    RELOP           reduce using rule 96 (factor -> call .)
    AND             reduce using rule 96 (factor -> call .)
    OR              reduce using rule 96 (factor -> call .)
    COMMA           reduce using rule 96 (factor -> call .)
    RPAREN          reduce using rule 96 (factor -> call .)
    SEMICOLON       reduce using rule 96 (factor -> call .)
    RBRACKET        reduce using rule 96 (factor -> call .)


state 113

    (97) factor -> factor_aux .

    TIMES           reduce using rule 97 (factor -> factor_aux .)
    DIVIDE          reduce using rule 97 (factor -> factor_aux .)
    PLUS            reduce using rule 97 (factor -> factor_aux .)
    MINUS           reduce using rule 97 (factor -> factor_aux .)
    RELOP           reduce using rule 97 (factor -> factor_aux .)
    AND             reduce using rule 97 (factor -> factor_aux .)
    OR              reduce using rule 97 (factor -> factor_aux .)
    COMMA           reduce using rule 97 (factor -> factor_aux .)
    RPAREN          reduce using rule 97 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 97 (factor -> factor_aux .)
    RBRACKET        reduce using rule 97 (factor -> factor_aux .)


state 114

    (55) var -> ID .
    (56) var -> ID . var_aux
    (62) call -> ID . LPAREN RPAREN
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . LPAREN call_aux RPAREN
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN
    (101) cte -> ID .
    (57) var_aux -> . POINT ID
    (58) var_aux -> . POINT ID var_aux_2
    (59) var_aux -> . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

  ! reduce/reduce conflict for TIMES resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RELOP resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (var -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (var -> ID .)
    TIMES           reduce using rule 55 (var -> ID .)
    DIVIDE          reduce using rule 55 (var -> ID .)
    PLUS            reduce using rule 55 (var -> ID .)
    MINUS           reduce using rule 55 (var -> ID .)
    RELOP           reduce using rule 55 (var -> ID .)
    AND             reduce using rule 55 (var -> ID .)
    OR              reduce using rule 55 (var -> ID .)
    COMMA           reduce using rule 55 (var -> ID .)
    RPAREN          reduce using rule 55 (var -> ID .)
    SEMICOLON       reduce using rule 55 (var -> ID .)
    RBRACKET        reduce using rule 55 (var -> ID .)
    LPAREN          shift and go to state 97
    POINT           shift and go to state 154
    LBRACKET        shift and go to state 95

  ! TIMES           [ reduce using rule 101 (cte -> ID .) ]
  ! DIVIDE          [ reduce using rule 101 (cte -> ID .) ]
  ! PLUS            [ reduce using rule 101 (cte -> ID .) ]
  ! MINUS           [ reduce using rule 101 (cte -> ID .) ]
  ! RELOP           [ reduce using rule 101 (cte -> ID .) ]
  ! AND             [ reduce using rule 101 (cte -> ID .) ]
  ! OR              [ reduce using rule 101 (cte -> ID .) ]
  ! COMMA           [ reduce using rule 101 (cte -> ID .) ]
  ! RPAREN          [ reduce using rule 101 (cte -> ID .) ]
  ! SEMICOLON       [ reduce using rule 101 (cte -> ID .) ]
  ! RBRACKET        [ reduce using rule 101 (cte -> ID .) ]

    var_aux                        shift and go to state 92
    var_aux_2                      shift and go to state 94

state 115

    (98) factor_aux -> cte .

    TIMES           reduce using rule 98 (factor_aux -> cte .)
    DIVIDE          reduce using rule 98 (factor_aux -> cte .)
    PLUS            reduce using rule 98 (factor_aux -> cte .)
    MINUS           reduce using rule 98 (factor_aux -> cte .)
    RELOP           reduce using rule 98 (factor_aux -> cte .)
    AND             reduce using rule 98 (factor_aux -> cte .)
    OR              reduce using rule 98 (factor_aux -> cte .)
    COMMA           reduce using rule 98 (factor_aux -> cte .)
    RPAREN          reduce using rule 98 (factor_aux -> cte .)
    SEMICOLON       reduce using rule 98 (factor_aux -> cte .)
    RBRACKET        reduce using rule 98 (factor_aux -> cte .)


state 116

    (102) cte -> CTEI .

    TIMES           reduce using rule 102 (cte -> CTEI .)
    DIVIDE          reduce using rule 102 (cte -> CTEI .)
    PLUS            reduce using rule 102 (cte -> CTEI .)
    MINUS           reduce using rule 102 (cte -> CTEI .)
    RELOP           reduce using rule 102 (cte -> CTEI .)
    AND             reduce using rule 102 (cte -> CTEI .)
    OR              reduce using rule 102 (cte -> CTEI .)
    COMMA           reduce using rule 102 (cte -> CTEI .)
    RPAREN          reduce using rule 102 (cte -> CTEI .)
    SEMICOLON       reduce using rule 102 (cte -> CTEI .)
    RBRACKET        reduce using rule 102 (cte -> CTEI .)


state 117

    (103) cte -> CTEF .

    TIMES           reduce using rule 103 (cte -> CTEF .)
    DIVIDE          reduce using rule 103 (cte -> CTEF .)
    PLUS            reduce using rule 103 (cte -> CTEF .)
    MINUS           reduce using rule 103 (cte -> CTEF .)
    RELOP           reduce using rule 103 (cte -> CTEF .)
    AND             reduce using rule 103 (cte -> CTEF .)
    OR              reduce using rule 103 (cte -> CTEF .)
    COMMA           reduce using rule 103 (cte -> CTEF .)
    RPAREN          reduce using rule 103 (cte -> CTEF .)
    SEMICOLON       reduce using rule 103 (cte -> CTEF .)
    RBRACKET        reduce using rule 103 (cte -> CTEF .)


state 118

    (104) cte -> CTECHAR .

    TIMES           reduce using rule 104 (cte -> CTECHAR .)
    DIVIDE          reduce using rule 104 (cte -> CTECHAR .)
    PLUS            reduce using rule 104 (cte -> CTECHAR .)
    MINUS           reduce using rule 104 (cte -> CTECHAR .)
    RELOP           reduce using rule 104 (cte -> CTECHAR .)
    AND             reduce using rule 104 (cte -> CTECHAR .)
    OR              reduce using rule 104 (cte -> CTECHAR .)
    COMMA           reduce using rule 104 (cte -> CTECHAR .)
    RPAREN          reduce using rule 104 (cte -> CTECHAR .)
    SEMICOLON       reduce using rule 104 (cte -> CTECHAR .)
    RBRACKET        reduce using rule 104 (cte -> CTECHAR .)


state 119

    (105) cte -> bool .

    TIMES           reduce using rule 105 (cte -> bool .)
    DIVIDE          reduce using rule 105 (cte -> bool .)
    PLUS            reduce using rule 105 (cte -> bool .)
    MINUS           reduce using rule 105 (cte -> bool .)
    RELOP           reduce using rule 105 (cte -> bool .)
    AND             reduce using rule 105 (cte -> bool .)
    OR              reduce using rule 105 (cte -> bool .)
    COMMA           reduce using rule 105 (cte -> bool .)
    RPAREN          reduce using rule 105 (cte -> bool .)
    SEMICOLON       reduce using rule 105 (cte -> bool .)
    RBRACKET        reduce using rule 105 (cte -> bool .)


state 120

    (106) bool -> TRUE .

    TIMES           reduce using rule 106 (bool -> TRUE .)
    DIVIDE          reduce using rule 106 (bool -> TRUE .)
    PLUS            reduce using rule 106 (bool -> TRUE .)
    MINUS           reduce using rule 106 (bool -> TRUE .)
    RELOP           reduce using rule 106 (bool -> TRUE .)
    AND             reduce using rule 106 (bool -> TRUE .)
    OR              reduce using rule 106 (bool -> TRUE .)
    COMMA           reduce using rule 106 (bool -> TRUE .)
    RPAREN          reduce using rule 106 (bool -> TRUE .)
    SEMICOLON       reduce using rule 106 (bool -> TRUE .)
    RBRACKET        reduce using rule 106 (bool -> TRUE .)


state 121

    (107) bool -> FALSE .

    TIMES           reduce using rule 107 (bool -> FALSE .)
    DIVIDE          reduce using rule 107 (bool -> FALSE .)
    PLUS            reduce using rule 107 (bool -> FALSE .)
    MINUS           reduce using rule 107 (bool -> FALSE .)
    RELOP           reduce using rule 107 (bool -> FALSE .)
    AND             reduce using rule 107 (bool -> FALSE .)
    OR              reduce using rule 107 (bool -> FALSE .)
    COMMA           reduce using rule 107 (bool -> FALSE .)
    RPAREN          reduce using rule 107 (bool -> FALSE .)
    SEMICOLON       reduce using rule 107 (bool -> FALSE .)
    RBRACKET        reduce using rule 107 (bool -> FALSE .)


state 122

    (69) condition_aux -> LPAREN exp . RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN exp . RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux

    RPAREN          shift and go to state 155


state 123

    (80) while -> WHILE LPAREN exp . RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 156


state 124

    (81) for -> FROM LPAREN exp . RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 157


state 125

    (35) functions_aux -> VOID ID LPAREN . params RPAREN body
    (36) functions_aux -> VOID ID LPAREN . RPAREN body
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    RPAREN          shift and go to state 159
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    params                         shift and go to state 158
    simple_type                    shift and go to state 160

state 126

    (37) functions_aux -> simple_type ID LPAREN . RPAREN body
    (38) functions_aux -> simple_type ID LPAREN . params RPAREN body
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    RPAREN          shift and go to state 161
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    simple_type                    shift and go to state 160
    params                         shift and go to state 162

state 127

    (29) classes_aux -> LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 163


state 128

    (30) classes_aux -> LBRACE functions RBRACE .

    CLASS           reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)
    FUNCT           reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)
    MAIN            reduce using rule 30 (classes_aux -> LBRACE functions RBRACE .)


state 129

    (31) classes_aux -> INHERITS ID LBRACE . dec_vars functions RBRACE
    (32) classes_aux -> INHERITS ID LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 9
    FUNCT           shift and go to state 29

    dec_vars                       shift and go to state 164
    functions                      shift and go to state 165

state 130

    (19) vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .

    SEMICOLON       reduce using rule 19 (vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .)


state 131

    (20) vars_simple_type_aux -> LBRACKET CTEI RBRACKET .
    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 20 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 20 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 166


state 132

    (54) assignation -> var EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 167


state 133

    (57) var_aux -> POINT ID .
    (58) var_aux -> POINT ID . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    EQUAL           reduce using rule 57 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 57 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 95

    var_aux_2                      shift and go to state 168

state 134

    (60) var_aux_2 -> LBRACKET exp . RBRACKET
    (61) var_aux_2 -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET

    RBRACKET        shift and go to state 169


state 135

    (62) call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 62 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 62 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 62 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RELOP           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 62 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 62 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 62 (call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 62 (call -> ID LPAREN RPAREN .)


state 136

    (64) call -> ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 170


state 137

    (66) call_aux -> exp .
    (67) call_aux -> exp . COMMA call_aux

    RPAREN          reduce using rule 66 (call_aux -> exp .)
    COMMA           shift and go to state 171


state 138

    (63) call -> ID POINT ID . LPAREN RPAREN
    (65) call -> ID POINT ID . LPAREN call_aux RPAREN

    LPAREN          shift and go to state 172


state 139

    (74) read -> READ LPAREN var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 140

    (94) factor -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 174


state 141

    (75) write -> WRITE LPAREN write_aux RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 175


state 142

    (77) write_aux -> exp COMMA . write_aux
    (76) write_aux -> . exp
    (77) write_aux -> . exp COMMA write_aux
    (78) write_aux -> . CTESTRING
    (79) write_aux -> . CTESTRING COMMA write_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    CTESTRING       shift and go to state 103
    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 102
    write_aux                      shift and go to state 176
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 143

    (79) write_aux -> CTESTRING COMMA . write_aux
    (76) write_aux -> . exp
    (77) write_aux -> . exp COMMA write_aux
    (78) write_aux -> . CTESTRING
    (79) write_aux -> . CTESTRING COMMA write_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    CTESTRING       shift and go to state 103
    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    write_aux                      shift and go to state 177
    exp                            shift and go to state 102
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 144

    (83) exp -> n_exp OR . exp
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    n_exp                          shift and go to state 104
    exp                            shift and go to state 178
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 145

    (85) n_exp -> l_exp AND . n_exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    l_exp                          shift and go to state 105
    n_exp                          shift and go to state 179
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 146

    (87) l_exp -> a_exp RELOP . a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    a_exp                          shift and go to state 180
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 147

    (89) a_exp -> term PLUS . a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    term                           shift and go to state 107
    a_exp                          shift and go to state 181
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 148

    (90) a_exp -> term MINUS . a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    term                           shift and go to state 107
    a_exp                          shift and go to state 182
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 149

    (99) factor_aux -> PLUS cte .

    TIMES           reduce using rule 99 (factor_aux -> PLUS cte .)
    DIVIDE          reduce using rule 99 (factor_aux -> PLUS cte .)
    PLUS            reduce using rule 99 (factor_aux -> PLUS cte .)
    MINUS           reduce using rule 99 (factor_aux -> PLUS cte .)
    RELOP           reduce using rule 99 (factor_aux -> PLUS cte .)
    AND             reduce using rule 99 (factor_aux -> PLUS cte .)
    OR              reduce using rule 99 (factor_aux -> PLUS cte .)
    COMMA           reduce using rule 99 (factor_aux -> PLUS cte .)
    RPAREN          reduce using rule 99 (factor_aux -> PLUS cte .)
    SEMICOLON       reduce using rule 99 (factor_aux -> PLUS cte .)
    RBRACKET        reduce using rule 99 (factor_aux -> PLUS cte .)


state 150

    (101) cte -> ID .

    TIMES           reduce using rule 101 (cte -> ID .)
    DIVIDE          reduce using rule 101 (cte -> ID .)
    PLUS            reduce using rule 101 (cte -> ID .)
    MINUS           reduce using rule 101 (cte -> ID .)
    RELOP           reduce using rule 101 (cte -> ID .)
    AND             reduce using rule 101 (cte -> ID .)
    OR              reduce using rule 101 (cte -> ID .)
    COMMA           reduce using rule 101 (cte -> ID .)
    RPAREN          reduce using rule 101 (cte -> ID .)
    SEMICOLON       reduce using rule 101 (cte -> ID .)
    RBRACKET        reduce using rule 101 (cte -> ID .)


state 151

    (100) factor_aux -> MINUS cte .

    TIMES           reduce using rule 100 (factor_aux -> MINUS cte .)
    DIVIDE          reduce using rule 100 (factor_aux -> MINUS cte .)
    PLUS            reduce using rule 100 (factor_aux -> MINUS cte .)
    MINUS           reduce using rule 100 (factor_aux -> MINUS cte .)
    RELOP           reduce using rule 100 (factor_aux -> MINUS cte .)
    AND             reduce using rule 100 (factor_aux -> MINUS cte .)
    OR              reduce using rule 100 (factor_aux -> MINUS cte .)
    COMMA           reduce using rule 100 (factor_aux -> MINUS cte .)
    RPAREN          reduce using rule 100 (factor_aux -> MINUS cte .)
    SEMICOLON       reduce using rule 100 (factor_aux -> MINUS cte .)
    RBRACKET        reduce using rule 100 (factor_aux -> MINUS cte .)


state 152

    (92) term -> factor TIMES . term
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    factor                         shift and go to state 110
    term                           shift and go to state 183
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 153

    (93) term -> factor DIVIDE . term
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    factor                         shift and go to state 110
    term                           shift and go to state 184
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 154

    (63) call -> ID POINT . ID LPAREN RPAREN
    (65) call -> ID POINT . ID LPAREN call_aux RPAREN
    (57) var_aux -> POINT . ID
    (58) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 185


state 155

    (69) condition_aux -> LPAREN exp RPAREN . THEN LBRACE statutes_aux RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN exp RPAREN . THEN LBRACE statutes_aux RBRACE ELIF condition_aux

    THEN            shift and go to state 186


state 156

    (80) while -> WHILE LPAREN exp RPAREN . DO LBRACE statutes_aux RBRACE

    DO              shift and go to state 187


state 157

    (81) for -> FROM LPAREN exp RPAREN . UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    UNTIL           shift and go to state 188


state 158

    (35) functions_aux -> VOID ID LPAREN params . RPAREN body

    RPAREN          shift and go to state 189


state 159

    (36) functions_aux -> VOID ID LPAREN RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 191

    body                           shift and go to state 190

state 160

    (39) params -> simple_type . ID
    (40) params -> simple_type . ID COMMA params

    ID              shift and go to state 192


state 161

    (37) functions_aux -> simple_type ID LPAREN RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 191

    body                           shift and go to state 193

state 162

    (38) functions_aux -> simple_type ID LPAREN params . RPAREN body

    RPAREN          shift and go to state 194


state 163

    (29) classes_aux -> LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)
    FUNCT           reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 29 (classes_aux -> LBRACE dec_vars functions RBRACE .)


state 164

    (31) classes_aux -> INHERITS ID LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 29

    functions                      shift and go to state 195

state 165

    (32) classes_aux -> INHERITS ID LBRACE functions . RBRACE

    RBRACE          shift and go to state 196


state 166

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET

    CTEI            shift and go to state 197


state 167

    (54) assignation -> var EQUAL exp SEMICOLON .

    ASSIGN          reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    CALL            reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    READ            reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    IF              reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    FROM            reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 54 (assignation -> var EQUAL exp SEMICOLON .)


state 168

    (58) var_aux -> POINT ID var_aux_2 .

    EQUAL           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RPAREN          reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    TIMES           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    DIVIDE          reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    PLUS            reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    MINUS           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RELOP           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    AND             reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    OR              reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    COMMA           reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    SEMICOLON       reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)
    RBRACKET        reduce using rule 58 (var_aux -> POINT ID var_aux_2 .)


state 169

    (60) var_aux_2 -> LBRACKET exp RBRACKET .
    (61) var_aux_2 -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET

    EQUAL           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 60 (var_aux_2 -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 198


state 170

    (64) call -> ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 64 (call -> ID LPAREN call_aux RPAREN .)


state 171

    (67) call_aux -> exp COMMA . call_aux
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 137
    call_aux                       shift and go to state 199
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 172

    (63) call -> ID POINT ID LPAREN . RPAREN
    (65) call -> ID POINT ID LPAREN . call_aux RPAREN
    (66) call_aux -> . exp
    (67) call_aux -> . exp COMMA call_aux
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    RPAREN          shift and go to state 200
    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    call_aux                       shift and go to state 201
    exp                            shift and go to state 137
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 173

    (74) read -> READ LPAREN var RPAREN SEMICOLON .

    ASSIGN          reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    CALL            reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    READ            reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WRITE           reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    IF              reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    FROM            reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (read -> READ LPAREN var RPAREN SEMICOLON .)


state 174

    (94) factor -> LPAREN exp RPAREN .

    TIMES           reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    RELOP           reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    AND             reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    OR              reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 94 (factor -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 94 (factor -> LPAREN exp RPAREN .)


state 175

    (75) write -> WRITE LPAREN write_aux RPAREN SEMICOLON .

    ASSIGN          reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    CALL            reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    READ            reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    WRITE           reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    IF              reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    WHILE           reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    FROM            reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    RBRACE          reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON .)


state 176

    (77) write_aux -> exp COMMA write_aux .

    RPAREN          reduce using rule 77 (write_aux -> exp COMMA write_aux .)


state 177

    (79) write_aux -> CTESTRING COMMA write_aux .

    RPAREN          reduce using rule 79 (write_aux -> CTESTRING COMMA write_aux .)


state 178

    (83) exp -> n_exp OR exp .

    COMMA           reduce using rule 83 (exp -> n_exp OR exp .)
    RPAREN          reduce using rule 83 (exp -> n_exp OR exp .)
    SEMICOLON       reduce using rule 83 (exp -> n_exp OR exp .)
    RBRACKET        reduce using rule 83 (exp -> n_exp OR exp .)


state 179

    (85) n_exp -> l_exp AND n_exp .

    OR              reduce using rule 85 (n_exp -> l_exp AND n_exp .)
    COMMA           reduce using rule 85 (n_exp -> l_exp AND n_exp .)
    RPAREN          reduce using rule 85 (n_exp -> l_exp AND n_exp .)
    SEMICOLON       reduce using rule 85 (n_exp -> l_exp AND n_exp .)
    RBRACKET        reduce using rule 85 (n_exp -> l_exp AND n_exp .)


state 180

    (87) l_exp -> a_exp RELOP a_exp .

    AND             reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)
    OR              reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)
    COMMA           reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)
    RPAREN          reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)
    SEMICOLON       reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)
    RBRACKET        reduce using rule 87 (l_exp -> a_exp RELOP a_exp .)


state 181

    (89) a_exp -> term PLUS a_exp .

    RELOP           reduce using rule 89 (a_exp -> term PLUS a_exp .)
    AND             reduce using rule 89 (a_exp -> term PLUS a_exp .)
    OR              reduce using rule 89 (a_exp -> term PLUS a_exp .)
    COMMA           reduce using rule 89 (a_exp -> term PLUS a_exp .)
    RPAREN          reduce using rule 89 (a_exp -> term PLUS a_exp .)
    SEMICOLON       reduce using rule 89 (a_exp -> term PLUS a_exp .)
    RBRACKET        reduce using rule 89 (a_exp -> term PLUS a_exp .)


state 182

    (90) a_exp -> term MINUS a_exp .

    RELOP           reduce using rule 90 (a_exp -> term MINUS a_exp .)
    AND             reduce using rule 90 (a_exp -> term MINUS a_exp .)
    OR              reduce using rule 90 (a_exp -> term MINUS a_exp .)
    COMMA           reduce using rule 90 (a_exp -> term MINUS a_exp .)
    RPAREN          reduce using rule 90 (a_exp -> term MINUS a_exp .)
    SEMICOLON       reduce using rule 90 (a_exp -> term MINUS a_exp .)
    RBRACKET        reduce using rule 90 (a_exp -> term MINUS a_exp .)


state 183

    (92) term -> factor TIMES term .

    PLUS            reduce using rule 92 (term -> factor TIMES term .)
    MINUS           reduce using rule 92 (term -> factor TIMES term .)
    RELOP           reduce using rule 92 (term -> factor TIMES term .)
    AND             reduce using rule 92 (term -> factor TIMES term .)
    OR              reduce using rule 92 (term -> factor TIMES term .)
    COMMA           reduce using rule 92 (term -> factor TIMES term .)
    RPAREN          reduce using rule 92 (term -> factor TIMES term .)
    SEMICOLON       reduce using rule 92 (term -> factor TIMES term .)
    RBRACKET        reduce using rule 92 (term -> factor TIMES term .)


state 184

    (93) term -> factor DIVIDE term .

    PLUS            reduce using rule 93 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 93 (term -> factor DIVIDE term .)
    RELOP           reduce using rule 93 (term -> factor DIVIDE term .)
    AND             reduce using rule 93 (term -> factor DIVIDE term .)
    OR              reduce using rule 93 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 93 (term -> factor DIVIDE term .)
    RPAREN          reduce using rule 93 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 93 (term -> factor DIVIDE term .)
    RBRACKET        reduce using rule 93 (term -> factor DIVIDE term .)


state 185

    (63) call -> ID POINT ID . LPAREN RPAREN
    (65) call -> ID POINT ID . LPAREN call_aux RPAREN
    (57) var_aux -> POINT ID .
    (58) var_aux -> POINT ID . var_aux_2
    (60) var_aux_2 -> . LBRACKET exp RBRACKET
    (61) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    LPAREN          shift and go to state 172
    TIMES           reduce using rule 57 (var_aux -> POINT ID .)
    DIVIDE          reduce using rule 57 (var_aux -> POINT ID .)
    PLUS            reduce using rule 57 (var_aux -> POINT ID .)
    MINUS           reduce using rule 57 (var_aux -> POINT ID .)
    RELOP           reduce using rule 57 (var_aux -> POINT ID .)
    AND             reduce using rule 57 (var_aux -> POINT ID .)
    OR              reduce using rule 57 (var_aux -> POINT ID .)
    COMMA           reduce using rule 57 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 57 (var_aux -> POINT ID .)
    SEMICOLON       reduce using rule 57 (var_aux -> POINT ID .)
    RBRACKET        reduce using rule 57 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 95

    var_aux_2                      shift and go to state 168

state 186

    (69) condition_aux -> LPAREN exp RPAREN THEN . LBRACE statutes_aux RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN exp RPAREN THEN . LBRACE statutes_aux RBRACE ELIF condition_aux

    LBRACE          shift and go to state 202


state 187

    (80) while -> WHILE LPAREN exp RPAREN DO . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 203


state 188

    (81) for -> FROM LPAREN exp RPAREN UNTIL . LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    LPAREN          shift and go to state 204


state 189

    (35) functions_aux -> VOID ID LPAREN params RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 191

    body                           shift and go to state 205

state 190

    (36) functions_aux -> VOID ID LPAREN RPAREN body .

    FUNCT           reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)
    MAIN            reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)
    RBRACE          reduce using rule 36 (functions_aux -> VOID ID LPAREN RPAREN body .)


state 191

    (41) body -> LBRACE . dec_vars statutes_aux RBRACE
    (42) body -> LBRACE . statutes_aux RBRACE
    (43) body -> LBRACE . statutes_aux RETURN ID RBRACE
    (44) body -> LBRACE . dec_vars statutes_aux RETURN ID RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    VAR             shift and go to state 9
    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    dec_vars                       shift and go to state 206
    statutes_aux                   shift and go to state 207
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 192

    (39) params -> simple_type ID .
    (40) params -> simple_type ID . COMMA params

    RPAREN          reduce using rule 39 (params -> simple_type ID .)
    COMMA           shift and go to state 208


state 193

    (37) functions_aux -> simple_type ID LPAREN RPAREN body .

    FUNCT           reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)
    MAIN            reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)
    RBRACE          reduce using rule 37 (functions_aux -> simple_type ID LPAREN RPAREN body .)


state 194

    (38) functions_aux -> simple_type ID LPAREN params RPAREN . body
    (41) body -> . LBRACE dec_vars statutes_aux RBRACE
    (42) body -> . LBRACE statutes_aux RBRACE
    (43) body -> . LBRACE statutes_aux RETURN ID RBRACE
    (44) body -> . LBRACE dec_vars statutes_aux RETURN ID RBRACE

    LBRACE          shift and go to state 191

    body                           shift and go to state 209

state 195

    (31) classes_aux -> INHERITS ID LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 210


state 196

    (32) classes_aux -> INHERITS ID LBRACE functions RBRACE .

    CLASS           reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)
    FUNCT           reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)
    MAIN            reduce using rule 32 (classes_aux -> INHERITS ID LBRACE functions RBRACE .)


state 197

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET

    RBRACKET        shift and go to state 211


state 198

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 212
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 199

    (67) call_aux -> exp COMMA call_aux .

    RPAREN          reduce using rule 67 (call_aux -> exp COMMA call_aux .)


state 200

    (63) call -> ID POINT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    TIMES           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    PLUS            reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    MINUS           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RELOP           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    AND             reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    OR              reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    COMMA           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)


state 201

    (65) call -> ID POINT ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 213


state 202

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE . statutes_aux RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE . statutes_aux RBRACE ELIF condition_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 214
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 203

    (80) while -> WHILE LPAREN exp RPAREN DO LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 215
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 204

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN . exp RPAREN DO LBRACE statutes_aux RBRACE
    (82) exp -> . n_exp
    (83) exp -> . n_exp OR exp
    (84) n_exp -> . l_exp
    (85) n_exp -> . l_exp AND n_exp
    (86) l_exp -> . a_exp
    (87) l_exp -> . a_exp RELOP a_exp
    (88) a_exp -> . term
    (89) a_exp -> . term PLUS a_exp
    (90) a_exp -> . term MINUS a_exp
    (91) term -> . factor
    (92) term -> . factor TIMES term
    (93) term -> . factor DIVIDE term
    (94) factor -> . LPAREN exp RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . factor_aux
    (55) var -> . ID
    (56) var -> . ID var_aux
    (62) call -> . ID LPAREN RPAREN
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID LPAREN call_aux RPAREN
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (98) factor_aux -> . cte
    (99) factor_aux -> . PLUS cte
    (100) factor_aux -> . MINUS cte
    (101) cte -> . ID
    (102) cte -> . CTEI
    (103) cte -> . CTEF
    (104) cte -> . CTECHAR
    (105) cte -> . bool
    (106) bool -> . TRUE
    (107) bool -> . FALSE

    LPAREN          shift and go to state 100
    ID              shift and go to state 114
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    CTEI            shift and go to state 116
    CTEF            shift and go to state 117
    CTECHAR         shift and go to state 118
    TRUE            shift and go to state 120
    FALSE           shift and go to state 121

    exp                            shift and go to state 216
    n_exp                          shift and go to state 104
    l_exp                          shift and go to state 105
    a_exp                          shift and go to state 106
    term                           shift and go to state 107
    factor                         shift and go to state 110
    var                            shift and go to state 111
    call                           shift and go to state 112
    factor_aux                     shift and go to state 113
    cte                            shift and go to state 115
    bool                           shift and go to state 119

state 205

    (35) functions_aux -> VOID ID LPAREN params RPAREN body .

    FUNCT           reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)
    MAIN            reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)
    RBRACE          reduce using rule 35 (functions_aux -> VOID ID LPAREN params RPAREN body .)


state 206

    (41) body -> LBRACE dec_vars . statutes_aux RBRACE
    (44) body -> LBRACE dec_vars . statutes_aux RETURN ID RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 217
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 207

    (42) body -> LBRACE statutes_aux . RBRACE
    (43) body -> LBRACE statutes_aux . RETURN ID RBRACE

    RBRACE          shift and go to state 218
    RETURN          shift and go to state 219


state 208

    (40) params -> simple_type ID COMMA . params
    (39) params -> . simple_type ID
    (40) params -> . simple_type ID COMMA params
    (22) simple_type -> . INT
    (23) simple_type -> . FLOAT
    (24) simple_type -> . CHAR
    (25) simple_type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    simple_type                    shift and go to state 160
    params                         shift and go to state 220

state 209

    (38) functions_aux -> simple_type ID LPAREN params RPAREN body .

    FUNCT           reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)
    MAIN            reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)
    RBRACE          reduce using rule 38 (functions_aux -> simple_type ID LPAREN params RPAREN body .)


state 210

    (31) classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)
    FUNCT           reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 31 (classes_aux -> INHERITS ID LBRACE dec_vars functions RBRACE .)


state 211

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 212

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 221


state 213

    (65) call -> ID POINT ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)


state 214

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux . RBRACE condition_aux_3
    (71) condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux . RBRACE ELIF condition_aux

    RBRACE          shift and go to state 222


state 215

    (80) while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 223


state 216

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp . RPAREN DO LBRACE statutes_aux RBRACE

    RPAREN          shift and go to state 224


state 217

    (41) body -> LBRACE dec_vars statutes_aux . RBRACE
    (44) body -> LBRACE dec_vars statutes_aux . RETURN ID RBRACE

    RBRACE          shift and go to state 225
    RETURN          shift and go to state 226


state 218

    (42) body -> LBRACE statutes_aux RBRACE .

    FUNCT           reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)
    MAIN            reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 42 (body -> LBRACE statutes_aux RBRACE .)


state 219

    (43) body -> LBRACE statutes_aux RETURN . ID RBRACE

    ID              shift and go to state 227


state 220

    (40) params -> simple_type ID COMMA params .

    RPAREN          reduce using rule 40 (params -> simple_type ID COMMA params .)


state 221

    (61) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    EQUAL           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 61 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 222

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE . condition_aux_3
    (71) condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE . ELIF condition_aux
    (72) condition_aux_3 -> . ELSE LBRACE statutes_aux RBRACE
    (73) condition_aux_3 -> . empty
    (110) empty -> .

    ELIF            shift and go to state 229
    ELSE            shift and go to state 230
    ASSIGN          reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    condition_aux_3                shift and go to state 228
    empty                          shift and go to state 231

state 223

    (80) while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .

    ASSIGN          reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    CALL            reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 80 (while -> WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)


state 224

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN . DO LBRACE statutes_aux RBRACE

    DO              shift and go to state 232


state 225

    (41) body -> LBRACE dec_vars statutes_aux RBRACE .

    FUNCT           reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    MAIN            reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    RBRACE          reduce using rule 41 (body -> LBRACE dec_vars statutes_aux RBRACE .)


state 226

    (44) body -> LBRACE dec_vars statutes_aux RETURN . ID RBRACE

    ID              shift and go to state 233


state 227

    (43) body -> LBRACE statutes_aux RETURN ID . RBRACE

    RBRACE          shift and go to state 234


state 228

    (69) condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .

    ASSIGN          reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    CALL            reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    READ            reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    WRITE           reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    IF              reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    WHILE           reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    FROM            reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    RBRACE          reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)
    RETURN          reduce using rule 69 (condition_aux -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3 .)


state 229

    (71) condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF . condition_aux
    (69) condition_aux -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE condition_aux_3
    (70) condition_aux -> . condition_aux_2
    (71) condition_aux_2 -> . LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux

    LPAREN          shift and go to state 73

    condition_aux                  shift and go to state 235
    condition_aux_2                shift and go to state 74

state 230

    (72) condition_aux_3 -> ELSE . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 236


state 231

    (73) condition_aux_3 -> empty .

    ASSIGN          reduce using rule 73 (condition_aux_3 -> empty .)
    CALL            reduce using rule 73 (condition_aux_3 -> empty .)
    READ            reduce using rule 73 (condition_aux_3 -> empty .)
    WRITE           reduce using rule 73 (condition_aux_3 -> empty .)
    IF              reduce using rule 73 (condition_aux_3 -> empty .)
    WHILE           reduce using rule 73 (condition_aux_3 -> empty .)
    FROM            reduce using rule 73 (condition_aux_3 -> empty .)
    RBRACE          reduce using rule 73 (condition_aux_3 -> empty .)
    RETURN          reduce using rule 73 (condition_aux_3 -> empty .)


state 232

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 237


state 233

    (44) body -> LBRACE dec_vars statutes_aux RETURN ID . RBRACE

    RBRACE          shift and go to state 238


state 234

    (43) body -> LBRACE statutes_aux RETURN ID RBRACE .

    FUNCT           reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)
    MAIN            reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)
    RBRACE          reduce using rule 43 (body -> LBRACE statutes_aux RETURN ID RBRACE .)


state 235

    (71) condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .

    ASSIGN          reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    CALL            reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    READ            reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    WRITE           reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    IF              reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    WHILE           reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    FROM            reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    RBRACE          reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)
    RETURN          reduce using rule 71 (condition_aux_2 -> LPAREN exp RPAREN THEN LBRACE statutes_aux RBRACE ELIF condition_aux .)


state 236

    (72) condition_aux_3 -> ELSE LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 239
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 237

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . ASSIGN assignation
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (74) read -> . READ LPAREN var RPAREN SEMICOLON
    (75) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON
    (68) condition -> . IF condition_aux
    (80) while -> . WHILE LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE
    (81) for -> . FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE

    ASSIGN          shift and go to state 38
    CALL            shift and go to state 39
    READ            shift and go to state 45
    WRITE           shift and go to state 46
    IF              shift and go to state 47
    WHILE           shift and go to state 48
    FROM            shift and go to state 49

    statutes_aux                   shift and go to state 240
    statutes                       shift and go to state 37
    read                           shift and go to state 40
    write                          shift and go to state 41
    condition                      shift and go to state 42
    while                          shift and go to state 43
    for                            shift and go to state 44

state 238

    (44) body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .

    FUNCT           reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)
    MAIN            reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)
    RBRACE          reduce using rule 44 (body -> LBRACE dec_vars statutes_aux RETURN ID RBRACE .)


state 239

    (72) condition_aux_3 -> ELSE LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 241


state 240

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 242


state 241

    (72) condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .

    ASSIGN          reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    CALL            reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 72 (condition_aux_3 -> ELSE LBRACE statutes_aux RBRACE .)


state 242

    (81) for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .

    ASSIGN          reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    CALL            reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 81 (for -> FROM LPAREN exp RPAREN UNTIL LPAREN exp RPAREN DO LBRACE statutes_aux RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 114 resolved using rule (var -> ID)
WARNING: rejected rule (cte -> ID) in state 114
