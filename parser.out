Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    COMMA
    CTECHAR
    CTEF
    CTEI
    CTESTRING
    DIVIDE
    DO
    ELIF
    ELSE
    EQUAL
    FROM
    IF
    INHERITS
    LBRACE
    LBRACKET
    LPAREN
    MINUS
    PLUS
    RBRACE
    RBRACKET
    READ
    RELOP
    RETURN
    RPAREN
    THEN
    TIMES
    UNTIL
    VOID
    WHILE
    WRITE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID TWOPOINTS vars SEMICOLON
Rule 2     vars -> type_aux SEMICOLON
Rule 3     vars -> empty
Rule 4     type_aux -> INT
Rule 5     type_aux -> FLOAT
Rule 6     type_aux -> CHAR
Rule 7     type_aux -> STRING
Rule 8     type_aux -> BOOL
Rule 9     type_aux -> ID
Rule 10    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 8
CHAR                 : 6
CLASS                : 
COMMA                : 
CTECHAR              : 
CTEF                 : 
CTEI                 : 
CTESTRING            : 
DIVIDE               : 
DO                   : 
ELIF                 : 
ELSE                 : 
EQUAL                : 
FLOAT                : 5
FROM                 : 
ID                   : 1 9
IF                   : 
INHERITS             : 
INT                  : 4
LBRACE               : 
LBRACKET             : 
LPAREN               : 
MINUS                : 
PLUS                 : 
PROGRAM              : 1
RBRACE               : 
RBRACKET             : 
READ                 : 
RELOP                : 
RETURN               : 
RPAREN               : 
SEMICOLON            : 1 2
STRING               : 7
THEN                 : 
TIMES                : 
TWOPOINTS            : 1
UNTIL                : 
VOID                 : 
WHILE                : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

empty                : 3
program              : 0
type_aux             : 2
vars                 : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID TWOPOINTS vars SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID TWOPOINTS vars SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . TWOPOINTS vars SEMICOLON

    TWOPOINTS       shift and go to state 4


state 4

    (1) program -> PROGRAM ID TWOPOINTS . vars SEMICOLON
    (2) vars -> . type_aux SEMICOLON
    (3) vars -> . empty
    (4) type_aux -> . INT
    (5) type_aux -> . FLOAT
    (6) type_aux -> . CHAR
    (7) type_aux -> . STRING
    (8) type_aux -> . BOOL
    (9) type_aux -> . ID
    (10) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 11
    STRING          shift and go to state 12
    BOOL            shift and go to state 13
    ID              shift and go to state 5
    SEMICOLON       reduce using rule 10 (empty -> .)

    vars                           shift and go to state 6
    type_aux                       shift and go to state 7
    empty                          shift and go to state 8

state 5

    (9) type_aux -> ID .

    SEMICOLON       reduce using rule 9 (type_aux -> ID .)


state 6

    (1) program -> PROGRAM ID TWOPOINTS vars . SEMICOLON

    SEMICOLON       shift and go to state 14


state 7

    (2) vars -> type_aux . SEMICOLON

    SEMICOLON       shift and go to state 15


state 8

    (3) vars -> empty .

    SEMICOLON       reduce using rule 3 (vars -> empty .)


state 9

    (4) type_aux -> INT .

    SEMICOLON       reduce using rule 4 (type_aux -> INT .)


state 10

    (5) type_aux -> FLOAT .

    SEMICOLON       reduce using rule 5 (type_aux -> FLOAT .)


state 11

    (6) type_aux -> CHAR .

    SEMICOLON       reduce using rule 6 (type_aux -> CHAR .)


state 12

    (7) type_aux -> STRING .

    SEMICOLON       reduce using rule 7 (type_aux -> STRING .)


state 13

    (8) type_aux -> BOOL .

    SEMICOLON       reduce using rule 8 (type_aux -> BOOL .)


state 14

    (1) program -> PROGRAM ID TWOPOINTS vars SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID TWOPOINTS vars SEMICOLON .)


state 15

    (2) vars -> type_aux SEMICOLON .

    SEMICOLON       reduce using rule 2 (vars -> type_aux SEMICOLON .)

