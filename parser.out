Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program
Rule 2     program_classes -> classes
Rule 3     program_classes -> empty
Rule 4     program_body -> program_body_vars program_body_funct
Rule 5     program_body_vars -> dec_vars
Rule 6     program_body_vars -> empty
Rule 7     program_body_funct -> functions
Rule 8     program_body_funct -> empty
Rule 9     dec_vars -> VAR dec_vars_aux
Rule 10    dec_vars_aux -> dec_vars_simple
Rule 11    dec_vars_aux -> dec_vars_complex
Rule 12    dec_vars_simple -> simple_type vars_simple_type SEMICOLON
Rule 13    dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux
Rule 14    simple_type -> INT
Rule 15    simple_type -> FLOAT
Rule 16    simple_type -> CHAR
Rule 17    vars_simple_type -> ID add_variable
Rule 18    vars_simple_type -> ID add_variable COMMA vars_simple_type
Rule 19    vars_simple_type -> ID vars_simple_type_aux
Rule 20    vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type
Rule 21    vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable
Rule 22    vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable
Rule 23    dec_vars_complex -> OBJECT vars_complex_type SEMICOLON
Rule 24    dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux
Rule 25    vars_complex_type -> ID add_variable
Rule 26    vars_complex_type -> ID add_variable COMMA vars_complex_type
Rule 27    classes -> CLASS OBJECT classes_aux
Rule 28    classes -> CLASS OBJECT classes_aux classes
Rule 29    classes_aux -> add_class LBRACE dec_vars functions RBRACE
Rule 30    classes_aux -> add_class LBRACE functions RBRACE
Rule 31    classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
Rule 32    classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE
Rule 33    functions -> FUNCT functions_aux
Rule 34    functions -> FUNCT functions_aux functions
Rule 35    functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params body
Rule 36    functions_aux -> VOID ID add_function LPAREN RPAREN body
Rule 37    functions_aux -> simple_type ID add_function LPAREN RPAREN body
Rule 38    functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params body
Rule 39    params -> simple_type ID add_param
Rule 40    params -> simple_type ID add_param COMMA params
Rule 41    body -> LBRACE start_function dec_vars statutes_aux RBRACE end_function
Rule 42    body -> LBRACE start_function statutes_aux RBRACE end_function
Rule 43    body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
Rule 44    body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
Rule 45    statutes -> assignation SEMICOLON
Rule 46    statutes -> CALL call SEMICOLON
Rule 47    statutes -> read
Rule 48    statutes -> write
Rule 49    statutes -> condition
Rule 50    statutes -> while
Rule 51    statutes -> for
Rule 52    statutes_aux -> statutes
Rule 53    statutes_aux -> statutes statutes_aux
Rule 54    assignation -> ID push_var EQUAL push_op exp pop_op_assign
Rule 55    assignation -> ID push_var var_aux EQUAL push_op exp pop_op_assign
Rule 56    var_aux -> POINT ID
Rule 57    var_aux -> POINT ID var_aux_2
Rule 58    var_aux -> var_aux_2
Rule 59    var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3
Rule 60    var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix
Rule 61    var_aux_3 -> end_array
Rule 62    call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
Rule 63    call -> ID POINT ID LPAREN RPAREN
Rule 64    call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
Rule 65    call -> ID POINT ID LPAREN call_aux RPAREN
Rule 66    call_aux -> exp arg_function
Rule 67    call_aux -> exp arg_function COMMA call_aux
Rule 68    condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
Rule 69    condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
Rule 70    condition_aux_elif -> empty
Rule 71    condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE
Rule 72    condition_aux_else -> empty
Rule 73    read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read
Rule 74    read_aux -> ID push_var var_aux_2
Rule 75    read_aux -> ID push_var var_aux_2 COMMA generate_read read_aux
Rule 76    read_aux -> ID push_var
Rule 77    read_aux -> ID push_var COMMA generate_read read_aux
Rule 78    write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
Rule 79    write_aux -> exp
Rule 80    write_aux -> exp COMMA generate_write write_aux
Rule 81    write_aux -> CTESTRING save_string
Rule 82    write_aux -> CTESTRING save_string COMMA generate_write write_aux
Rule 83    while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
Rule 84    for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
Rule 85    exp -> l_exp pop_op_lop
Rule 86    exp -> l_exp pop_op_lop OR push_op exp
Rule 87    exp -> l_exp pop_op_lop AND push_op exp
Rule 88    l_exp -> a_exp
Rule 89    l_exp -> a_exp RELOP push_op a_exp pop_op_relop
Rule 90    a_exp -> term pop_op_art_n2
Rule 91    a_exp -> term pop_op_art_n2 PLUS push_op a_exp
Rule 92    a_exp -> term pop_op_art_n2 MINUS push_op a_exp
Rule 93    term -> factor pop_op_art_n1
Rule 94    term -> factor pop_op_art_n1 TIMES push_op term
Rule 95    term -> factor pop_op_art_n1 DIVIDE push_op term
Rule 96    factor -> LPAREN push_paren exp RPAREN pop_paren
Rule 97    factor -> factor_aux
Rule 98    factor -> call
Rule 99    factor_aux -> cte
Rule 100   factor_aux -> PLUS cte
Rule 101   factor_aux -> MINUS cte
Rule 102   cte -> ID push_var
Rule 103   cte -> ID push_var var_aux
Rule 104   cte -> CTEI push_var
Rule 105   cte -> CTEF push_var
Rule 106   cte -> CTECHAR push_var
Rule 107   init -> INIT add_init LBRACE start_init statutes_aux RBRACE
Rule 108   init -> INIT add_init LBRACE start_init dec_vars statutes_aux RBRACE
Rule 109   empty -> <empty>
Rule 110   add_variable -> <empty>
Rule 111   add_array_variable -> <empty>
Rule 112   add_matrix_variable -> <empty>
Rule 113   add_function -> <empty>
Rule 114   add_init -> <empty>
Rule 115   add_class -> <empty>
Rule 116   add_inherit_class -> <empty>
Rule 117   push_var -> <empty>
Rule 118   push_op -> <empty>
Rule 119   pop_op_art_n1 -> <empty>
Rule 120   pop_op_art_n2 -> <empty>
Rule 121   pop_op_relop -> <empty>
Rule 122   pop_op_lop -> <empty>
Rule 123   pop_op_assign -> <empty>
Rule 124   push_paren -> <empty>
Rule 125   pop_paren -> <empty>
Rule 126   generate_write -> <empty>
Rule 127   save_string -> <empty>
Rule 128   generate_read -> <empty>
Rule 129   if_condition -> <empty>
Rule 130   elif_condition -> <empty>
Rule 131   elif_expression -> <empty>
Rule 132   else_condition -> <empty>
Rule 133   end_if -> <empty>
Rule 134   while_jump -> <empty>
Rule 135   while_condition -> <empty>
Rule 136   end_while -> <empty>
Rule 137   for_jump -> <empty>
Rule 138   for_condition -> <empty>
Rule 139   end_for -> <empty>
Rule 140   add_param -> <empty>
Rule 141   insert_number_params -> <empty>
Rule 142   start_function -> <empty>
Rule 143   return_function -> <empty>
Rule 144   end_function -> <empty>
Rule 145   exist_function -> <empty>
Rule 146   era_function -> <empty>
Rule 147   arg_function -> <empty>
Rule 148   gosub_function -> <empty>
Rule 149   access_array -> <empty>
Rule 150   verify_array_index -> <empty>
Rule 151   end_array -> <empty>
Rule 152   access_matrix -> <empty>
Rule 153   verify_matrix_index -> <empty>
Rule 154   end_matrix -> <empty>
Rule 155   check_init -> <empty>
Rule 156   start_init -> <empty>
Rule 157   end_program -> <empty>

Terminals, with rules where they appear

AND                  : 87
CALL                 : 46
CHAR                 : 16
CLASS                : 27 28
COMMA                : 18 20 26 40 67 75 77 80 82
CTECHAR              : 106
CTEF                 : 105
CTEI                 : 21 22 22 104
CTESTRING            : 81 82
DIVIDE               : 95
DO                   : 83 84
ELIF                 : 69
ELSE                 : 71
END                  : 1
EQUAL                : 54 55
FLOAT                : 15
FROM                 : 84
FUNCT                : 33 34
ID                   : 1 17 18 19 20 25 26 35 36 37 38 39 40 43 44 54 55 56 57 62 63 63 64 65 65 74 75 76 77 102 103
IF                   : 68
INHERITS             : 31 32
INIT                 : 107 108
INT                  : 14
LBRACE               : 1 29 30 31 32 41 42 43 44 68 69 71 83 84 107 108
LBRACKET             : 21 22 22 59 60
LPAREN               : 35 36 37 38 62 63 64 65 68 69 73 78 83 84 84 96
MAIN                 : 1
MINUS                : 92 101
OBJECT               : 23 24 27 28 31 32
OR                   : 86
PLUS                 : 91 100
POINT                : 56 57 63 65
PROGRAM              : 1
RBRACE               : 1 29 30 31 32 41 42 43 44 68 69 71 83 84 107 108
RBRACKET             : 21 22 22 59 60
READ                 : 73
RELOP                : 89
RETURN               : 43 44
RPAREN               : 35 36 37 38 62 63 64 65 68 69 73 78 83 84 84 96
SEMICOLON            : 12 13 23 24 43 44 45 46 73 78
THEN                 : 68 69
TIMES                : 94
TWOPOINTS            : 1
UNTIL                : 84
VAR                  : 9
VOID                 : 35 36
WHILE                : 83
WRITE                : 78
error                : 

Nonterminals, with rules where they appear

a_exp                : 88 89 89 91 92
access_array         : 59
access_matrix        : 60
add_array_variable   : 21
add_class            : 1 29 30
add_function         : 35 36 37 38
add_inherit_class    : 31 32
add_init             : 107 108
add_matrix_variable  : 22
add_param            : 39 40
add_variable         : 17 18 25 26
arg_function         : 66 67
assignation          : 45 84
body                 : 35 36 37 38
call                 : 46 98
call_aux             : 64 65 67
check_init           : 1
classes              : 2 28
classes_aux          : 27 28
condition            : 49
condition_aux_elif   : 68 69
condition_aux_else   : 68
cte                  : 99 100 101
dec_vars             : 5 29 31 41 44 108
dec_vars_aux         : 9 13 24
dec_vars_complex     : 11
dec_vars_simple      : 10
elif_condition       : 69
elif_expression      : 69
else_condition       : 71
empty                : 3 6 8 70 72
end_array            : 61
end_for              : 84
end_function         : 41 42 43 44
end_if               : 68
end_matrix           : 60
end_program          : 1
end_while            : 83
era_function         : 62 64
exist_function       : 62 64
exp                  : 54 55 59 60 66 67 68 69 79 80 83 84 86 87 96
factor               : 93 94 95
factor_aux           : 97
for                  : 51
for_condition        : 84
for_jump             : 84
functions            : 7 29 30 31 32 34
functions_aux        : 33 34
generate_read        : 73 75 77
generate_write       : 78 80 82
gosub_function       : 62 64
if_condition         : 68
init                 : 1
insert_number_params : 35 38
l_exp                : 85 86 87
params               : 35 38 40
pop_op_art_n1        : 93 94 95
pop_op_art_n2        : 90 91 92
pop_op_assign        : 54 55
pop_op_lop           : 85 86 87
pop_op_relop         : 89
pop_paren            : 62 64 96
program              : 0
program_body         : 1
program_body_funct   : 4
program_body_vars    : 4
program_classes      : 1
push_op              : 54 55 86 87 89 91 92 94 95
push_paren           : 62 64 96
push_var             : 54 55 74 75 76 77 102 103 104 105 106
read                 : 47
read_aux             : 73 75 77
return_function      : 43 44
save_string          : 81 82
simple_type          : 12 13 37 38 39 40
start_function       : 41 42 43 44
start_init           : 107 108
statutes             : 52 53
statutes_aux         : 41 42 43 44 53 68 69 71 83 84 107 108
term                 : 90 91 92 94 95
var_aux              : 55 103
var_aux_2            : 57 58 74 75
var_aux_3            : 59
vars_complex_type    : 23 24 26
vars_simple_type     : 12 13 18 20
vars_simple_type_aux : 19 20
verify_array_index   : 59
verify_matrix_index  : 60
while                : 50
while_condition      : 83
while_jump           : 83
write                : 48
write_aux            : 78 80 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    TWOPOINTS       shift and go to state 4


state 4

    (1) program -> PROGRAM ID TWOPOINTS . check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program
    (155) check_init -> .

    CLASS           reduce using rule 155 (check_init -> .)
    MAIN            reduce using rule 155 (check_init -> .)

    check_init                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID TWOPOINTS check_init . program_classes MAIN add_class LBRACE program_body init RBRACE END end_program
    (2) program_classes -> . classes
    (3) program_classes -> . empty
    (27) classes -> . CLASS OBJECT classes_aux
    (28) classes -> . CLASS OBJECT classes_aux classes
    (109) empty -> .

    CLASS           shift and go to state 9
    MAIN            reduce using rule 109 (empty -> .)

    program_classes                shift and go to state 6
    classes                        shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes . MAIN add_class LBRACE program_body init RBRACE END end_program

    MAIN            shift and go to state 10


state 7

    (2) program_classes -> classes .

    MAIN            reduce using rule 2 (program_classes -> classes .)


state 8

    (3) program_classes -> empty .

    MAIN            reduce using rule 3 (program_classes -> empty .)


state 9

    (27) classes -> CLASS . OBJECT classes_aux
    (28) classes -> CLASS . OBJECT classes_aux classes

    OBJECT          shift and go to state 11


state 10

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN . add_class LBRACE program_body init RBRACE END end_program
    (115) add_class -> .

    LBRACE          reduce using rule 115 (add_class -> .)

    add_class                      shift and go to state 12

state 11

    (27) classes -> CLASS OBJECT . classes_aux
    (28) classes -> CLASS OBJECT . classes_aux classes
    (29) classes_aux -> . add_class LBRACE dec_vars functions RBRACE
    (30) classes_aux -> . add_class LBRACE functions RBRACE
    (31) classes_aux -> . INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> . INHERITS OBJECT add_inherit_class LBRACE functions RBRACE
    (115) add_class -> .

    INHERITS        shift and go to state 15
    LBRACE          reduce using rule 115 (add_class -> .)

    classes_aux                    shift and go to state 13
    add_class                      shift and go to state 14

state 12

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class . LBRACE program_body init RBRACE END end_program

    LBRACE          shift and go to state 16


state 13

    (27) classes -> CLASS OBJECT classes_aux .
    (28) classes -> CLASS OBJECT classes_aux . classes
    (27) classes -> . CLASS OBJECT classes_aux
    (28) classes -> . CLASS OBJECT classes_aux classes

    MAIN            reduce using rule 27 (classes -> CLASS OBJECT classes_aux .)
    CLASS           shift and go to state 9

    classes                        shift and go to state 17

state 14

    (29) classes_aux -> add_class . LBRACE dec_vars functions RBRACE
    (30) classes_aux -> add_class . LBRACE functions RBRACE

    LBRACE          shift and go to state 18


state 15

    (31) classes_aux -> INHERITS . OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS . OBJECT add_inherit_class LBRACE functions RBRACE

    OBJECT          shift and go to state 19


state 16

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE . program_body init RBRACE END end_program
    (4) program_body -> . program_body_vars program_body_funct
    (5) program_body_vars -> . dec_vars
    (6) program_body_vars -> . empty
    (9) dec_vars -> . VAR dec_vars_aux
    (109) empty -> .

    VAR             shift and go to state 24
    FUNCT           reduce using rule 109 (empty -> .)
    INIT            reduce using rule 109 (empty -> .)

    program_body                   shift and go to state 20
    program_body_vars              shift and go to state 21
    dec_vars                       shift and go to state 22
    empty                          shift and go to state 23

state 17

    (28) classes -> CLASS OBJECT classes_aux classes .

    MAIN            reduce using rule 28 (classes -> CLASS OBJECT classes_aux classes .)


state 18

    (29) classes_aux -> add_class LBRACE . dec_vars functions RBRACE
    (30) classes_aux -> add_class LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 24
    FUNCT           shift and go to state 27

    dec_vars                       shift and go to state 25
    functions                      shift and go to state 26

state 19

    (31) classes_aux -> INHERITS OBJECT . add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT . add_inherit_class LBRACE functions RBRACE
    (116) add_inherit_class -> .

    LBRACE          reduce using rule 116 (add_inherit_class -> .)

    add_inherit_class              shift and go to state 28

state 20

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body . init RBRACE END end_program
    (107) init -> . INIT add_init LBRACE start_init statutes_aux RBRACE
    (108) init -> . INIT add_init LBRACE start_init dec_vars statutes_aux RBRACE

    INIT            shift and go to state 30

    init                           shift and go to state 29

state 21

    (4) program_body -> program_body_vars . program_body_funct
    (7) program_body_funct -> . functions
    (8) program_body_funct -> . empty
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions
    (109) empty -> .

    FUNCT           shift and go to state 27
    INIT            reduce using rule 109 (empty -> .)

    program_body_funct             shift and go to state 31
    functions                      shift and go to state 32
    empty                          shift and go to state 33

state 22

    (5) program_body_vars -> dec_vars .

    FUNCT           reduce using rule 5 (program_body_vars -> dec_vars .)
    INIT            reduce using rule 5 (program_body_vars -> dec_vars .)


state 23

    (6) program_body_vars -> empty .

    FUNCT           reduce using rule 6 (program_body_vars -> empty .)
    INIT            reduce using rule 6 (program_body_vars -> empty .)


state 24

    (9) dec_vars -> VAR . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    OBJECT          shift and go to state 38
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    dec_vars_aux                   shift and go to state 34
    dec_vars_simple                shift and go to state 35
    dec_vars_complex               shift and go to state 36
    simple_type                    shift and go to state 37

state 25

    (29) classes_aux -> add_class LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 27

    functions                      shift and go to state 42

state 26

    (30) classes_aux -> add_class LBRACE functions . RBRACE

    RBRACE          shift and go to state 43


state 27

    (33) functions -> FUNCT . functions_aux
    (34) functions -> FUNCT . functions_aux functions
    (35) functions_aux -> . VOID ID add_function LPAREN params RPAREN insert_number_params body
    (36) functions_aux -> . VOID ID add_function LPAREN RPAREN body
    (37) functions_aux -> . simple_type ID add_function LPAREN RPAREN body
    (38) functions_aux -> . simple_type ID add_function LPAREN params RPAREN insert_number_params body
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    VOID            shift and go to state 45
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    functions_aux                  shift and go to state 44
    simple_type                    shift and go to state 46

state 28

    (31) classes_aux -> INHERITS OBJECT add_inherit_class . LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT add_inherit_class . LBRACE functions RBRACE

    LBRACE          shift and go to state 47


state 29

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init . RBRACE END end_program

    RBRACE          shift and go to state 48


state 30

    (107) init -> INIT . add_init LBRACE start_init statutes_aux RBRACE
    (108) init -> INIT . add_init LBRACE start_init dec_vars statutes_aux RBRACE
    (114) add_init -> .

    LBRACE          reduce using rule 114 (add_init -> .)

    add_init                       shift and go to state 49

state 31

    (4) program_body -> program_body_vars program_body_funct .

    INIT            reduce using rule 4 (program_body -> program_body_vars program_body_funct .)


state 32

    (7) program_body_funct -> functions .

    INIT            reduce using rule 7 (program_body_funct -> functions .)


state 33

    (8) program_body_funct -> empty .

    INIT            reduce using rule 8 (program_body_funct -> empty .)


state 34

    (9) dec_vars -> VAR dec_vars_aux .

    FUNCT           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    INIT            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    CALL            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    ID              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    READ            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WRITE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    IF              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WHILE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FROM            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)


state 35

    (10) dec_vars_aux -> dec_vars_simple .

    FUNCT           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    INIT            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    CALL            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    ID              reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    READ            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    WRITE           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    IF              reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    WHILE           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    FROM            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)


state 36

    (11) dec_vars_aux -> dec_vars_complex .

    FUNCT           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    INIT            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    CALL            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    ID              reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    READ            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    WRITE           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    IF              reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    WHILE           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    FROM            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)


state 37

    (12) dec_vars_simple -> simple_type . vars_simple_type SEMICOLON
    (13) dec_vars_simple -> simple_type . vars_simple_type SEMICOLON dec_vars_aux
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 51

    vars_simple_type               shift and go to state 50

state 38

    (23) dec_vars_complex -> OBJECT . vars_complex_type SEMICOLON
    (24) dec_vars_complex -> OBJECT . vars_complex_type SEMICOLON dec_vars_aux
    (25) vars_complex_type -> . ID add_variable
    (26) vars_complex_type -> . ID add_variable COMMA vars_complex_type

    ID              shift and go to state 53

    vars_complex_type              shift and go to state 52

state 39

    (14) simple_type -> INT .

    ID              reduce using rule 14 (simple_type -> INT .)


state 40

    (15) simple_type -> FLOAT .

    ID              reduce using rule 15 (simple_type -> FLOAT .)


state 41

    (16) simple_type -> CHAR .

    ID              reduce using rule 16 (simple_type -> CHAR .)


state 42

    (29) classes_aux -> add_class LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 54


state 43

    (30) classes_aux -> add_class LBRACE functions RBRACE .

    CLASS           reduce using rule 30 (classes_aux -> add_class LBRACE functions RBRACE .)
    MAIN            reduce using rule 30 (classes_aux -> add_class LBRACE functions RBRACE .)


state 44

    (33) functions -> FUNCT functions_aux .
    (34) functions -> FUNCT functions_aux . functions
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    RBRACE          reduce using rule 33 (functions -> FUNCT functions_aux .)
    INIT            reduce using rule 33 (functions -> FUNCT functions_aux .)
    FUNCT           shift and go to state 27

    functions                      shift and go to state 55

state 45

    (35) functions_aux -> VOID . ID add_function LPAREN params RPAREN insert_number_params body
    (36) functions_aux -> VOID . ID add_function LPAREN RPAREN body

    ID              shift and go to state 56


state 46

    (37) functions_aux -> simple_type . ID add_function LPAREN RPAREN body
    (38) functions_aux -> simple_type . ID add_function LPAREN params RPAREN insert_number_params body

    ID              shift and go to state 57


state 47

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE . dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 24
    FUNCT           shift and go to state 27

    dec_vars                       shift and go to state 58
    functions                      shift and go to state 59

state 48

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE . END end_program

    END             shift and go to state 60


state 49

    (107) init -> INIT add_init . LBRACE start_init statutes_aux RBRACE
    (108) init -> INIT add_init . LBRACE start_init dec_vars statutes_aux RBRACE

    LBRACE          shift and go to state 61


state 50

    (12) dec_vars_simple -> simple_type vars_simple_type . SEMICOLON
    (13) dec_vars_simple -> simple_type vars_simple_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 62


state 51

    (17) vars_simple_type -> ID . add_variable
    (18) vars_simple_type -> ID . add_variable COMMA vars_simple_type
    (19) vars_simple_type -> ID . vars_simple_type_aux
    (20) vars_simple_type -> ID . vars_simple_type_aux COMMA vars_simple_type
    (110) add_variable -> .
    (21) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET add_array_variable
    (22) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    COMMA           reduce using rule 110 (add_variable -> .)
    SEMICOLON       reduce using rule 110 (add_variable -> .)
    LBRACKET        shift and go to state 65

    add_variable                   shift and go to state 63
    vars_simple_type_aux           shift and go to state 64

state 52

    (23) dec_vars_complex -> OBJECT vars_complex_type . SEMICOLON
    (24) dec_vars_complex -> OBJECT vars_complex_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 66


state 53

    (25) vars_complex_type -> ID . add_variable
    (26) vars_complex_type -> ID . add_variable COMMA vars_complex_type
    (110) add_variable -> .

    COMMA           reduce using rule 110 (add_variable -> .)
    SEMICOLON       reduce using rule 110 (add_variable -> .)

    add_variable                   shift and go to state 67

state 54

    (29) classes_aux -> add_class LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 29 (classes_aux -> add_class LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 29 (classes_aux -> add_class LBRACE dec_vars functions RBRACE .)


state 55

    (34) functions -> FUNCT functions_aux functions .

    RBRACE          reduce using rule 34 (functions -> FUNCT functions_aux functions .)
    INIT            reduce using rule 34 (functions -> FUNCT functions_aux functions .)


state 56

    (35) functions_aux -> VOID ID . add_function LPAREN params RPAREN insert_number_params body
    (36) functions_aux -> VOID ID . add_function LPAREN RPAREN body
    (113) add_function -> .

    LPAREN          reduce using rule 113 (add_function -> .)

    add_function                   shift and go to state 68

state 57

    (37) functions_aux -> simple_type ID . add_function LPAREN RPAREN body
    (38) functions_aux -> simple_type ID . add_function LPAREN params RPAREN insert_number_params body
    (113) add_function -> .

    LPAREN          reduce using rule 113 (add_function -> .)

    add_function                   shift and go to state 69

state 58

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 27

    functions                      shift and go to state 70

state 59

    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions . RBRACE

    RBRACE          shift and go to state 71


state 60

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END . end_program
    (157) end_program -> .

    $end            reduce using rule 157 (end_program -> .)

    end_program                    shift and go to state 72

state 61

    (107) init -> INIT add_init LBRACE . start_init statutes_aux RBRACE
    (108) init -> INIT add_init LBRACE . start_init dec_vars statutes_aux RBRACE
    (156) start_init -> .

    VAR             reduce using rule 156 (start_init -> .)
    CALL            reduce using rule 156 (start_init -> .)
    ID              reduce using rule 156 (start_init -> .)
    READ            reduce using rule 156 (start_init -> .)
    WRITE           reduce using rule 156 (start_init -> .)
    IF              reduce using rule 156 (start_init -> .)
    WHILE           reduce using rule 156 (start_init -> .)
    FROM            reduce using rule 156 (start_init -> .)

    start_init                     shift and go to state 73

state 62

    (12) dec_vars_simple -> simple_type vars_simple_type SEMICOLON .
    (13) dec_vars_simple -> simple_type vars_simple_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    FUNCT           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    INIT            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    CALL            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    ID              reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    READ            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    WRITE           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    IF              reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    WHILE           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    FROM            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    OBJECT          shift and go to state 38
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    simple_type                    shift and go to state 37
    dec_vars_aux                   shift and go to state 74
    dec_vars_simple                shift and go to state 35
    dec_vars_complex               shift and go to state 36

state 63

    (17) vars_simple_type -> ID add_variable .
    (18) vars_simple_type -> ID add_variable . COMMA vars_simple_type

    SEMICOLON       reduce using rule 17 (vars_simple_type -> ID add_variable .)
    COMMA           shift and go to state 75


state 64

    (19) vars_simple_type -> ID vars_simple_type_aux .
    (20) vars_simple_type -> ID vars_simple_type_aux . COMMA vars_simple_type

    SEMICOLON       reduce using rule 19 (vars_simple_type -> ID vars_simple_type_aux .)
    COMMA           shift and go to state 76


state 65

    (21) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET add_array_variable
    (22) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    CTEI            shift and go to state 77


state 66

    (23) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .
    (24) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    FUNCT           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    INIT            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    CALL            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    ID              reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    READ            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    WRITE           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    IF              reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    WHILE           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    FROM            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    OBJECT          shift and go to state 38
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    dec_vars_aux                   shift and go to state 78
    dec_vars_simple                shift and go to state 35
    dec_vars_complex               shift and go to state 36
    simple_type                    shift and go to state 37

state 67

    (25) vars_complex_type -> ID add_variable .
    (26) vars_complex_type -> ID add_variable . COMMA vars_complex_type

    SEMICOLON       reduce using rule 25 (vars_complex_type -> ID add_variable .)
    COMMA           shift and go to state 79


state 68

    (35) functions_aux -> VOID ID add_function . LPAREN params RPAREN insert_number_params body
    (36) functions_aux -> VOID ID add_function . LPAREN RPAREN body

    LPAREN          shift and go to state 80


state 69

    (37) functions_aux -> simple_type ID add_function . LPAREN RPAREN body
    (38) functions_aux -> simple_type ID add_function . LPAREN params RPAREN insert_number_params body

    LPAREN          shift and go to state 81


state 70

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 82


state 71

    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .

    CLASS           reduce using rule 32 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .)
    MAIN            reduce using rule 32 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .)


state 72

    (1) program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program .

    $end            reduce using rule 1 (program -> PROGRAM ID TWOPOINTS check_init program_classes MAIN add_class LBRACE program_body init RBRACE END end_program .)


state 73

    (107) init -> INIT add_init LBRACE start_init . statutes_aux RBRACE
    (108) init -> INIT add_init LBRACE start_init . dec_vars statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (9) dec_vars -> . VAR dec_vars_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    VAR             shift and go to state 24
    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 83
    dec_vars                       shift and go to state 84
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 74

    (13) dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .

    FUNCT           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    INIT            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)


state 75

    (18) vars_simple_type -> ID add_variable COMMA . vars_simple_type
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 51

    vars_simple_type               shift and go to state 99

state 76

    (20) vars_simple_type -> ID vars_simple_type_aux COMMA . vars_simple_type
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 51

    vars_simple_type               shift and go to state 100

state 77

    (21) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET add_array_variable
    (22) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    RBRACKET        shift and go to state 101


state 78

    (24) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .

    FUNCT           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    INIT            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)


state 79

    (26) vars_complex_type -> ID add_variable COMMA . vars_complex_type
    (25) vars_complex_type -> . ID add_variable
    (26) vars_complex_type -> . ID add_variable COMMA vars_complex_type

    ID              shift and go to state 53

    vars_complex_type              shift and go to state 102

state 80

    (35) functions_aux -> VOID ID add_function LPAREN . params RPAREN insert_number_params body
    (36) functions_aux -> VOID ID add_function LPAREN . RPAREN body
    (39) params -> . simple_type ID add_param
    (40) params -> . simple_type ID add_param COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    RPAREN          shift and go to state 104
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    params                         shift and go to state 103
    simple_type                    shift and go to state 105

state 81

    (37) functions_aux -> simple_type ID add_function LPAREN . RPAREN body
    (38) functions_aux -> simple_type ID add_function LPAREN . params RPAREN insert_number_params body
    (39) params -> . simple_type ID add_param
    (40) params -> . simple_type ID add_param COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    RPAREN          shift and go to state 106
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    simple_type                    shift and go to state 105
    params                         shift and go to state 107

state 82

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 31 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 31 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .)


state 83

    (107) init -> INIT add_init LBRACE start_init statutes_aux . RBRACE

    RBRACE          shift and go to state 108


state 84

    (108) init -> INIT add_init LBRACE start_init dec_vars . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 109
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 85

    (52) statutes_aux -> statutes .
    (53) statutes_aux -> statutes . statutes_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RBRACE          reduce using rule 52 (statutes_aux -> statutes .)
    RETURN          reduce using rule 52 (statutes_aux -> statutes .)
    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes                       shift and go to state 85
    statutes_aux                   shift and go to state 110
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 86

    (45) statutes -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 111


state 87

    (46) statutes -> CALL . call SEMICOLON
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN

    ID              shift and go to state 113

    call                           shift and go to state 112

state 88

    (47) statutes -> read .

    CALL            reduce using rule 47 (statutes -> read .)
    ID              reduce using rule 47 (statutes -> read .)
    READ            reduce using rule 47 (statutes -> read .)
    WRITE           reduce using rule 47 (statutes -> read .)
    IF              reduce using rule 47 (statutes -> read .)
    WHILE           reduce using rule 47 (statutes -> read .)
    FROM            reduce using rule 47 (statutes -> read .)
    RBRACE          reduce using rule 47 (statutes -> read .)
    RETURN          reduce using rule 47 (statutes -> read .)


state 89

    (48) statutes -> write .

    CALL            reduce using rule 48 (statutes -> write .)
    ID              reduce using rule 48 (statutes -> write .)
    READ            reduce using rule 48 (statutes -> write .)
    WRITE           reduce using rule 48 (statutes -> write .)
    IF              reduce using rule 48 (statutes -> write .)
    WHILE           reduce using rule 48 (statutes -> write .)
    FROM            reduce using rule 48 (statutes -> write .)
    RBRACE          reduce using rule 48 (statutes -> write .)
    RETURN          reduce using rule 48 (statutes -> write .)


state 90

    (49) statutes -> condition .

    CALL            reduce using rule 49 (statutes -> condition .)
    ID              reduce using rule 49 (statutes -> condition .)
    READ            reduce using rule 49 (statutes -> condition .)
    WRITE           reduce using rule 49 (statutes -> condition .)
    IF              reduce using rule 49 (statutes -> condition .)
    WHILE           reduce using rule 49 (statutes -> condition .)
    FROM            reduce using rule 49 (statutes -> condition .)
    RBRACE          reduce using rule 49 (statutes -> condition .)
    RETURN          reduce using rule 49 (statutes -> condition .)


state 91

    (50) statutes -> while .

    CALL            reduce using rule 50 (statutes -> while .)
    ID              reduce using rule 50 (statutes -> while .)
    READ            reduce using rule 50 (statutes -> while .)
    WRITE           reduce using rule 50 (statutes -> while .)
    IF              reduce using rule 50 (statutes -> while .)
    WHILE           reduce using rule 50 (statutes -> while .)
    FROM            reduce using rule 50 (statutes -> while .)
    RBRACE          reduce using rule 50 (statutes -> while .)
    RETURN          reduce using rule 50 (statutes -> while .)


state 92

    (51) statutes -> for .

    CALL            reduce using rule 51 (statutes -> for .)
    ID              reduce using rule 51 (statutes -> for .)
    READ            reduce using rule 51 (statutes -> for .)
    WRITE           reduce using rule 51 (statutes -> for .)
    IF              reduce using rule 51 (statutes -> for .)
    WHILE           reduce using rule 51 (statutes -> for .)
    FROM            reduce using rule 51 (statutes -> for .)
    RBRACE          reduce using rule 51 (statutes -> for .)
    RETURN          reduce using rule 51 (statutes -> for .)


state 93

    (54) assignation -> ID . push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> ID . push_var var_aux EQUAL push_op exp pop_op_assign
    (117) push_var -> .

    EQUAL           reduce using rule 117 (push_var -> .)
    POINT           reduce using rule 117 (push_var -> .)
    LBRACKET        reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 114

state 94

    (73) read -> READ . LPAREN read_aux RPAREN SEMICOLON generate_read

    LPAREN          shift and go to state 115


state 95

    (78) write -> WRITE . LPAREN write_aux RPAREN SEMICOLON generate_write

    LPAREN          shift and go to state 116


state 96

    (68) condition -> IF . LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    LPAREN          shift and go to state 117


state 97

    (83) while -> WHILE . while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (134) while_jump -> .

    LPAREN          reduce using rule 134 (while_jump -> .)

    while_jump                     shift and go to state 118

state 98

    (84) for -> FROM . LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    LPAREN          shift and go to state 119


state 99

    (18) vars_simple_type -> ID add_variable COMMA vars_simple_type .

    SEMICOLON       reduce using rule 18 (vars_simple_type -> ID add_variable COMMA vars_simple_type .)


state 100

    (20) vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .

    SEMICOLON       reduce using rule 20 (vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .)


state 101

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . add_array_variable
    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET add_matrix_variable
    (111) add_array_variable -> .

    LBRACKET        shift and go to state 120
    COMMA           reduce using rule 111 (add_array_variable -> .)
    SEMICOLON       reduce using rule 111 (add_array_variable -> .)

    add_array_variable             shift and go to state 121

state 102

    (26) vars_complex_type -> ID add_variable COMMA vars_complex_type .

    SEMICOLON       reduce using rule 26 (vars_complex_type -> ID add_variable COMMA vars_complex_type .)


state 103

    (35) functions_aux -> VOID ID add_function LPAREN params . RPAREN insert_number_params body

    RPAREN          shift and go to state 122


state 104

    (36) functions_aux -> VOID ID add_function LPAREN RPAREN . body
    (41) body -> . LBRACE start_function dec_vars statutes_aux RBRACE end_function
    (42) body -> . LBRACE start_function statutes_aux RBRACE end_function
    (43) body -> . LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> . LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function

    LBRACE          shift and go to state 124

    body                           shift and go to state 123

state 105

    (39) params -> simple_type . ID add_param
    (40) params -> simple_type . ID add_param COMMA params

    ID              shift and go to state 125


state 106

    (37) functions_aux -> simple_type ID add_function LPAREN RPAREN . body
    (41) body -> . LBRACE start_function dec_vars statutes_aux RBRACE end_function
    (42) body -> . LBRACE start_function statutes_aux RBRACE end_function
    (43) body -> . LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> . LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function

    LBRACE          shift and go to state 124

    body                           shift and go to state 126

state 107

    (38) functions_aux -> simple_type ID add_function LPAREN params . RPAREN insert_number_params body

    RPAREN          shift and go to state 127


state 108

    (107) init -> INIT add_init LBRACE start_init statutes_aux RBRACE .

    RBRACE          reduce using rule 107 (init -> INIT add_init LBRACE start_init statutes_aux RBRACE .)


state 109

    (108) init -> INIT add_init LBRACE start_init dec_vars statutes_aux . RBRACE

    RBRACE          shift and go to state 128


state 110

    (53) statutes_aux -> statutes statutes_aux .

    RBRACE          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)
    RETURN          reduce using rule 53 (statutes_aux -> statutes statutes_aux .)


state 111

    (45) statutes -> assignation SEMICOLON .

    CALL            reduce using rule 45 (statutes -> assignation SEMICOLON .)
    ID              reduce using rule 45 (statutes -> assignation SEMICOLON .)
    READ            reduce using rule 45 (statutes -> assignation SEMICOLON .)
    WRITE           reduce using rule 45 (statutes -> assignation SEMICOLON .)
    IF              reduce using rule 45 (statutes -> assignation SEMICOLON .)
    WHILE           reduce using rule 45 (statutes -> assignation SEMICOLON .)
    FROM            reduce using rule 45 (statutes -> assignation SEMICOLON .)
    RBRACE          reduce using rule 45 (statutes -> assignation SEMICOLON .)
    RETURN          reduce using rule 45 (statutes -> assignation SEMICOLON .)


state 112

    (46) statutes -> CALL call . SEMICOLON

    SEMICOLON       shift and go to state 129


state 113

    (62) call -> ID . exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN
    (145) exist_function -> .

    POINT           shift and go to state 131
    LPAREN          reduce using rule 145 (exist_function -> .)

    exist_function                 shift and go to state 130

state 114

    (54) assignation -> ID push_var . EQUAL push_op exp pop_op_assign
    (55) assignation -> ID push_var . var_aux EQUAL push_op exp pop_op_assign
    (56) var_aux -> . POINT ID
    (57) var_aux -> . POINT ID var_aux_2
    (58) var_aux -> . var_aux_2
    (59) var_aux_2 -> . LBRACKET access_array exp verify_array_index RBRACKET var_aux_3

    EQUAL           shift and go to state 132
    POINT           shift and go to state 134
    LBRACKET        shift and go to state 136

    var_aux                        shift and go to state 133
    var_aux_2                      shift and go to state 135

state 115

    (73) read -> READ LPAREN . read_aux RPAREN SEMICOLON generate_read
    (74) read_aux -> . ID push_var var_aux_2
    (75) read_aux -> . ID push_var var_aux_2 COMMA generate_read read_aux
    (76) read_aux -> . ID push_var
    (77) read_aux -> . ID push_var COMMA generate_read read_aux

    ID              shift and go to state 138

    read_aux                       shift and go to state 137

state 116

    (78) write -> WRITE LPAREN . write_aux RPAREN SEMICOLON generate_write
    (79) write_aux -> . exp
    (80) write_aux -> . exp COMMA generate_write write_aux
    (81) write_aux -> . CTESTRING save_string
    (82) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 142
    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    write_aux                      shift and go to state 140
    exp                            shift and go to state 141
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 117

    (68) condition -> IF LPAREN . exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 156
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 118

    (83) while -> WHILE while_jump . LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while

    LPAREN          shift and go to state 157


state 119

    (84) for -> FROM LPAREN . assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign

    ID              shift and go to state 93

    assignation                    shift and go to state 158

state 120

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET add_matrix_variable

    CTEI            shift and go to state 159


state 121

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .

    COMMA           reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .)
    SEMICOLON       reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .)


state 122

    (35) functions_aux -> VOID ID add_function LPAREN params RPAREN . insert_number_params body
    (141) insert_number_params -> .

    LBRACE          reduce using rule 141 (insert_number_params -> .)

    insert_number_params           shift and go to state 160

state 123

    (36) functions_aux -> VOID ID add_function LPAREN RPAREN body .

    FUNCT           reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)
    RBRACE          reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)
    INIT            reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)


state 124

    (41) body -> LBRACE . start_function dec_vars statutes_aux RBRACE end_function
    (42) body -> LBRACE . start_function statutes_aux RBRACE end_function
    (43) body -> LBRACE . start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> LBRACE . start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (142) start_function -> .

    VAR             reduce using rule 142 (start_function -> .)
    CALL            reduce using rule 142 (start_function -> .)
    ID              reduce using rule 142 (start_function -> .)
    READ            reduce using rule 142 (start_function -> .)
    WRITE           reduce using rule 142 (start_function -> .)
    IF              reduce using rule 142 (start_function -> .)
    WHILE           reduce using rule 142 (start_function -> .)
    FROM            reduce using rule 142 (start_function -> .)

    start_function                 shift and go to state 161

state 125

    (39) params -> simple_type ID . add_param
    (40) params -> simple_type ID . add_param COMMA params
    (140) add_param -> .

    COMMA           reduce using rule 140 (add_param -> .)
    RPAREN          reduce using rule 140 (add_param -> .)

    add_param                      shift and go to state 162

state 126

    (37) functions_aux -> simple_type ID add_function LPAREN RPAREN body .

    FUNCT           reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)
    RBRACE          reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)
    INIT            reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)


state 127

    (38) functions_aux -> simple_type ID add_function LPAREN params RPAREN . insert_number_params body
    (141) insert_number_params -> .

    LBRACE          reduce using rule 141 (insert_number_params -> .)

    insert_number_params           shift and go to state 163

state 128

    (108) init -> INIT add_init LBRACE start_init dec_vars statutes_aux RBRACE .

    RBRACE          reduce using rule 108 (init -> INIT add_init LBRACE start_init dec_vars statutes_aux RBRACE .)


state 129

    (46) statutes -> CALL call SEMICOLON .

    CALL            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    ID              reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    READ            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    WRITE           reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    IF              reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    WHILE           reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    FROM            reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    RBRACE          reduce using rule 46 (statutes -> CALL call SEMICOLON .)
    RETURN          reduce using rule 46 (statutes -> CALL call SEMICOLON .)


state 130

    (62) call -> ID exist_function . LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (64) call -> ID exist_function . LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function

    LPAREN          shift and go to state 164


state 131

    (63) call -> ID POINT . ID LPAREN RPAREN
    (65) call -> ID POINT . ID LPAREN call_aux RPAREN

    ID              shift and go to state 165


state 132

    (54) assignation -> ID push_var EQUAL . push_op exp pop_op_assign
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 166

state 133

    (55) assignation -> ID push_var var_aux . EQUAL push_op exp pop_op_assign

    EQUAL           shift and go to state 167


state 134

    (56) var_aux -> POINT . ID
    (57) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 168


state 135

    (58) var_aux -> var_aux_2 .

    EQUAL           reduce using rule 58 (var_aux -> var_aux_2 .)
    TIMES           reduce using rule 58 (var_aux -> var_aux_2 .)
    DIVIDE          reduce using rule 58 (var_aux -> var_aux_2 .)
    PLUS            reduce using rule 58 (var_aux -> var_aux_2 .)
    MINUS           reduce using rule 58 (var_aux -> var_aux_2 .)
    RELOP           reduce using rule 58 (var_aux -> var_aux_2 .)
    OR              reduce using rule 58 (var_aux -> var_aux_2 .)
    AND             reduce using rule 58 (var_aux -> var_aux_2 .)
    COMMA           reduce using rule 58 (var_aux -> var_aux_2 .)
    RPAREN          reduce using rule 58 (var_aux -> var_aux_2 .)
    SEMICOLON       reduce using rule 58 (var_aux -> var_aux_2 .)
    RBRACKET        reduce using rule 58 (var_aux -> var_aux_2 .)


state 136

    (59) var_aux_2 -> LBRACKET . access_array exp verify_array_index RBRACKET var_aux_3
    (149) access_array -> .

    LPAREN          reduce using rule 149 (access_array -> .)
    PLUS            reduce using rule 149 (access_array -> .)
    MINUS           reduce using rule 149 (access_array -> .)
    ID              reduce using rule 149 (access_array -> .)
    CTEI            reduce using rule 149 (access_array -> .)
    CTEF            reduce using rule 149 (access_array -> .)
    CTECHAR         reduce using rule 149 (access_array -> .)

    access_array                   shift and go to state 169

state 137

    (73) read -> READ LPAREN read_aux . RPAREN SEMICOLON generate_read

    RPAREN          shift and go to state 170


state 138

    (74) read_aux -> ID . push_var var_aux_2
    (75) read_aux -> ID . push_var var_aux_2 COMMA generate_read read_aux
    (76) read_aux -> ID . push_var
    (77) read_aux -> ID . push_var COMMA generate_read read_aux
    (117) push_var -> .

    COMMA           reduce using rule 117 (push_var -> .)
    LBRACKET        reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 171

state 139

    (96) factor -> LPAREN . push_paren exp RPAREN pop_paren
    (124) push_paren -> .

    LPAREN          reduce using rule 124 (push_paren -> .)
    PLUS            reduce using rule 124 (push_paren -> .)
    MINUS           reduce using rule 124 (push_paren -> .)
    ID              reduce using rule 124 (push_paren -> .)
    CTEI            reduce using rule 124 (push_paren -> .)
    CTEF            reduce using rule 124 (push_paren -> .)
    CTECHAR         reduce using rule 124 (push_paren -> .)

    push_paren                     shift and go to state 172

state 140

    (78) write -> WRITE LPAREN write_aux . RPAREN SEMICOLON generate_write

    RPAREN          shift and go to state 173


state 141

    (79) write_aux -> exp .
    (80) write_aux -> exp . COMMA generate_write write_aux

    RPAREN          reduce using rule 79 (write_aux -> exp .)
    COMMA           shift and go to state 174


state 142

    (81) write_aux -> CTESTRING . save_string
    (82) write_aux -> CTESTRING . save_string COMMA generate_write write_aux
    (127) save_string -> .

    COMMA           reduce using rule 127 (save_string -> .)
    RPAREN          reduce using rule 127 (save_string -> .)

    save_string                    shift and go to state 175

state 143

    (85) exp -> l_exp . pop_op_lop
    (86) exp -> l_exp . pop_op_lop OR push_op exp
    (87) exp -> l_exp . pop_op_lop AND push_op exp
    (122) pop_op_lop -> .

    OR              reduce using rule 122 (pop_op_lop -> .)
    AND             reduce using rule 122 (pop_op_lop -> .)
    COMMA           reduce using rule 122 (pop_op_lop -> .)
    RPAREN          reduce using rule 122 (pop_op_lop -> .)
    SEMICOLON       reduce using rule 122 (pop_op_lop -> .)
    RBRACKET        reduce using rule 122 (pop_op_lop -> .)

    pop_op_lop                     shift and go to state 176

state 144

    (88) l_exp -> a_exp .
    (89) l_exp -> a_exp . RELOP push_op a_exp pop_op_relop

    OR              reduce using rule 88 (l_exp -> a_exp .)
    AND             reduce using rule 88 (l_exp -> a_exp .)
    COMMA           reduce using rule 88 (l_exp -> a_exp .)
    RPAREN          reduce using rule 88 (l_exp -> a_exp .)
    SEMICOLON       reduce using rule 88 (l_exp -> a_exp .)
    RBRACKET        reduce using rule 88 (l_exp -> a_exp .)
    RELOP           shift and go to state 177


state 145

    (90) a_exp -> term . pop_op_art_n2
    (91) a_exp -> term . pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> term . pop_op_art_n2 MINUS push_op a_exp
    (120) pop_op_art_n2 -> .

    PLUS            reduce using rule 120 (pop_op_art_n2 -> .)
    MINUS           reduce using rule 120 (pop_op_art_n2 -> .)
    RELOP           reduce using rule 120 (pop_op_art_n2 -> .)
    OR              reduce using rule 120 (pop_op_art_n2 -> .)
    AND             reduce using rule 120 (pop_op_art_n2 -> .)
    COMMA           reduce using rule 120 (pop_op_art_n2 -> .)
    RPAREN          reduce using rule 120 (pop_op_art_n2 -> .)
    SEMICOLON       reduce using rule 120 (pop_op_art_n2 -> .)
    RBRACKET        reduce using rule 120 (pop_op_art_n2 -> .)

    pop_op_art_n2                  shift and go to state 178

state 146

    (100) factor_aux -> PLUS . cte
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    ID              shift and go to state 180
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    cte                            shift and go to state 179

state 147

    (101) factor_aux -> MINUS . cte
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    ID              shift and go to state 180
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    cte                            shift and go to state 181

state 148

    (93) term -> factor . pop_op_art_n1
    (94) term -> factor . pop_op_art_n1 TIMES push_op term
    (95) term -> factor . pop_op_art_n1 DIVIDE push_op term
    (119) pop_op_art_n1 -> .

    TIMES           reduce using rule 119 (pop_op_art_n1 -> .)
    DIVIDE          reduce using rule 119 (pop_op_art_n1 -> .)
    PLUS            reduce using rule 119 (pop_op_art_n1 -> .)
    MINUS           reduce using rule 119 (pop_op_art_n1 -> .)
    RELOP           reduce using rule 119 (pop_op_art_n1 -> .)
    OR              reduce using rule 119 (pop_op_art_n1 -> .)
    AND             reduce using rule 119 (pop_op_art_n1 -> .)
    COMMA           reduce using rule 119 (pop_op_art_n1 -> .)
    RPAREN          reduce using rule 119 (pop_op_art_n1 -> .)
    SEMICOLON       reduce using rule 119 (pop_op_art_n1 -> .)
    RBRACKET        reduce using rule 119 (pop_op_art_n1 -> .)

    pop_op_art_n1                  shift and go to state 182

state 149

    (97) factor -> factor_aux .

    TIMES           reduce using rule 97 (factor -> factor_aux .)
    DIVIDE          reduce using rule 97 (factor -> factor_aux .)
    PLUS            reduce using rule 97 (factor -> factor_aux .)
    MINUS           reduce using rule 97 (factor -> factor_aux .)
    RELOP           reduce using rule 97 (factor -> factor_aux .)
    OR              reduce using rule 97 (factor -> factor_aux .)
    AND             reduce using rule 97 (factor -> factor_aux .)
    COMMA           reduce using rule 97 (factor -> factor_aux .)
    RPAREN          reduce using rule 97 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 97 (factor -> factor_aux .)
    RBRACKET        reduce using rule 97 (factor -> factor_aux .)


state 150

    (98) factor -> call .

    TIMES           reduce using rule 98 (factor -> call .)
    DIVIDE          reduce using rule 98 (factor -> call .)
    PLUS            reduce using rule 98 (factor -> call .)
    MINUS           reduce using rule 98 (factor -> call .)
    RELOP           reduce using rule 98 (factor -> call .)
    OR              reduce using rule 98 (factor -> call .)
    AND             reduce using rule 98 (factor -> call .)
    COMMA           reduce using rule 98 (factor -> call .)
    RPAREN          reduce using rule 98 (factor -> call .)
    SEMICOLON       reduce using rule 98 (factor -> call .)
    RBRACKET        reduce using rule 98 (factor -> call .)


state 151

    (99) factor_aux -> cte .

    TIMES           reduce using rule 99 (factor_aux -> cte .)
    DIVIDE          reduce using rule 99 (factor_aux -> cte .)
    PLUS            reduce using rule 99 (factor_aux -> cte .)
    MINUS           reduce using rule 99 (factor_aux -> cte .)
    RELOP           reduce using rule 99 (factor_aux -> cte .)
    OR              reduce using rule 99 (factor_aux -> cte .)
    AND             reduce using rule 99 (factor_aux -> cte .)
    COMMA           reduce using rule 99 (factor_aux -> cte .)
    RPAREN          reduce using rule 99 (factor_aux -> cte .)
    SEMICOLON       reduce using rule 99 (factor_aux -> cte .)
    RBRACKET        reduce using rule 99 (factor_aux -> cte .)


state 152

    (62) call -> ID . exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> ID . POINT ID LPAREN RPAREN
    (64) call -> ID . exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> ID . POINT ID LPAREN call_aux RPAREN
    (102) cte -> ID . push_var
    (103) cte -> ID . push_var var_aux
    (145) exist_function -> .
    (117) push_var -> .

  ! shift/reduce conflict for POINT resolved as shift
    POINT           shift and go to state 131
    LPAREN          reduce using rule 145 (exist_function -> .)
    LBRACKET        reduce using rule 117 (push_var -> .)
    TIMES           reduce using rule 117 (push_var -> .)
    DIVIDE          reduce using rule 117 (push_var -> .)
    PLUS            reduce using rule 117 (push_var -> .)
    MINUS           reduce using rule 117 (push_var -> .)
    RELOP           reduce using rule 117 (push_var -> .)
    OR              reduce using rule 117 (push_var -> .)
    AND             reduce using rule 117 (push_var -> .)
    COMMA           reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)
    SEMICOLON       reduce using rule 117 (push_var -> .)
    RBRACKET        reduce using rule 117 (push_var -> .)

  ! POINT           [ reduce using rule 117 (push_var -> .) ]

    exist_function                 shift and go to state 130
    push_var                       shift and go to state 183

state 153

    (104) cte -> CTEI . push_var
    (117) push_var -> .

    TIMES           reduce using rule 117 (push_var -> .)
    DIVIDE          reduce using rule 117 (push_var -> .)
    PLUS            reduce using rule 117 (push_var -> .)
    MINUS           reduce using rule 117 (push_var -> .)
    RELOP           reduce using rule 117 (push_var -> .)
    OR              reduce using rule 117 (push_var -> .)
    AND             reduce using rule 117 (push_var -> .)
    COMMA           reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)
    SEMICOLON       reduce using rule 117 (push_var -> .)
    RBRACKET        reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 184

state 154

    (105) cte -> CTEF . push_var
    (117) push_var -> .

    TIMES           reduce using rule 117 (push_var -> .)
    DIVIDE          reduce using rule 117 (push_var -> .)
    PLUS            reduce using rule 117 (push_var -> .)
    MINUS           reduce using rule 117 (push_var -> .)
    RELOP           reduce using rule 117 (push_var -> .)
    OR              reduce using rule 117 (push_var -> .)
    AND             reduce using rule 117 (push_var -> .)
    COMMA           reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)
    SEMICOLON       reduce using rule 117 (push_var -> .)
    RBRACKET        reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 185

state 155

    (106) cte -> CTECHAR . push_var
    (117) push_var -> .

    TIMES           reduce using rule 117 (push_var -> .)
    DIVIDE          reduce using rule 117 (push_var -> .)
    PLUS            reduce using rule 117 (push_var -> .)
    MINUS           reduce using rule 117 (push_var -> .)
    RELOP           reduce using rule 117 (push_var -> .)
    OR              reduce using rule 117 (push_var -> .)
    AND             reduce using rule 117 (push_var -> .)
    COMMA           reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)
    SEMICOLON       reduce using rule 117 (push_var -> .)
    RBRACKET        reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 186

state 156

    (68) condition -> IF LPAREN exp . RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    RPAREN          shift and go to state 187


state 157

    (83) while -> WHILE while_jump LPAREN . exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 188
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 158

    (84) for -> FROM LPAREN assignation . RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RPAREN          shift and go to state 189


state 159

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET add_matrix_variable

    RBRACKET        shift and go to state 190


state 160

    (35) functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params . body
    (41) body -> . LBRACE start_function dec_vars statutes_aux RBRACE end_function
    (42) body -> . LBRACE start_function statutes_aux RBRACE end_function
    (43) body -> . LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> . LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function

    LBRACE          shift and go to state 124

    body                           shift and go to state 191

state 161

    (41) body -> LBRACE start_function . dec_vars statutes_aux RBRACE end_function
    (42) body -> LBRACE start_function . statutes_aux RBRACE end_function
    (43) body -> LBRACE start_function . statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> LBRACE start_function . dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (9) dec_vars -> . VAR dec_vars_aux
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    VAR             shift and go to state 24
    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    dec_vars                       shift and go to state 192
    statutes_aux                   shift and go to state 193
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 162

    (39) params -> simple_type ID add_param .
    (40) params -> simple_type ID add_param . COMMA params

    RPAREN          reduce using rule 39 (params -> simple_type ID add_param .)
    COMMA           shift and go to state 194


state 163

    (38) functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params . body
    (41) body -> . LBRACE start_function dec_vars statutes_aux RBRACE end_function
    (42) body -> . LBRACE start_function statutes_aux RBRACE end_function
    (43) body -> . LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (44) body -> . LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function

    LBRACE          shift and go to state 124

    body                           shift and go to state 195

state 164

    (62) call -> ID exist_function LPAREN . push_paren era_function RPAREN pop_paren gosub_function
    (64) call -> ID exist_function LPAREN . push_paren era_function call_aux RPAREN pop_paren gosub_function
    (124) push_paren -> .

    RPAREN          reduce using rule 124 (push_paren -> .)
    LPAREN          reduce using rule 124 (push_paren -> .)
    PLUS            reduce using rule 124 (push_paren -> .)
    MINUS           reduce using rule 124 (push_paren -> .)
    ID              reduce using rule 124 (push_paren -> .)
    CTEI            reduce using rule 124 (push_paren -> .)
    CTEF            reduce using rule 124 (push_paren -> .)
    CTECHAR         reduce using rule 124 (push_paren -> .)

    push_paren                     shift and go to state 196

state 165

    (63) call -> ID POINT ID . LPAREN RPAREN
    (65) call -> ID POINT ID . LPAREN call_aux RPAREN

    LPAREN          shift and go to state 197


state 166

    (54) assignation -> ID push_var EQUAL push_op . exp pop_op_assign
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 198
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 167

    (55) assignation -> ID push_var var_aux EQUAL . push_op exp pop_op_assign
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 199

state 168

    (56) var_aux -> POINT ID .
    (57) var_aux -> POINT ID . var_aux_2
    (59) var_aux_2 -> . LBRACKET access_array exp verify_array_index RBRACKET var_aux_3

    EQUAL           reduce using rule 56 (var_aux -> POINT ID .)
    TIMES           reduce using rule 56 (var_aux -> POINT ID .)
    DIVIDE          reduce using rule 56 (var_aux -> POINT ID .)
    PLUS            reduce using rule 56 (var_aux -> POINT ID .)
    MINUS           reduce using rule 56 (var_aux -> POINT ID .)
    RELOP           reduce using rule 56 (var_aux -> POINT ID .)
    OR              reduce using rule 56 (var_aux -> POINT ID .)
    AND             reduce using rule 56 (var_aux -> POINT ID .)
    COMMA           reduce using rule 56 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 56 (var_aux -> POINT ID .)
    SEMICOLON       reduce using rule 56 (var_aux -> POINT ID .)
    RBRACKET        reduce using rule 56 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 136

    var_aux_2                      shift and go to state 200

state 169

    (59) var_aux_2 -> LBRACKET access_array . exp verify_array_index RBRACKET var_aux_3
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 201
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 170

    (73) read -> READ LPAREN read_aux RPAREN . SEMICOLON generate_read

    SEMICOLON       shift and go to state 202


state 171

    (74) read_aux -> ID push_var . var_aux_2
    (75) read_aux -> ID push_var . var_aux_2 COMMA generate_read read_aux
    (76) read_aux -> ID push_var .
    (77) read_aux -> ID push_var . COMMA generate_read read_aux
    (59) var_aux_2 -> . LBRACKET access_array exp verify_array_index RBRACKET var_aux_3

    RPAREN          reduce using rule 76 (read_aux -> ID push_var .)
    COMMA           shift and go to state 204
    LBRACKET        shift and go to state 136

    var_aux_2                      shift and go to state 203

state 172

    (96) factor -> LPAREN push_paren . exp RPAREN pop_paren
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 205
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 173

    (78) write -> WRITE LPAREN write_aux RPAREN . SEMICOLON generate_write

    SEMICOLON       shift and go to state 206


state 174

    (80) write_aux -> exp COMMA . generate_write write_aux
    (126) generate_write -> .

    CTESTRING       reduce using rule 126 (generate_write -> .)
    LPAREN          reduce using rule 126 (generate_write -> .)
    PLUS            reduce using rule 126 (generate_write -> .)
    MINUS           reduce using rule 126 (generate_write -> .)
    ID              reduce using rule 126 (generate_write -> .)
    CTEI            reduce using rule 126 (generate_write -> .)
    CTEF            reduce using rule 126 (generate_write -> .)
    CTECHAR         reduce using rule 126 (generate_write -> .)

    generate_write                 shift and go to state 207

state 175

    (81) write_aux -> CTESTRING save_string .
    (82) write_aux -> CTESTRING save_string . COMMA generate_write write_aux

    RPAREN          reduce using rule 81 (write_aux -> CTESTRING save_string .)
    COMMA           shift and go to state 208


state 176

    (85) exp -> l_exp pop_op_lop .
    (86) exp -> l_exp pop_op_lop . OR push_op exp
    (87) exp -> l_exp pop_op_lop . AND push_op exp

    COMMA           reduce using rule 85 (exp -> l_exp pop_op_lop .)
    RPAREN          reduce using rule 85 (exp -> l_exp pop_op_lop .)
    SEMICOLON       reduce using rule 85 (exp -> l_exp pop_op_lop .)
    RBRACKET        reduce using rule 85 (exp -> l_exp pop_op_lop .)
    OR              shift and go to state 209
    AND             shift and go to state 210


state 177

    (89) l_exp -> a_exp RELOP . push_op a_exp pop_op_relop
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 211

state 178

    (90) a_exp -> term pop_op_art_n2 .
    (91) a_exp -> term pop_op_art_n2 . PLUS push_op a_exp
    (92) a_exp -> term pop_op_art_n2 . MINUS push_op a_exp

    RELOP           reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    OR              reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    AND             reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    COMMA           reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    RPAREN          reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    SEMICOLON       reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    RBRACKET        reduce using rule 90 (a_exp -> term pop_op_art_n2 .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213


state 179

    (100) factor_aux -> PLUS cte .

    TIMES           reduce using rule 100 (factor_aux -> PLUS cte .)
    DIVIDE          reduce using rule 100 (factor_aux -> PLUS cte .)
    PLUS            reduce using rule 100 (factor_aux -> PLUS cte .)
    MINUS           reduce using rule 100 (factor_aux -> PLUS cte .)
    RELOP           reduce using rule 100 (factor_aux -> PLUS cte .)
    OR              reduce using rule 100 (factor_aux -> PLUS cte .)
    AND             reduce using rule 100 (factor_aux -> PLUS cte .)
    COMMA           reduce using rule 100 (factor_aux -> PLUS cte .)
    RPAREN          reduce using rule 100 (factor_aux -> PLUS cte .)
    SEMICOLON       reduce using rule 100 (factor_aux -> PLUS cte .)
    RBRACKET        reduce using rule 100 (factor_aux -> PLUS cte .)


state 180

    (102) cte -> ID . push_var
    (103) cte -> ID . push_var var_aux
    (117) push_var -> .

    POINT           reduce using rule 117 (push_var -> .)
    LBRACKET        reduce using rule 117 (push_var -> .)
    TIMES           reduce using rule 117 (push_var -> .)
    DIVIDE          reduce using rule 117 (push_var -> .)
    PLUS            reduce using rule 117 (push_var -> .)
    MINUS           reduce using rule 117 (push_var -> .)
    RELOP           reduce using rule 117 (push_var -> .)
    OR              reduce using rule 117 (push_var -> .)
    AND             reduce using rule 117 (push_var -> .)
    COMMA           reduce using rule 117 (push_var -> .)
    RPAREN          reduce using rule 117 (push_var -> .)
    SEMICOLON       reduce using rule 117 (push_var -> .)
    RBRACKET        reduce using rule 117 (push_var -> .)

    push_var                       shift and go to state 183

state 181

    (101) factor_aux -> MINUS cte .

    TIMES           reduce using rule 101 (factor_aux -> MINUS cte .)
    DIVIDE          reduce using rule 101 (factor_aux -> MINUS cte .)
    PLUS            reduce using rule 101 (factor_aux -> MINUS cte .)
    MINUS           reduce using rule 101 (factor_aux -> MINUS cte .)
    RELOP           reduce using rule 101 (factor_aux -> MINUS cte .)
    OR              reduce using rule 101 (factor_aux -> MINUS cte .)
    AND             reduce using rule 101 (factor_aux -> MINUS cte .)
    COMMA           reduce using rule 101 (factor_aux -> MINUS cte .)
    RPAREN          reduce using rule 101 (factor_aux -> MINUS cte .)
    SEMICOLON       reduce using rule 101 (factor_aux -> MINUS cte .)
    RBRACKET        reduce using rule 101 (factor_aux -> MINUS cte .)


state 182

    (93) term -> factor pop_op_art_n1 .
    (94) term -> factor pop_op_art_n1 . TIMES push_op term
    (95) term -> factor pop_op_art_n1 . DIVIDE push_op term

    PLUS            reduce using rule 93 (term -> factor pop_op_art_n1 .)
    MINUS           reduce using rule 93 (term -> factor pop_op_art_n1 .)
    RELOP           reduce using rule 93 (term -> factor pop_op_art_n1 .)
    OR              reduce using rule 93 (term -> factor pop_op_art_n1 .)
    AND             reduce using rule 93 (term -> factor pop_op_art_n1 .)
    COMMA           reduce using rule 93 (term -> factor pop_op_art_n1 .)
    RPAREN          reduce using rule 93 (term -> factor pop_op_art_n1 .)
    SEMICOLON       reduce using rule 93 (term -> factor pop_op_art_n1 .)
    RBRACKET        reduce using rule 93 (term -> factor pop_op_art_n1 .)
    TIMES           shift and go to state 214
    DIVIDE          shift and go to state 215


state 183

    (102) cte -> ID push_var .
    (103) cte -> ID push_var . var_aux
    (56) var_aux -> . POINT ID
    (57) var_aux -> . POINT ID var_aux_2
    (58) var_aux -> . var_aux_2
    (59) var_aux_2 -> . LBRACKET access_array exp verify_array_index RBRACKET var_aux_3

    TIMES           reduce using rule 102 (cte -> ID push_var .)
    DIVIDE          reduce using rule 102 (cte -> ID push_var .)
    PLUS            reduce using rule 102 (cte -> ID push_var .)
    MINUS           reduce using rule 102 (cte -> ID push_var .)
    RELOP           reduce using rule 102 (cte -> ID push_var .)
    OR              reduce using rule 102 (cte -> ID push_var .)
    AND             reduce using rule 102 (cte -> ID push_var .)
    COMMA           reduce using rule 102 (cte -> ID push_var .)
    RPAREN          reduce using rule 102 (cte -> ID push_var .)
    SEMICOLON       reduce using rule 102 (cte -> ID push_var .)
    RBRACKET        reduce using rule 102 (cte -> ID push_var .)
    POINT           shift and go to state 134
    LBRACKET        shift and go to state 136

    var_aux                        shift and go to state 216
    var_aux_2                      shift and go to state 135

state 184

    (104) cte -> CTEI push_var .

    TIMES           reduce using rule 104 (cte -> CTEI push_var .)
    DIVIDE          reduce using rule 104 (cte -> CTEI push_var .)
    PLUS            reduce using rule 104 (cte -> CTEI push_var .)
    MINUS           reduce using rule 104 (cte -> CTEI push_var .)
    RELOP           reduce using rule 104 (cte -> CTEI push_var .)
    OR              reduce using rule 104 (cte -> CTEI push_var .)
    AND             reduce using rule 104 (cte -> CTEI push_var .)
    COMMA           reduce using rule 104 (cte -> CTEI push_var .)
    RPAREN          reduce using rule 104 (cte -> CTEI push_var .)
    SEMICOLON       reduce using rule 104 (cte -> CTEI push_var .)
    RBRACKET        reduce using rule 104 (cte -> CTEI push_var .)


state 185

    (105) cte -> CTEF push_var .

    TIMES           reduce using rule 105 (cte -> CTEF push_var .)
    DIVIDE          reduce using rule 105 (cte -> CTEF push_var .)
    PLUS            reduce using rule 105 (cte -> CTEF push_var .)
    MINUS           reduce using rule 105 (cte -> CTEF push_var .)
    RELOP           reduce using rule 105 (cte -> CTEF push_var .)
    OR              reduce using rule 105 (cte -> CTEF push_var .)
    AND             reduce using rule 105 (cte -> CTEF push_var .)
    COMMA           reduce using rule 105 (cte -> CTEF push_var .)
    RPAREN          reduce using rule 105 (cte -> CTEF push_var .)
    SEMICOLON       reduce using rule 105 (cte -> CTEF push_var .)
    RBRACKET        reduce using rule 105 (cte -> CTEF push_var .)


state 186

    (106) cte -> CTECHAR push_var .

    TIMES           reduce using rule 106 (cte -> CTECHAR push_var .)
    DIVIDE          reduce using rule 106 (cte -> CTECHAR push_var .)
    PLUS            reduce using rule 106 (cte -> CTECHAR push_var .)
    MINUS           reduce using rule 106 (cte -> CTECHAR push_var .)
    RELOP           reduce using rule 106 (cte -> CTECHAR push_var .)
    OR              reduce using rule 106 (cte -> CTECHAR push_var .)
    AND             reduce using rule 106 (cte -> CTECHAR push_var .)
    COMMA           reduce using rule 106 (cte -> CTECHAR push_var .)
    RPAREN          reduce using rule 106 (cte -> CTECHAR push_var .)
    SEMICOLON       reduce using rule 106 (cte -> CTECHAR push_var .)
    RBRACKET        reduce using rule 106 (cte -> CTECHAR push_var .)


state 187

    (68) condition -> IF LPAREN exp RPAREN . if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (129) if_condition -> .

    THEN            reduce using rule 129 (if_condition -> .)

    if_condition                   shift and go to state 217

state 188

    (83) while -> WHILE while_jump LPAREN exp . RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while

    RPAREN          shift and go to state 218


state 189

    (84) for -> FROM LPAREN assignation RPAREN . UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    UNTIL           shift and go to state 219


state 190

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET . add_matrix_variable
    (112) add_matrix_variable -> .

    COMMA           reduce using rule 112 (add_matrix_variable -> .)
    SEMICOLON       reduce using rule 112 (add_matrix_variable -> .)

    add_matrix_variable            shift and go to state 220

state 191

    (35) functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params body .

    FUNCT           reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params body .)
    RBRACE          reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params body .)
    INIT            reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN insert_number_params body .)


state 192

    (41) body -> LBRACE start_function dec_vars . statutes_aux RBRACE end_function
    (44) body -> LBRACE start_function dec_vars . statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 221
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 193

    (42) body -> LBRACE start_function statutes_aux . RBRACE end_function
    (43) body -> LBRACE start_function statutes_aux . RETURN ID return_function SEMICOLON RBRACE end_function

    RBRACE          shift and go to state 222
    RETURN          shift and go to state 223


state 194

    (40) params -> simple_type ID add_param COMMA . params
    (39) params -> . simple_type ID add_param
    (40) params -> . simple_type ID add_param COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41

    simple_type                    shift and go to state 105
    params                         shift and go to state 224

state 195

    (38) functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params body .

    FUNCT           reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params body .)
    RBRACE          reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params body .)
    INIT            reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN insert_number_params body .)


state 196

    (62) call -> ID exist_function LPAREN push_paren . era_function RPAREN pop_paren gosub_function
    (64) call -> ID exist_function LPAREN push_paren . era_function call_aux RPAREN pop_paren gosub_function
    (146) era_function -> .

    RPAREN          reduce using rule 146 (era_function -> .)
    LPAREN          reduce using rule 146 (era_function -> .)
    PLUS            reduce using rule 146 (era_function -> .)
    MINUS           reduce using rule 146 (era_function -> .)
    ID              reduce using rule 146 (era_function -> .)
    CTEI            reduce using rule 146 (era_function -> .)
    CTEF            reduce using rule 146 (era_function -> .)
    CTECHAR         reduce using rule 146 (era_function -> .)

    era_function                   shift and go to state 225

state 197

    (63) call -> ID POINT ID LPAREN . RPAREN
    (65) call -> ID POINT ID LPAREN . call_aux RPAREN
    (66) call_aux -> . exp arg_function
    (67) call_aux -> . exp arg_function COMMA call_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    RPAREN          shift and go to state 226
    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    call_aux                       shift and go to state 227
    exp                            shift and go to state 228
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 198

    (54) assignation -> ID push_var EQUAL push_op exp . pop_op_assign
    (123) pop_op_assign -> .

    SEMICOLON       reduce using rule 123 (pop_op_assign -> .)
    RPAREN          reduce using rule 123 (pop_op_assign -> .)

    pop_op_assign                  shift and go to state 229

state 199

    (55) assignation -> ID push_var var_aux EQUAL push_op . exp pop_op_assign
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 230
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 200

    (57) var_aux -> POINT ID var_aux_2 .

    EQUAL           reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    TIMES           reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    DIVIDE          reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    PLUS            reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    MINUS           reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    RELOP           reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    OR              reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    AND             reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    COMMA           reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    RPAREN          reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    SEMICOLON       reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)
    RBRACKET        reduce using rule 57 (var_aux -> POINT ID var_aux_2 .)


state 201

    (59) var_aux_2 -> LBRACKET access_array exp . verify_array_index RBRACKET var_aux_3
    (150) verify_array_index -> .

    RBRACKET        reduce using rule 150 (verify_array_index -> .)

    verify_array_index             shift and go to state 231

state 202

    (73) read -> READ LPAREN read_aux RPAREN SEMICOLON . generate_read
    (128) generate_read -> .

    CALL            reduce using rule 128 (generate_read -> .)
    ID              reduce using rule 128 (generate_read -> .)
    READ            reduce using rule 128 (generate_read -> .)
    WRITE           reduce using rule 128 (generate_read -> .)
    IF              reduce using rule 128 (generate_read -> .)
    WHILE           reduce using rule 128 (generate_read -> .)
    FROM            reduce using rule 128 (generate_read -> .)
    RBRACE          reduce using rule 128 (generate_read -> .)
    RETURN          reduce using rule 128 (generate_read -> .)

    generate_read                  shift and go to state 232

state 203

    (74) read_aux -> ID push_var var_aux_2 .
    (75) read_aux -> ID push_var var_aux_2 . COMMA generate_read read_aux

    RPAREN          reduce using rule 74 (read_aux -> ID push_var var_aux_2 .)
    COMMA           shift and go to state 233


state 204

    (77) read_aux -> ID push_var COMMA . generate_read read_aux
    (128) generate_read -> .

    ID              reduce using rule 128 (generate_read -> .)

    generate_read                  shift and go to state 234

state 205

    (96) factor -> LPAREN push_paren exp . RPAREN pop_paren

    RPAREN          shift and go to state 235


state 206

    (78) write -> WRITE LPAREN write_aux RPAREN SEMICOLON . generate_write
    (126) generate_write -> .

    CALL            reduce using rule 126 (generate_write -> .)
    ID              reduce using rule 126 (generate_write -> .)
    READ            reduce using rule 126 (generate_write -> .)
    WRITE           reduce using rule 126 (generate_write -> .)
    IF              reduce using rule 126 (generate_write -> .)
    WHILE           reduce using rule 126 (generate_write -> .)
    FROM            reduce using rule 126 (generate_write -> .)
    RBRACE          reduce using rule 126 (generate_write -> .)
    RETURN          reduce using rule 126 (generate_write -> .)

    generate_write                 shift and go to state 236

state 207

    (80) write_aux -> exp COMMA generate_write . write_aux
    (79) write_aux -> . exp
    (80) write_aux -> . exp COMMA generate_write write_aux
    (81) write_aux -> . CTESTRING save_string
    (82) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 142
    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 141
    write_aux                      shift and go to state 237
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 208

    (82) write_aux -> CTESTRING save_string COMMA . generate_write write_aux
    (126) generate_write -> .

    CTESTRING       reduce using rule 126 (generate_write -> .)
    LPAREN          reduce using rule 126 (generate_write -> .)
    PLUS            reduce using rule 126 (generate_write -> .)
    MINUS           reduce using rule 126 (generate_write -> .)
    ID              reduce using rule 126 (generate_write -> .)
    CTEI            reduce using rule 126 (generate_write -> .)
    CTEF            reduce using rule 126 (generate_write -> .)
    CTECHAR         reduce using rule 126 (generate_write -> .)

    generate_write                 shift and go to state 238

state 209

    (86) exp -> l_exp pop_op_lop OR . push_op exp
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 239

state 210

    (87) exp -> l_exp pop_op_lop AND . push_op exp
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 240

state 211

    (89) l_exp -> a_exp RELOP push_op . a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    a_exp                          shift and go to state 241
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 212

    (91) a_exp -> term pop_op_art_n2 PLUS . push_op a_exp
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 242

state 213

    (92) a_exp -> term pop_op_art_n2 MINUS . push_op a_exp
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 243

state 214

    (94) term -> factor pop_op_art_n1 TIMES . push_op term
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 244

state 215

    (95) term -> factor pop_op_art_n1 DIVIDE . push_op term
    (118) push_op -> .

    LPAREN          reduce using rule 118 (push_op -> .)
    PLUS            reduce using rule 118 (push_op -> .)
    MINUS           reduce using rule 118 (push_op -> .)
    ID              reduce using rule 118 (push_op -> .)
    CTEI            reduce using rule 118 (push_op -> .)
    CTEF            reduce using rule 118 (push_op -> .)
    CTECHAR         reduce using rule 118 (push_op -> .)

    push_op                        shift and go to state 245

state 216

    (103) cte -> ID push_var var_aux .

    TIMES           reduce using rule 103 (cte -> ID push_var var_aux .)
    DIVIDE          reduce using rule 103 (cte -> ID push_var var_aux .)
    PLUS            reduce using rule 103 (cte -> ID push_var var_aux .)
    MINUS           reduce using rule 103 (cte -> ID push_var var_aux .)
    RELOP           reduce using rule 103 (cte -> ID push_var var_aux .)
    OR              reduce using rule 103 (cte -> ID push_var var_aux .)
    AND             reduce using rule 103 (cte -> ID push_var var_aux .)
    COMMA           reduce using rule 103 (cte -> ID push_var var_aux .)
    RPAREN          reduce using rule 103 (cte -> ID push_var var_aux .)
    SEMICOLON       reduce using rule 103 (cte -> ID push_var var_aux .)
    RBRACKET        reduce using rule 103 (cte -> ID push_var var_aux .)


state 217

    (68) condition -> IF LPAREN exp RPAREN if_condition . THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    THEN            shift and go to state 246


state 218

    (83) while -> WHILE while_jump LPAREN exp RPAREN . while_condition DO LBRACE statutes_aux RBRACE end_while
    (135) while_condition -> .

    DO              reduce using rule 135 (while_condition -> .)

    while_condition                shift and go to state 247

state 219

    (84) for -> FROM LPAREN assignation RPAREN UNTIL . for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (137) for_jump -> .

    LPAREN          reduce using rule 137 (for_jump -> .)

    for_jump                       shift and go to state 248

state 220

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .

    COMMA           reduce using rule 22 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .)
    SEMICOLON       reduce using rule 22 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .)


state 221

    (41) body -> LBRACE start_function dec_vars statutes_aux . RBRACE end_function
    (44) body -> LBRACE start_function dec_vars statutes_aux . RETURN ID return_function SEMICOLON RBRACE end_function

    RBRACE          shift and go to state 249
    RETURN          shift and go to state 250


state 222

    (42) body -> LBRACE start_function statutes_aux RBRACE . end_function
    (144) end_function -> .

    FUNCT           reduce using rule 144 (end_function -> .)
    RBRACE          reduce using rule 144 (end_function -> .)
    INIT            reduce using rule 144 (end_function -> .)

    end_function                   shift and go to state 251

state 223

    (43) body -> LBRACE start_function statutes_aux RETURN . ID return_function SEMICOLON RBRACE end_function

    ID              shift and go to state 252


state 224

    (40) params -> simple_type ID add_param COMMA params .

    RPAREN          reduce using rule 40 (params -> simple_type ID add_param COMMA params .)


state 225

    (62) call -> ID exist_function LPAREN push_paren era_function . RPAREN pop_paren gosub_function
    (64) call -> ID exist_function LPAREN push_paren era_function . call_aux RPAREN pop_paren gosub_function
    (66) call_aux -> . exp arg_function
    (67) call_aux -> . exp arg_function COMMA call_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    RPAREN          shift and go to state 253
    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    call_aux                       shift and go to state 254
    exp                            shift and go to state 228
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 226

    (63) call -> ID POINT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    TIMES           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    PLUS            reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    MINUS           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RELOP           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    OR              reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    AND             reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    COMMA           reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 63 (call -> ID POINT ID LPAREN RPAREN .)


state 227

    (65) call -> ID POINT ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 255


state 228

    (66) call_aux -> exp . arg_function
    (67) call_aux -> exp . arg_function COMMA call_aux
    (147) arg_function -> .

    COMMA           reduce using rule 147 (arg_function -> .)
    RPAREN          reduce using rule 147 (arg_function -> .)

    arg_function                   shift and go to state 256

state 229

    (54) assignation -> ID push_var EQUAL push_op exp pop_op_assign .

    SEMICOLON       reduce using rule 54 (assignation -> ID push_var EQUAL push_op exp pop_op_assign .)
    RPAREN          reduce using rule 54 (assignation -> ID push_var EQUAL push_op exp pop_op_assign .)


state 230

    (55) assignation -> ID push_var var_aux EQUAL push_op exp . pop_op_assign
    (123) pop_op_assign -> .

    SEMICOLON       reduce using rule 123 (pop_op_assign -> .)
    RPAREN          reduce using rule 123 (pop_op_assign -> .)

    pop_op_assign                  shift and go to state 257

state 231

    (59) var_aux_2 -> LBRACKET access_array exp verify_array_index . RBRACKET var_aux_3

    RBRACKET        shift and go to state 258


state 232

    (73) read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .

    CALL            reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    ID              reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    READ            reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    WRITE           reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    IF              reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    WHILE           reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    FROM            reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    RBRACE          reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    RETURN          reduce using rule 73 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)


state 233

    (75) read_aux -> ID push_var var_aux_2 COMMA . generate_read read_aux
    (128) generate_read -> .

    ID              reduce using rule 128 (generate_read -> .)

    generate_read                  shift and go to state 259

state 234

    (77) read_aux -> ID push_var COMMA generate_read . read_aux
    (74) read_aux -> . ID push_var var_aux_2
    (75) read_aux -> . ID push_var var_aux_2 COMMA generate_read read_aux
    (76) read_aux -> . ID push_var
    (77) read_aux -> . ID push_var COMMA generate_read read_aux

    ID              shift and go to state 138

    read_aux                       shift and go to state 260

state 235

    (96) factor -> LPAREN push_paren exp RPAREN . pop_paren
    (125) pop_paren -> .

    TIMES           reduce using rule 125 (pop_paren -> .)
    DIVIDE          reduce using rule 125 (pop_paren -> .)
    PLUS            reduce using rule 125 (pop_paren -> .)
    MINUS           reduce using rule 125 (pop_paren -> .)
    RELOP           reduce using rule 125 (pop_paren -> .)
    OR              reduce using rule 125 (pop_paren -> .)
    AND             reduce using rule 125 (pop_paren -> .)
    COMMA           reduce using rule 125 (pop_paren -> .)
    RPAREN          reduce using rule 125 (pop_paren -> .)
    SEMICOLON       reduce using rule 125 (pop_paren -> .)
    RBRACKET        reduce using rule 125 (pop_paren -> .)

    pop_paren                      shift and go to state 261

state 236

    (78) write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .

    CALL            reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    ID              reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    READ            reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    WRITE           reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    IF              reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    WHILE           reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    FROM            reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    RBRACE          reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    RETURN          reduce using rule 78 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)


state 237

    (80) write_aux -> exp COMMA generate_write write_aux .

    RPAREN          reduce using rule 80 (write_aux -> exp COMMA generate_write write_aux .)


state 238

    (82) write_aux -> CTESTRING save_string COMMA generate_write . write_aux
    (79) write_aux -> . exp
    (80) write_aux -> . exp COMMA generate_write write_aux
    (81) write_aux -> . CTESTRING save_string
    (82) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 142
    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    write_aux                      shift and go to state 262
    exp                            shift and go to state 141
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 239

    (86) exp -> l_exp pop_op_lop OR push_op . exp
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    l_exp                          shift and go to state 143
    exp                            shift and go to state 263
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 240

    (87) exp -> l_exp pop_op_lop AND push_op . exp
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    l_exp                          shift and go to state 143
    exp                            shift and go to state 264
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 241

    (89) l_exp -> a_exp RELOP push_op a_exp . pop_op_relop
    (121) pop_op_relop -> .

    OR              reduce using rule 121 (pop_op_relop -> .)
    AND             reduce using rule 121 (pop_op_relop -> .)
    COMMA           reduce using rule 121 (pop_op_relop -> .)
    RPAREN          reduce using rule 121 (pop_op_relop -> .)
    SEMICOLON       reduce using rule 121 (pop_op_relop -> .)
    RBRACKET        reduce using rule 121 (pop_op_relop -> .)

    pop_op_relop                   shift and go to state 265

state 242

    (91) a_exp -> term pop_op_art_n2 PLUS push_op . a_exp
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    term                           shift and go to state 145
    a_exp                          shift and go to state 266
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 243

    (92) a_exp -> term pop_op_art_n2 MINUS push_op . a_exp
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    term                           shift and go to state 145
    a_exp                          shift and go to state 267
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 244

    (94) term -> factor pop_op_art_n1 TIMES push_op . term
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    factor                         shift and go to state 148
    term                           shift and go to state 268
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 245

    (95) term -> factor pop_op_art_n1 DIVIDE push_op . term
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    factor                         shift and go to state 148
    term                           shift and go to state 269
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 246

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN . LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    LBRACE          shift and go to state 270


state 247

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition . DO LBRACE statutes_aux RBRACE end_while

    DO              shift and go to state 271


state 248

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump . LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    LPAREN          shift and go to state 272


state 249

    (41) body -> LBRACE start_function dec_vars statutes_aux RBRACE . end_function
    (144) end_function -> .

    FUNCT           reduce using rule 144 (end_function -> .)
    RBRACE          reduce using rule 144 (end_function -> .)
    INIT            reduce using rule 144 (end_function -> .)

    end_function                   shift and go to state 273

state 250

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN . ID return_function SEMICOLON RBRACE end_function

    ID              shift and go to state 274


state 251

    (42) body -> LBRACE start_function statutes_aux RBRACE end_function .

    FUNCT           reduce using rule 42 (body -> LBRACE start_function statutes_aux RBRACE end_function .)
    RBRACE          reduce using rule 42 (body -> LBRACE start_function statutes_aux RBRACE end_function .)
    INIT            reduce using rule 42 (body -> LBRACE start_function statutes_aux RBRACE end_function .)


state 252

    (43) body -> LBRACE start_function statutes_aux RETURN ID . return_function SEMICOLON RBRACE end_function
    (143) return_function -> .

    SEMICOLON       reduce using rule 143 (return_function -> .)

    return_function                shift and go to state 275

state 253

    (62) call -> ID exist_function LPAREN push_paren era_function RPAREN . pop_paren gosub_function
    (125) pop_paren -> .

    SEMICOLON       reduce using rule 125 (pop_paren -> .)
    TIMES           reduce using rule 125 (pop_paren -> .)
    DIVIDE          reduce using rule 125 (pop_paren -> .)
    PLUS            reduce using rule 125 (pop_paren -> .)
    MINUS           reduce using rule 125 (pop_paren -> .)
    RELOP           reduce using rule 125 (pop_paren -> .)
    OR              reduce using rule 125 (pop_paren -> .)
    AND             reduce using rule 125 (pop_paren -> .)
    COMMA           reduce using rule 125 (pop_paren -> .)
    RPAREN          reduce using rule 125 (pop_paren -> .)
    RBRACKET        reduce using rule 125 (pop_paren -> .)

    pop_paren                      shift and go to state 276

state 254

    (64) call -> ID exist_function LPAREN push_paren era_function call_aux . RPAREN pop_paren gosub_function

    RPAREN          shift and go to state 277


state 255

    (65) call -> ID POINT ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 65 (call -> ID POINT ID LPAREN call_aux RPAREN .)


state 256

    (66) call_aux -> exp arg_function .
    (67) call_aux -> exp arg_function . COMMA call_aux

    RPAREN          reduce using rule 66 (call_aux -> exp arg_function .)
    COMMA           shift and go to state 278


state 257

    (55) assignation -> ID push_var var_aux EQUAL push_op exp pop_op_assign .

    SEMICOLON       reduce using rule 55 (assignation -> ID push_var var_aux EQUAL push_op exp pop_op_assign .)
    RPAREN          reduce using rule 55 (assignation -> ID push_var var_aux EQUAL push_op exp pop_op_assign .)


state 258

    (59) var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET . var_aux_3
    (60) var_aux_3 -> . LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix
    (61) var_aux_3 -> . end_array
    (151) end_array -> .

    LBRACKET        shift and go to state 279
    EQUAL           reduce using rule 151 (end_array -> .)
    TIMES           reduce using rule 151 (end_array -> .)
    DIVIDE          reduce using rule 151 (end_array -> .)
    PLUS            reduce using rule 151 (end_array -> .)
    MINUS           reduce using rule 151 (end_array -> .)
    RELOP           reduce using rule 151 (end_array -> .)
    OR              reduce using rule 151 (end_array -> .)
    AND             reduce using rule 151 (end_array -> .)
    COMMA           reduce using rule 151 (end_array -> .)
    RPAREN          reduce using rule 151 (end_array -> .)
    SEMICOLON       reduce using rule 151 (end_array -> .)
    RBRACKET        reduce using rule 151 (end_array -> .)

    var_aux_3                      shift and go to state 280
    end_array                      shift and go to state 281

state 259

    (75) read_aux -> ID push_var var_aux_2 COMMA generate_read . read_aux
    (74) read_aux -> . ID push_var var_aux_2
    (75) read_aux -> . ID push_var var_aux_2 COMMA generate_read read_aux
    (76) read_aux -> . ID push_var
    (77) read_aux -> . ID push_var COMMA generate_read read_aux

    ID              shift and go to state 138

    read_aux                       shift and go to state 282

state 260

    (77) read_aux -> ID push_var COMMA generate_read read_aux .

    RPAREN          reduce using rule 77 (read_aux -> ID push_var COMMA generate_read read_aux .)


state 261

    (96) factor -> LPAREN push_paren exp RPAREN pop_paren .

    TIMES           reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    DIVIDE          reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    PLUS            reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    MINUS           reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RELOP           reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    OR              reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    AND             reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    COMMA           reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RPAREN          reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    SEMICOLON       reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RBRACKET        reduce using rule 96 (factor -> LPAREN push_paren exp RPAREN pop_paren .)


state 262

    (82) write_aux -> CTESTRING save_string COMMA generate_write write_aux .

    RPAREN          reduce using rule 82 (write_aux -> CTESTRING save_string COMMA generate_write write_aux .)


state 263

    (86) exp -> l_exp pop_op_lop OR push_op exp .

    COMMA           reduce using rule 86 (exp -> l_exp pop_op_lop OR push_op exp .)
    RPAREN          reduce using rule 86 (exp -> l_exp pop_op_lop OR push_op exp .)
    SEMICOLON       reduce using rule 86 (exp -> l_exp pop_op_lop OR push_op exp .)
    RBRACKET        reduce using rule 86 (exp -> l_exp pop_op_lop OR push_op exp .)


state 264

    (87) exp -> l_exp pop_op_lop AND push_op exp .

    COMMA           reduce using rule 87 (exp -> l_exp pop_op_lop AND push_op exp .)
    RPAREN          reduce using rule 87 (exp -> l_exp pop_op_lop AND push_op exp .)
    SEMICOLON       reduce using rule 87 (exp -> l_exp pop_op_lop AND push_op exp .)
    RBRACKET        reduce using rule 87 (exp -> l_exp pop_op_lop AND push_op exp .)


state 265

    (89) l_exp -> a_exp RELOP push_op a_exp pop_op_relop .

    OR              reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    AND             reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    COMMA           reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    RPAREN          reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    SEMICOLON       reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    RBRACKET        reduce using rule 89 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)


state 266

    (91) a_exp -> term pop_op_art_n2 PLUS push_op a_exp .

    RELOP           reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    OR              reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    AND             reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    COMMA           reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    RPAREN          reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    SEMICOLON       reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    RBRACKET        reduce using rule 91 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)


state 267

    (92) a_exp -> term pop_op_art_n2 MINUS push_op a_exp .

    RELOP           reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    OR              reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    AND             reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    COMMA           reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    RPAREN          reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    SEMICOLON       reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    RBRACKET        reduce using rule 92 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)


state 268

    (94) term -> factor pop_op_art_n1 TIMES push_op term .

    PLUS            reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    MINUS           reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RELOP           reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    OR              reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    AND             reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    COMMA           reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RPAREN          reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    SEMICOLON       reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RBRACKET        reduce using rule 94 (term -> factor pop_op_art_n1 TIMES push_op term .)


state 269

    (95) term -> factor pop_op_art_n1 DIVIDE push_op term .

    PLUS            reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    MINUS           reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RELOP           reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    OR              reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    AND             reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    COMMA           reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RPAREN          reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    SEMICOLON       reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RBRACKET        reduce using rule 95 (term -> factor pop_op_art_n1 DIVIDE push_op term .)


state 270

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE . statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 283
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 271

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO . LBRACE statutes_aux RBRACE end_while

    LBRACE          shift and go to state 284


state 272

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN . exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 285
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 273

    (41) body -> LBRACE start_function dec_vars statutes_aux RBRACE end_function .

    FUNCT           reduce using rule 41 (body -> LBRACE start_function dec_vars statutes_aux RBRACE end_function .)
    RBRACE          reduce using rule 41 (body -> LBRACE start_function dec_vars statutes_aux RBRACE end_function .)
    INIT            reduce using rule 41 (body -> LBRACE start_function dec_vars statutes_aux RBRACE end_function .)


state 274

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN ID . return_function SEMICOLON RBRACE end_function
    (143) return_function -> .

    SEMICOLON       reduce using rule 143 (return_function -> .)

    return_function                shift and go to state 286

state 275

    (43) body -> LBRACE start_function statutes_aux RETURN ID return_function . SEMICOLON RBRACE end_function

    SEMICOLON       shift and go to state 287


state 276

    (62) call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren . gosub_function
    (148) gosub_function -> .

    SEMICOLON       reduce using rule 148 (gosub_function -> .)
    TIMES           reduce using rule 148 (gosub_function -> .)
    DIVIDE          reduce using rule 148 (gosub_function -> .)
    PLUS            reduce using rule 148 (gosub_function -> .)
    MINUS           reduce using rule 148 (gosub_function -> .)
    RELOP           reduce using rule 148 (gosub_function -> .)
    OR              reduce using rule 148 (gosub_function -> .)
    AND             reduce using rule 148 (gosub_function -> .)
    COMMA           reduce using rule 148 (gosub_function -> .)
    RPAREN          reduce using rule 148 (gosub_function -> .)
    RBRACKET        reduce using rule 148 (gosub_function -> .)

    gosub_function                 shift and go to state 288

state 277

    (64) call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN . pop_paren gosub_function
    (125) pop_paren -> .

    SEMICOLON       reduce using rule 125 (pop_paren -> .)
    TIMES           reduce using rule 125 (pop_paren -> .)
    DIVIDE          reduce using rule 125 (pop_paren -> .)
    PLUS            reduce using rule 125 (pop_paren -> .)
    MINUS           reduce using rule 125 (pop_paren -> .)
    RELOP           reduce using rule 125 (pop_paren -> .)
    OR              reduce using rule 125 (pop_paren -> .)
    AND             reduce using rule 125 (pop_paren -> .)
    COMMA           reduce using rule 125 (pop_paren -> .)
    RPAREN          reduce using rule 125 (pop_paren -> .)
    RBRACKET        reduce using rule 125 (pop_paren -> .)

    pop_paren                      shift and go to state 289

state 278

    (67) call_aux -> exp arg_function COMMA . call_aux
    (66) call_aux -> . exp arg_function
    (67) call_aux -> . exp arg_function COMMA call_aux
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 228
    call_aux                       shift and go to state 290
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 279

    (60) var_aux_3 -> LBRACKET . access_matrix exp verify_matrix_index RBRACKET end_matrix
    (152) access_matrix -> .

    LPAREN          reduce using rule 152 (access_matrix -> .)
    PLUS            reduce using rule 152 (access_matrix -> .)
    MINUS           reduce using rule 152 (access_matrix -> .)
    ID              reduce using rule 152 (access_matrix -> .)
    CTEI            reduce using rule 152 (access_matrix -> .)
    CTEF            reduce using rule 152 (access_matrix -> .)
    CTECHAR         reduce using rule 152 (access_matrix -> .)

    access_matrix                  shift and go to state 291

state 280

    (59) var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .

    EQUAL           reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    TIMES           reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    DIVIDE          reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    PLUS            reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    MINUS           reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    RELOP           reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    OR              reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    AND             reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    COMMA           reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    RPAREN          reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    SEMICOLON       reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)
    RBRACKET        reduce using rule 59 (var_aux_2 -> LBRACKET access_array exp verify_array_index RBRACKET var_aux_3 .)


state 281

    (61) var_aux_3 -> end_array .

    EQUAL           reduce using rule 61 (var_aux_3 -> end_array .)
    TIMES           reduce using rule 61 (var_aux_3 -> end_array .)
    DIVIDE          reduce using rule 61 (var_aux_3 -> end_array .)
    PLUS            reduce using rule 61 (var_aux_3 -> end_array .)
    MINUS           reduce using rule 61 (var_aux_3 -> end_array .)
    RELOP           reduce using rule 61 (var_aux_3 -> end_array .)
    OR              reduce using rule 61 (var_aux_3 -> end_array .)
    AND             reduce using rule 61 (var_aux_3 -> end_array .)
    COMMA           reduce using rule 61 (var_aux_3 -> end_array .)
    RPAREN          reduce using rule 61 (var_aux_3 -> end_array .)
    SEMICOLON       reduce using rule 61 (var_aux_3 -> end_array .)
    RBRACKET        reduce using rule 61 (var_aux_3 -> end_array .)


state 282

    (75) read_aux -> ID push_var var_aux_2 COMMA generate_read read_aux .

    RPAREN          reduce using rule 75 (read_aux -> ID push_var var_aux_2 COMMA generate_read read_aux .)


state 283

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux . RBRACE condition_aux_elif condition_aux_else end_if

    RBRACE          shift and go to state 292


state 284

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE . statutes_aux RBRACE end_while
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 293
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 285

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp . RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RPAREN          shift and go to state 294


state 286

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function . SEMICOLON RBRACE end_function

    SEMICOLON       shift and go to state 295


state 287

    (43) body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON . RBRACE end_function

    RBRACE          shift and go to state 296


state 288

    (62) call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .

    SEMICOLON       reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    TIMES           reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    DIVIDE          reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    PLUS            reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    MINUS           reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    RELOP           reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    OR              reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    AND             reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    COMMA           reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    RPAREN          reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)
    RBRACKET        reduce using rule 62 (call -> ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function .)


state 289

    (64) call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren . gosub_function
    (148) gosub_function -> .

    SEMICOLON       reduce using rule 148 (gosub_function -> .)
    TIMES           reduce using rule 148 (gosub_function -> .)
    DIVIDE          reduce using rule 148 (gosub_function -> .)
    PLUS            reduce using rule 148 (gosub_function -> .)
    MINUS           reduce using rule 148 (gosub_function -> .)
    RELOP           reduce using rule 148 (gosub_function -> .)
    OR              reduce using rule 148 (gosub_function -> .)
    AND             reduce using rule 148 (gosub_function -> .)
    COMMA           reduce using rule 148 (gosub_function -> .)
    RPAREN          reduce using rule 148 (gosub_function -> .)
    RBRACKET        reduce using rule 148 (gosub_function -> .)

    gosub_function                 shift and go to state 297

state 290

    (67) call_aux -> exp arg_function COMMA call_aux .

    RPAREN          reduce using rule 67 (call_aux -> exp arg_function COMMA call_aux .)


state 291

    (60) var_aux_3 -> LBRACKET access_matrix . exp verify_matrix_index RBRACKET end_matrix
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 298
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 292

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE . condition_aux_elif condition_aux_else end_if
    (69) condition_aux_elif -> . ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (70) condition_aux_elif -> . empty
    (109) empty -> .

    ELIF            shift and go to state 300
    ELSE            reduce using rule 109 (empty -> .)
    CALL            reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    WRITE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    condition_aux_elif             shift and go to state 299
    empty                          shift and go to state 301

state 293

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux . RBRACE end_while

    RBRACE          shift and go to state 302


state 294

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN . for_condition DO LBRACE statutes_aux RBRACE end_for
    (138) for_condition -> .

    DO              reduce using rule 138 (for_condition -> .)

    for_condition                  shift and go to state 303

state 295

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON . RBRACE end_function

    RBRACE          shift and go to state 304


state 296

    (43) body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE . end_function
    (144) end_function -> .

    FUNCT           reduce using rule 144 (end_function -> .)
    RBRACE          reduce using rule 144 (end_function -> .)
    INIT            reduce using rule 144 (end_function -> .)

    end_function                   shift and go to state 305

state 297

    (64) call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .

    SEMICOLON       reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    TIMES           reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    DIVIDE          reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    PLUS            reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    MINUS           reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    RELOP           reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    OR              reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    AND             reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    COMMA           reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    RPAREN          reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)
    RBRACKET        reduce using rule 64 (call -> ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function .)


state 298

    (60) var_aux_3 -> LBRACKET access_matrix exp . verify_matrix_index RBRACKET end_matrix
    (153) verify_matrix_index -> .

    RBRACKET        reduce using rule 153 (verify_matrix_index -> .)

    verify_matrix_index            shift and go to state 306

state 299

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif . condition_aux_else end_if
    (71) condition_aux_else -> . ELSE else_condition LBRACE statutes_aux RBRACE
    (72) condition_aux_else -> . empty
    (109) empty -> .

    ELSE            shift and go to state 308
    CALL            reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    WRITE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    condition_aux_else             shift and go to state 307
    empty                          shift and go to state 309

state 300

    (69) condition_aux_elif -> ELIF . LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif

    LPAREN          shift and go to state 310


state 301

    (70) condition_aux_elif -> empty .

    ELSE            reduce using rule 70 (condition_aux_elif -> empty .)
    CALL            reduce using rule 70 (condition_aux_elif -> empty .)
    ID              reduce using rule 70 (condition_aux_elif -> empty .)
    READ            reduce using rule 70 (condition_aux_elif -> empty .)
    WRITE           reduce using rule 70 (condition_aux_elif -> empty .)
    IF              reduce using rule 70 (condition_aux_elif -> empty .)
    WHILE           reduce using rule 70 (condition_aux_elif -> empty .)
    FROM            reduce using rule 70 (condition_aux_elif -> empty .)
    RBRACE          reduce using rule 70 (condition_aux_elif -> empty .)
    RETURN          reduce using rule 70 (condition_aux_elif -> empty .)


state 302

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE . end_while
    (136) end_while -> .

    CALL            reduce using rule 136 (end_while -> .)
    ID              reduce using rule 136 (end_while -> .)
    READ            reduce using rule 136 (end_while -> .)
    WRITE           reduce using rule 136 (end_while -> .)
    IF              reduce using rule 136 (end_while -> .)
    WHILE           reduce using rule 136 (end_while -> .)
    FROM            reduce using rule 136 (end_while -> .)
    RBRACE          reduce using rule 136 (end_while -> .)
    RETURN          reduce using rule 136 (end_while -> .)

    end_while                      shift and go to state 311

state 303

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition . DO LBRACE statutes_aux RBRACE end_for

    DO              shift and go to state 312


state 304

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE . end_function
    (144) end_function -> .

    FUNCT           reduce using rule 144 (end_function -> .)
    RBRACE          reduce using rule 144 (end_function -> .)
    INIT            reduce using rule 144 (end_function -> .)

    end_function                   shift and go to state 313

state 305

    (43) body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .

    FUNCT           reduce using rule 43 (body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)
    RBRACE          reduce using rule 43 (body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)
    INIT            reduce using rule 43 (body -> LBRACE start_function statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)


state 306

    (60) var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index . RBRACKET end_matrix

    RBRACKET        shift and go to state 314


state 307

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else . end_if
    (133) end_if -> .

    CALL            reduce using rule 133 (end_if -> .)
    ID              reduce using rule 133 (end_if -> .)
    READ            reduce using rule 133 (end_if -> .)
    WRITE           reduce using rule 133 (end_if -> .)
    IF              reduce using rule 133 (end_if -> .)
    WHILE           reduce using rule 133 (end_if -> .)
    FROM            reduce using rule 133 (end_if -> .)
    RBRACE          reduce using rule 133 (end_if -> .)
    RETURN          reduce using rule 133 (end_if -> .)

    end_if                         shift and go to state 315

state 308

    (71) condition_aux_else -> ELSE . else_condition LBRACE statutes_aux RBRACE
    (132) else_condition -> .

    LBRACE          reduce using rule 132 (else_condition -> .)

    else_condition                 shift and go to state 316

state 309

    (72) condition_aux_else -> empty .

    CALL            reduce using rule 72 (condition_aux_else -> empty .)
    ID              reduce using rule 72 (condition_aux_else -> empty .)
    READ            reduce using rule 72 (condition_aux_else -> empty .)
    WRITE           reduce using rule 72 (condition_aux_else -> empty .)
    IF              reduce using rule 72 (condition_aux_else -> empty .)
    WHILE           reduce using rule 72 (condition_aux_else -> empty .)
    FROM            reduce using rule 72 (condition_aux_else -> empty .)
    RBRACE          reduce using rule 72 (condition_aux_else -> empty .)
    RETURN          reduce using rule 72 (condition_aux_else -> empty .)


state 310

    (69) condition_aux_elif -> ELIF LPAREN . elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (131) elif_expression -> .

    LPAREN          reduce using rule 131 (elif_expression -> .)
    PLUS            reduce using rule 131 (elif_expression -> .)
    MINUS           reduce using rule 131 (elif_expression -> .)
    ID              reduce using rule 131 (elif_expression -> .)
    CTEI            reduce using rule 131 (elif_expression -> .)
    CTEF            reduce using rule 131 (elif_expression -> .)
    CTECHAR         reduce using rule 131 (elif_expression -> .)

    elif_expression                shift and go to state 317

state 311

    (83) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .

    CALL            reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    ID              reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    READ            reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    WRITE           reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    IF              reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    WHILE           reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    FROM            reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    RBRACE          reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    RETURN          reduce using rule 83 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)


state 312

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO . LBRACE statutes_aux RBRACE end_for

    LBRACE          shift and go to state 318


state 313

    (44) body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .

    FUNCT           reduce using rule 44 (body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)
    RBRACE          reduce using rule 44 (body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)
    INIT            reduce using rule 44 (body -> LBRACE start_function dec_vars statutes_aux RETURN ID return_function SEMICOLON RBRACE end_function .)


state 314

    (60) var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET . end_matrix
    (154) end_matrix -> .

    EQUAL           reduce using rule 154 (end_matrix -> .)
    TIMES           reduce using rule 154 (end_matrix -> .)
    DIVIDE          reduce using rule 154 (end_matrix -> .)
    PLUS            reduce using rule 154 (end_matrix -> .)
    MINUS           reduce using rule 154 (end_matrix -> .)
    RELOP           reduce using rule 154 (end_matrix -> .)
    OR              reduce using rule 154 (end_matrix -> .)
    AND             reduce using rule 154 (end_matrix -> .)
    COMMA           reduce using rule 154 (end_matrix -> .)
    RPAREN          reduce using rule 154 (end_matrix -> .)
    SEMICOLON       reduce using rule 154 (end_matrix -> .)
    RBRACKET        reduce using rule 154 (end_matrix -> .)

    end_matrix                     shift and go to state 319

state 315

    (68) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .

    CALL            reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    ID              reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    READ            reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    WRITE           reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    IF              reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    WHILE           reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    FROM            reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    RBRACE          reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    RETURN          reduce using rule 68 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)


state 316

    (71) condition_aux_else -> ELSE else_condition . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 320


state 317

    (69) condition_aux_elif -> ELIF LPAREN elif_expression . exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (85) exp -> . l_exp pop_op_lop
    (86) exp -> . l_exp pop_op_lop OR push_op exp
    (87) exp -> . l_exp pop_op_lop AND push_op exp
    (88) l_exp -> . a_exp
    (89) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (90) a_exp -> . term pop_op_art_n2
    (91) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (92) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (93) term -> . factor pop_op_art_n1
    (94) term -> . factor pop_op_art_n1 TIMES push_op term
    (95) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (96) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (97) factor -> . factor_aux
    (98) factor -> . call
    (99) factor_aux -> . cte
    (100) factor_aux -> . PLUS cte
    (101) factor_aux -> . MINUS cte
    (62) call -> . ID exist_function LPAREN push_paren era_function RPAREN pop_paren gosub_function
    (63) call -> . ID POINT ID LPAREN RPAREN
    (64) call -> . ID exist_function LPAREN push_paren era_function call_aux RPAREN pop_paren gosub_function
    (65) call -> . ID POINT ID LPAREN call_aux RPAREN
    (102) cte -> . ID push_var
    (103) cte -> . ID push_var var_aux
    (104) cte -> . CTEI push_var
    (105) cte -> . CTEF push_var
    (106) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 139
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147
    ID              shift and go to state 152
    CTEI            shift and go to state 153
    CTEF            shift and go to state 154
    CTECHAR         shift and go to state 155

    exp                            shift and go to state 321
    l_exp                          shift and go to state 143
    a_exp                          shift and go to state 144
    term                           shift and go to state 145
    factor                         shift and go to state 148
    factor_aux                     shift and go to state 149
    call                           shift and go to state 150
    cte                            shift and go to state 151

state 318

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE . statutes_aux RBRACE end_for
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    assignation                    shift and go to state 86
    statutes_aux                   shift and go to state 322
    statutes                       shift and go to state 85
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 319

    (60) var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .

    EQUAL           reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    TIMES           reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    DIVIDE          reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    PLUS            reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    MINUS           reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    RELOP           reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    OR              reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    AND             reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    COMMA           reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    RPAREN          reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    SEMICOLON       reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)
    RBRACKET        reduce using rule 60 (var_aux_3 -> LBRACKET access_matrix exp verify_matrix_index RBRACKET end_matrix .)


state 320

    (71) condition_aux_else -> ELSE else_condition LBRACE . statutes_aux RBRACE
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 323
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 321

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp . RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif

    RPAREN          shift and go to state 324


state 322

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux . RBRACE end_for

    RBRACE          shift and go to state 325


state 323

    (71) condition_aux_else -> ELSE else_condition LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 326


state 324

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN . elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (130) elif_condition -> .

    THEN            reduce using rule 130 (elif_condition -> .)

    elif_condition                 shift and go to state 327

state 325

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE . end_for
    (139) end_for -> .

    CALL            reduce using rule 139 (end_for -> .)
    ID              reduce using rule 139 (end_for -> .)
    READ            reduce using rule 139 (end_for -> .)
    WRITE           reduce using rule 139 (end_for -> .)
    IF              reduce using rule 139 (end_for -> .)
    WHILE           reduce using rule 139 (end_for -> .)
    FROM            reduce using rule 139 (end_for -> .)
    RBRACE          reduce using rule 139 (end_for -> .)
    RETURN          reduce using rule 139 (end_for -> .)

    end_for                        shift and go to state 328

state 326

    (71) condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .

    CALL            reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    ID              reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 71 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)


state 327

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition . THEN LBRACE statutes_aux RBRACE condition_aux_elif

    THEN            shift and go to state 329


state 328

    (84) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .

    CALL            reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    ID              reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    READ            reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    WRITE           reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    IF              reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    WHILE           reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    FROM            reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    RBRACE          reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    RETURN          reduce using rule 84 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)


state 329

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN . LBRACE statutes_aux RBRACE condition_aux_elif

    LBRACE          shift and go to state 330


state 330

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE . statutes_aux RBRACE condition_aux_elif
    (52) statutes_aux -> . statutes
    (53) statutes_aux -> . statutes statutes_aux
    (45) statutes -> . assignation SEMICOLON
    (46) statutes -> . CALL call SEMICOLON
    (47) statutes -> . read
    (48) statutes -> . write
    (49) statutes -> . condition
    (50) statutes -> . while
    (51) statutes -> . for
    (54) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (55) assignation -> . ID push_var var_aux EQUAL push_op exp pop_op_assign
    (73) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (78) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (68) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (83) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (84) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 87
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 97
    FROM            shift and go to state 98

    statutes_aux                   shift and go to state 331
    statutes                       shift and go to state 85
    assignation                    shift and go to state 86
    read                           shift and go to state 88
    write                          shift and go to state 89
    condition                      shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92

state 331

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux . RBRACE condition_aux_elif

    RBRACE          shift and go to state 332


state 332

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE . condition_aux_elif
    (69) condition_aux_elif -> . ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (70) condition_aux_elif -> . empty
    (109) empty -> .

    ELIF            shift and go to state 300
    ELSE            reduce using rule 109 (empty -> .)
    CALL            reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    READ            reduce using rule 109 (empty -> .)
    WRITE           reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FROM            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    condition_aux_elif             shift and go to state 333
    empty                          shift and go to state 301

state 333

    (69) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .

    ELSE            reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    CALL            reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    ID              reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    READ            reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    WRITE           reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    IF              reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    WHILE           reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    FROM            reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    RBRACE          reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    RETURN          reduce using rule 69 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for POINT in state 152 resolved as shift
