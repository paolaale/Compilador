Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program
Rule 2     program_classes -> classes
Rule 3     program_classes -> empty
Rule 4     program_body -> program_body_vars program_body_funct
Rule 5     program_body_vars -> dec_vars
Rule 6     program_body_vars -> empty
Rule 7     program_body_funct -> functions
Rule 8     program_body_funct -> empty
Rule 9     dec_vars -> VAR dec_vars_aux
Rule 10    dec_vars_aux -> dec_vars_simple
Rule 11    dec_vars_aux -> dec_vars_complex
Rule 12    dec_vars_simple -> simple_type vars_simple_type SEMICOLON
Rule 13    dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux
Rule 14    simple_type -> INT
Rule 15    simple_type -> FLOAT
Rule 16    simple_type -> CHAR
Rule 17    vars_simple_type -> ID add_variable
Rule 18    vars_simple_type -> ID add_variable COMMA vars_simple_type
Rule 19    vars_simple_type -> ID vars_simple_type_aux
Rule 20    vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type
Rule 21    vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable
Rule 22    vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable
Rule 23    dec_vars_complex -> OBJECT vars_complex_type SEMICOLON
Rule 24    dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux
Rule 25    vars_complex_type -> ID add_variable
Rule 26    vars_complex_type -> ID add_variable COMMA vars_complex_type
Rule 27    classes -> CLASS OBJECT classes_aux
Rule 28    classes -> CLASS OBJECT classes_aux classes
Rule 29    classes_aux -> add_class LBRACE dec_vars functions RBRACE
Rule 30    classes_aux -> add_class LBRACE functions RBRACE
Rule 31    classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
Rule 32    classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE
Rule 33    functions -> FUNCT functions_aux
Rule 34    functions -> FUNCT functions_aux functions
Rule 35    functions_aux -> VOID ID add_function LPAREN params RPAREN body
Rule 36    functions_aux -> VOID ID add_function LPAREN RPAREN body
Rule 37    functions_aux -> simple_type ID add_function LPAREN RPAREN body
Rule 38    functions_aux -> simple_type ID add_function LPAREN params RPAREN body
Rule 39    params -> simple_type ID add_variable
Rule 40    params -> simple_type ID add_variable COMMA params
Rule 41    params -> simple_type ID params_aux
Rule 42    params -> simple_type ID params_aux COMMA params
Rule 43    params_aux -> LBRACKET RBRACKET add_array_var_params
Rule 44    params_aux -> LBRACKET RBRACKET LBRACKET RBRACKET add_matrix_var_params
Rule 45    body -> LBRACE dec_vars statutes_aux RBRACE
Rule 46    body -> LBRACE statutes_aux RBRACE
Rule 47    body -> LBRACE statutes_aux RETURN ID SEMICOLON RBRACE
Rule 48    body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE
Rule 49    statutes -> assignation SEMICOLON
Rule 50    statutes -> CALL call SEMICOLON
Rule 51    statutes -> read
Rule 52    statutes -> write
Rule 53    statutes -> condition
Rule 54    statutes -> while
Rule 55    statutes -> for
Rule 56    statutes_aux -> statutes
Rule 57    statutes_aux -> statutes statutes_aux
Rule 58    assignation -> ID push_var EQUAL push_op exp pop_op_assign
Rule 59    assignation -> ID var_aux push_var EQUAL push_op exp pop_op_assign
Rule 60    var_aux -> POINT ID
Rule 61    var_aux -> POINT ID var_aux_2
Rule 62    var_aux -> var_aux_2
Rule 63    var_aux_2 -> LBRACKET exp RBRACKET
Rule 64    var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 65    call -> ID LPAREN RPAREN
Rule 66    call -> ID POINT ID LPAREN RPAREN
Rule 67    call -> ID LPAREN call_aux RPAREN
Rule 68    call -> ID POINT ID LPAREN call_aux RPAREN
Rule 69    call_aux -> exp
Rule 70    call_aux -> exp COMMA call_aux
Rule 71    condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
Rule 72    condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
Rule 73    condition_aux_elif -> empty
Rule 74    condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE
Rule 75    condition_aux_else -> empty
Rule 76    read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read
Rule 77    read_aux -> ID push_var
Rule 78    read_aux -> ID push_var COMMA generate_read read_aux
Rule 79    write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
Rule 80    write_aux -> exp
Rule 81    write_aux -> exp COMMA generate_write write_aux
Rule 82    write_aux -> CTESTRING save_string
Rule 83    write_aux -> CTESTRING save_string COMMA generate_write write_aux
Rule 84    while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
Rule 85    for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
Rule 86    exp -> l_exp pop_op_lop
Rule 87    exp -> l_exp pop_op_lop OR push_op exp
Rule 88    exp -> l_exp pop_op_lop AND push_op exp
Rule 89    l_exp -> a_exp
Rule 90    l_exp -> a_exp RELOP push_op a_exp pop_op_relop
Rule 91    a_exp -> term pop_op_art_n2
Rule 92    a_exp -> term pop_op_art_n2 PLUS push_op a_exp
Rule 93    a_exp -> term pop_op_art_n2 MINUS push_op a_exp
Rule 94    term -> factor pop_op_art_n1
Rule 95    term -> factor pop_op_art_n1 TIMES push_op term
Rule 96    term -> factor pop_op_art_n1 DIVIDE push_op term
Rule 97    factor -> LPAREN push_paren exp RPAREN pop_paren
Rule 98    factor -> call
Rule 99    factor -> factor_aux
Rule 100   factor_aux -> cte
Rule 101   factor_aux -> PLUS cte
Rule 102   factor_aux -> MINUS cte
Rule 103   cte -> ID push_var
Rule 104   cte -> ID var_aux push_var
Rule 105   cte -> CTEI push_var
Rule 106   cte -> CTEF push_var
Rule 107   cte -> CTECHAR push_var
Rule 108   init -> INIT add_init LBRACE statutes_aux RBRACE
Rule 109   init -> INIT add_init LBRACE dec_vars statutes_aux RBRACE
Rule 110   empty -> <empty>
Rule 111   add_variable -> <empty>
Rule 112   add_array_variable -> <empty>
Rule 113   add_matrix_variable -> <empty>
Rule 114   add_array_var_params -> <empty>
Rule 115   add_matrix_var_params -> <empty>
Rule 116   add_function -> <empty>
Rule 117   add_init -> <empty>
Rule 118   add_class -> <empty>
Rule 119   add_inherit_class -> <empty>
Rule 120   push_var -> <empty>
Rule 121   push_op -> <empty>
Rule 122   pop_op_art_n1 -> <empty>
Rule 123   pop_op_art_n2 -> <empty>
Rule 124   pop_op_relop -> <empty>
Rule 125   pop_op_lop -> <empty>
Rule 126   pop_op_assign -> <empty>
Rule 127   push_paren -> <empty>
Rule 128   pop_paren -> <empty>
Rule 129   generate_write -> <empty>
Rule 130   save_string -> <empty>
Rule 131   generate_read -> <empty>
Rule 132   if_condition -> <empty>
Rule 133   elif_condition -> <empty>
Rule 134   elif_expression -> <empty>
Rule 135   else_condition -> <empty>
Rule 136   end_if -> <empty>
Rule 137   while_jump -> <empty>
Rule 138   while_condition -> <empty>
Rule 139   end_while -> <empty>
Rule 140   for_jump -> <empty>
Rule 141   for_condition -> <empty>
Rule 142   end_for -> <empty>
Rule 143   end_program -> <empty>

Terminals, with rules where they appear

AND                  : 88
CALL                 : 50
CHAR                 : 16
CLASS                : 27 28
COMMA                : 18 20 26 40 42 70 78 81 83
CTECHAR              : 107
CTEF                 : 106
CTEI                 : 21 22 22 105
CTESTRING            : 82 83
DIVIDE               : 96
DO                   : 84 85
ELIF                 : 72
ELSE                 : 74
END                  : 1
EQUAL                : 58 59
FLOAT                : 15
FROM                 : 85
FUNCT                : 33 34
ID                   : 1 17 18 19 20 25 26 35 36 37 38 39 40 41 42 47 48 58 59 60 61 65 66 66 67 68 68 77 78 103 104
IF                   : 71
INHERITS             : 31 32
INIT                 : 108 109
INT                  : 14
LBRACE               : 1 29 30 31 32 45 46 47 48 71 72 74 84 85 108 109
LBRACKET             : 21 22 22 43 44 44 63 64 64
LPAREN               : 35 36 37 38 65 66 67 68 71 72 76 79 84 85 85 97
MAIN                 : 1
MINUS                : 93 102
OBJECT               : 23 24 27 28 31 32
OR                   : 87
PLUS                 : 92 101
POINT                : 60 61 66 68
PROGRAM              : 1
RBRACE               : 1 29 30 31 32 45 46 47 48 71 72 74 84 85 108 109
RBRACKET             : 21 22 22 43 44 44 63 64 64
READ                 : 76
RELOP                : 90
RETURN               : 47 48
RPAREN               : 35 36 37 38 65 66 67 68 71 72 76 79 84 85 85 97
SEMICOLON            : 12 13 23 24 47 48 49 50 76 79
THEN                 : 71 72
TIMES                : 95
TWOPOINTS            : 1
UNTIL                : 85
VAR                  : 9
VOID                 : 35 36
WHILE                : 84
WRITE                : 79
error                : 

Nonterminals, with rules where they appear

a_exp                : 89 90 90 92 93
add_array_var_params : 43
add_array_variable   : 21
add_class            : 1 29 30
add_function         : 35 36 37 38
add_inherit_class    : 31 32
add_init             : 108 109
add_matrix_var_params : 44
add_matrix_variable  : 22
add_variable         : 17 18 25 26 39 40
assignation          : 49 85
body                 : 35 36 37 38
call                 : 50 98
call_aux             : 67 68 70
classes              : 2 28
classes_aux          : 27 28
condition            : 53
condition_aux_elif   : 71 72
condition_aux_else   : 71
cte                  : 100 101 102
dec_vars             : 5 29 31 45 48 109
dec_vars_aux         : 9 13 24
dec_vars_complex     : 11
dec_vars_simple      : 10
elif_condition       : 72
elif_expression      : 72
else_condition       : 74
empty                : 3 6 8 73 75
end_for              : 85
end_if               : 71
end_program          : 1
end_while            : 84
exp                  : 58 59 63 64 64 69 70 71 72 80 81 84 85 87 88 97
factor               : 94 95 96
factor_aux           : 99
for                  : 55
for_condition        : 85
for_jump             : 85
functions            : 7 29 30 31 32 34
functions_aux        : 33 34
generate_read        : 76 78
generate_write       : 79 81 83
if_condition         : 71
init                 : 1
l_exp                : 86 87 88
params               : 35 38 40 42
params_aux           : 41 42
pop_op_art_n1        : 94 95 96
pop_op_art_n2        : 91 92 93
pop_op_assign        : 58 59
pop_op_lop           : 86 87 88
pop_op_relop         : 90
pop_paren            : 97
program              : 0
program_body         : 1
program_body_funct   : 4
program_body_vars    : 4
program_classes      : 1
push_op              : 58 59 87 88 90 92 93 95 96
push_paren           : 97
push_var             : 58 59 77 78 103 104 105 106 107
read                 : 51
read_aux             : 76 78
save_string          : 82 83
simple_type          : 12 13 37 38 39 40 41 42
statutes             : 56 57
statutes_aux         : 45 46 47 48 57 71 72 74 84 85 108 109
term                 : 91 92 93 95 96
var_aux              : 59 104
var_aux_2            : 61 62
vars_complex_type    : 23 24 26
vars_simple_type     : 12 13 18 20
vars_simple_type_aux : 19 20
while                : 54
while_condition      : 84
while_jump           : 84
write                : 52
write_aux            : 79 81 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program

    TWOPOINTS       shift and go to state 4


state 4

    (1) program -> PROGRAM ID TWOPOINTS . program_classes MAIN add_class LBRACE program_body init RBRACE END end_program
    (2) program_classes -> . classes
    (3) program_classes -> . empty
    (27) classes -> . CLASS OBJECT classes_aux
    (28) classes -> . CLASS OBJECT classes_aux classes
    (110) empty -> .

    CLASS           shift and go to state 8
    MAIN            reduce using rule 110 (empty -> .)

    program_classes                shift and go to state 5
    classes                        shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID TWOPOINTS program_classes . MAIN add_class LBRACE program_body init RBRACE END end_program

    MAIN            shift and go to state 9


state 6

    (2) program_classes -> classes .

    MAIN            reduce using rule 2 (program_classes -> classes .)


state 7

    (3) program_classes -> empty .

    MAIN            reduce using rule 3 (program_classes -> empty .)


state 8

    (27) classes -> CLASS . OBJECT classes_aux
    (28) classes -> CLASS . OBJECT classes_aux classes

    OBJECT          shift and go to state 10


state 9

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN . add_class LBRACE program_body init RBRACE END end_program
    (118) add_class -> .

    LBRACE          reduce using rule 118 (add_class -> .)

    add_class                      shift and go to state 11

state 10

    (27) classes -> CLASS OBJECT . classes_aux
    (28) classes -> CLASS OBJECT . classes_aux classes
    (29) classes_aux -> . add_class LBRACE dec_vars functions RBRACE
    (30) classes_aux -> . add_class LBRACE functions RBRACE
    (31) classes_aux -> . INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> . INHERITS OBJECT add_inherit_class LBRACE functions RBRACE
    (118) add_class -> .

    INHERITS        shift and go to state 14
    LBRACE          reduce using rule 118 (add_class -> .)

    classes_aux                    shift and go to state 12
    add_class                      shift and go to state 13

state 11

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class . LBRACE program_body init RBRACE END end_program

    LBRACE          shift and go to state 15


state 12

    (27) classes -> CLASS OBJECT classes_aux .
    (28) classes -> CLASS OBJECT classes_aux . classes
    (27) classes -> . CLASS OBJECT classes_aux
    (28) classes -> . CLASS OBJECT classes_aux classes

    MAIN            reduce using rule 27 (classes -> CLASS OBJECT classes_aux .)
    CLASS           shift and go to state 8

    classes                        shift and go to state 16

state 13

    (29) classes_aux -> add_class . LBRACE dec_vars functions RBRACE
    (30) classes_aux -> add_class . LBRACE functions RBRACE

    LBRACE          shift and go to state 17


state 14

    (31) classes_aux -> INHERITS . OBJECT add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS . OBJECT add_inherit_class LBRACE functions RBRACE

    OBJECT          shift and go to state 18


state 15

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE . program_body init RBRACE END end_program
    (4) program_body -> . program_body_vars program_body_funct
    (5) program_body_vars -> . dec_vars
    (6) program_body_vars -> . empty
    (9) dec_vars -> . VAR dec_vars_aux
    (110) empty -> .

    VAR             shift and go to state 23
    FUNCT           reduce using rule 110 (empty -> .)
    INIT            reduce using rule 110 (empty -> .)

    program_body                   shift and go to state 19
    program_body_vars              shift and go to state 20
    dec_vars                       shift and go to state 21
    empty                          shift and go to state 22

state 16

    (28) classes -> CLASS OBJECT classes_aux classes .

    MAIN            reduce using rule 28 (classes -> CLASS OBJECT classes_aux classes .)


state 17

    (29) classes_aux -> add_class LBRACE . dec_vars functions RBRACE
    (30) classes_aux -> add_class LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 23
    FUNCT           shift and go to state 26

    dec_vars                       shift and go to state 24
    functions                      shift and go to state 25

state 18

    (31) classes_aux -> INHERITS OBJECT . add_inherit_class LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT . add_inherit_class LBRACE functions RBRACE
    (119) add_inherit_class -> .

    LBRACE          reduce using rule 119 (add_inherit_class -> .)

    add_inherit_class              shift and go to state 27

state 19

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body . init RBRACE END end_program
    (108) init -> . INIT add_init LBRACE statutes_aux RBRACE
    (109) init -> . INIT add_init LBRACE dec_vars statutes_aux RBRACE

    INIT            shift and go to state 29

    init                           shift and go to state 28

state 20

    (4) program_body -> program_body_vars . program_body_funct
    (7) program_body_funct -> . functions
    (8) program_body_funct -> . empty
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions
    (110) empty -> .

    FUNCT           shift and go to state 26
    INIT            reduce using rule 110 (empty -> .)

    program_body_funct             shift and go to state 30
    functions                      shift and go to state 31
    empty                          shift and go to state 32

state 21

    (5) program_body_vars -> dec_vars .

    FUNCT           reduce using rule 5 (program_body_vars -> dec_vars .)
    INIT            reduce using rule 5 (program_body_vars -> dec_vars .)


state 22

    (6) program_body_vars -> empty .

    FUNCT           reduce using rule 6 (program_body_vars -> empty .)
    INIT            reduce using rule 6 (program_body_vars -> empty .)


state 23

    (9) dec_vars -> VAR . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    OBJECT          shift and go to state 37
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    dec_vars_aux                   shift and go to state 33
    dec_vars_simple                shift and go to state 34
    dec_vars_complex               shift and go to state 35
    simple_type                    shift and go to state 36

state 24

    (29) classes_aux -> add_class LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 26

    functions                      shift and go to state 41

state 25

    (30) classes_aux -> add_class LBRACE functions . RBRACE

    RBRACE          shift and go to state 42


state 26

    (33) functions -> FUNCT . functions_aux
    (34) functions -> FUNCT . functions_aux functions
    (35) functions_aux -> . VOID ID add_function LPAREN params RPAREN body
    (36) functions_aux -> . VOID ID add_function LPAREN RPAREN body
    (37) functions_aux -> . simple_type ID add_function LPAREN RPAREN body
    (38) functions_aux -> . simple_type ID add_function LPAREN params RPAREN body
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    VOID            shift and go to state 44
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    functions_aux                  shift and go to state 43
    simple_type                    shift and go to state 45

state 27

    (31) classes_aux -> INHERITS OBJECT add_inherit_class . LBRACE dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT add_inherit_class . LBRACE functions RBRACE

    LBRACE          shift and go to state 46


state 28

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init . RBRACE END end_program

    RBRACE          shift and go to state 47


state 29

    (108) init -> INIT . add_init LBRACE statutes_aux RBRACE
    (109) init -> INIT . add_init LBRACE dec_vars statutes_aux RBRACE
    (117) add_init -> .

    LBRACE          reduce using rule 117 (add_init -> .)

    add_init                       shift and go to state 48

state 30

    (4) program_body -> program_body_vars program_body_funct .

    INIT            reduce using rule 4 (program_body -> program_body_vars program_body_funct .)


state 31

    (7) program_body_funct -> functions .

    INIT            reduce using rule 7 (program_body_funct -> functions .)


state 32

    (8) program_body_funct -> empty .

    INIT            reduce using rule 8 (program_body_funct -> empty .)


state 33

    (9) dec_vars -> VAR dec_vars_aux .

    FUNCT           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    INIT            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    CALL            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    ID              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    READ            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WRITE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    IF              reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    WHILE           reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)
    FROM            reduce using rule 9 (dec_vars -> VAR dec_vars_aux .)


state 34

    (10) dec_vars_aux -> dec_vars_simple .

    FUNCT           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    INIT            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    CALL            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    ID              reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    READ            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    WRITE           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    IF              reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    WHILE           reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)
    FROM            reduce using rule 10 (dec_vars_aux -> dec_vars_simple .)


state 35

    (11) dec_vars_aux -> dec_vars_complex .

    FUNCT           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    INIT            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    CALL            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    ID              reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    READ            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    WRITE           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    IF              reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    WHILE           reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)
    FROM            reduce using rule 11 (dec_vars_aux -> dec_vars_complex .)


state 36

    (12) dec_vars_simple -> simple_type . vars_simple_type SEMICOLON
    (13) dec_vars_simple -> simple_type . vars_simple_type SEMICOLON dec_vars_aux
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 50

    vars_simple_type               shift and go to state 49

state 37

    (23) dec_vars_complex -> OBJECT . vars_complex_type SEMICOLON
    (24) dec_vars_complex -> OBJECT . vars_complex_type SEMICOLON dec_vars_aux
    (25) vars_complex_type -> . ID add_variable
    (26) vars_complex_type -> . ID add_variable COMMA vars_complex_type

    ID              shift and go to state 52

    vars_complex_type              shift and go to state 51

state 38

    (14) simple_type -> INT .

    ID              reduce using rule 14 (simple_type -> INT .)


state 39

    (15) simple_type -> FLOAT .

    ID              reduce using rule 15 (simple_type -> FLOAT .)


state 40

    (16) simple_type -> CHAR .

    ID              reduce using rule 16 (simple_type -> CHAR .)


state 41

    (29) classes_aux -> add_class LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 53


state 42

    (30) classes_aux -> add_class LBRACE functions RBRACE .

    CLASS           reduce using rule 30 (classes_aux -> add_class LBRACE functions RBRACE .)
    MAIN            reduce using rule 30 (classes_aux -> add_class LBRACE functions RBRACE .)


state 43

    (33) functions -> FUNCT functions_aux .
    (34) functions -> FUNCT functions_aux . functions
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    RBRACE          reduce using rule 33 (functions -> FUNCT functions_aux .)
    INIT            reduce using rule 33 (functions -> FUNCT functions_aux .)
    FUNCT           shift and go to state 26

    functions                      shift and go to state 54

state 44

    (35) functions_aux -> VOID . ID add_function LPAREN params RPAREN body
    (36) functions_aux -> VOID . ID add_function LPAREN RPAREN body

    ID              shift and go to state 55


state 45

    (37) functions_aux -> simple_type . ID add_function LPAREN RPAREN body
    (38) functions_aux -> simple_type . ID add_function LPAREN params RPAREN body

    ID              shift and go to state 56


state 46

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE . dec_vars functions RBRACE
    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE . functions RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    VAR             shift and go to state 23
    FUNCT           shift and go to state 26

    dec_vars                       shift and go to state 57
    functions                      shift and go to state 58

state 47

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE . END end_program

    END             shift and go to state 59


state 48

    (108) init -> INIT add_init . LBRACE statutes_aux RBRACE
    (109) init -> INIT add_init . LBRACE dec_vars statutes_aux RBRACE

    LBRACE          shift and go to state 60


state 49

    (12) dec_vars_simple -> simple_type vars_simple_type . SEMICOLON
    (13) dec_vars_simple -> simple_type vars_simple_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 61


state 50

    (17) vars_simple_type -> ID . add_variable
    (18) vars_simple_type -> ID . add_variable COMMA vars_simple_type
    (19) vars_simple_type -> ID . vars_simple_type_aux
    (20) vars_simple_type -> ID . vars_simple_type_aux COMMA vars_simple_type
    (111) add_variable -> .
    (21) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET add_array_variable
    (22) vars_simple_type_aux -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    COMMA           reduce using rule 111 (add_variable -> .)
    SEMICOLON       reduce using rule 111 (add_variable -> .)
    LBRACKET        shift and go to state 64

    add_variable                   shift and go to state 62
    vars_simple_type_aux           shift and go to state 63

state 51

    (23) dec_vars_complex -> OBJECT vars_complex_type . SEMICOLON
    (24) dec_vars_complex -> OBJECT vars_complex_type . SEMICOLON dec_vars_aux

    SEMICOLON       shift and go to state 65


state 52

    (25) vars_complex_type -> ID . add_variable
    (26) vars_complex_type -> ID . add_variable COMMA vars_complex_type
    (111) add_variable -> .

    COMMA           reduce using rule 111 (add_variable -> .)
    SEMICOLON       reduce using rule 111 (add_variable -> .)

    add_variable                   shift and go to state 66

state 53

    (29) classes_aux -> add_class LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 29 (classes_aux -> add_class LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 29 (classes_aux -> add_class LBRACE dec_vars functions RBRACE .)


state 54

    (34) functions -> FUNCT functions_aux functions .

    RBRACE          reduce using rule 34 (functions -> FUNCT functions_aux functions .)
    INIT            reduce using rule 34 (functions -> FUNCT functions_aux functions .)


state 55

    (35) functions_aux -> VOID ID . add_function LPAREN params RPAREN body
    (36) functions_aux -> VOID ID . add_function LPAREN RPAREN body
    (116) add_function -> .

    LPAREN          reduce using rule 116 (add_function -> .)

    add_function                   shift and go to state 67

state 56

    (37) functions_aux -> simple_type ID . add_function LPAREN RPAREN body
    (38) functions_aux -> simple_type ID . add_function LPAREN params RPAREN body
    (116) add_function -> .

    LPAREN          reduce using rule 116 (add_function -> .)

    add_function                   shift and go to state 68

state 57

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars . functions RBRACE
    (33) functions -> . FUNCT functions_aux
    (34) functions -> . FUNCT functions_aux functions

    FUNCT           shift and go to state 26

    functions                      shift and go to state 69

state 58

    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions . RBRACE

    RBRACE          shift and go to state 70


state 59

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END . end_program
    (143) end_program -> .

    $end            reduce using rule 143 (end_program -> .)

    end_program                    shift and go to state 71

state 60

    (108) init -> INIT add_init LBRACE . statutes_aux RBRACE
    (109) init -> INIT add_init LBRACE . dec_vars statutes_aux RBRACE
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (9) dec_vars -> . VAR dec_vars_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    VAR             shift and go to state 23
    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 72
    dec_vars                       shift and go to state 73
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 61

    (12) dec_vars_simple -> simple_type vars_simple_type SEMICOLON .
    (13) dec_vars_simple -> simple_type vars_simple_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    FUNCT           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    INIT            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    CALL            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    ID              reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    READ            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    WRITE           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    IF              reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    WHILE           reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    FROM            reduce using rule 12 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON .)
    OBJECT          shift and go to state 37
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    simple_type                    shift and go to state 36
    dec_vars_aux                   shift and go to state 88
    dec_vars_simple                shift and go to state 34
    dec_vars_complex               shift and go to state 35

state 62

    (17) vars_simple_type -> ID add_variable .
    (18) vars_simple_type -> ID add_variable . COMMA vars_simple_type

    SEMICOLON       reduce using rule 17 (vars_simple_type -> ID add_variable .)
    COMMA           shift and go to state 89


state 63

    (19) vars_simple_type -> ID vars_simple_type_aux .
    (20) vars_simple_type -> ID vars_simple_type_aux . COMMA vars_simple_type

    SEMICOLON       reduce using rule 19 (vars_simple_type -> ID vars_simple_type_aux .)
    COMMA           shift and go to state 90


state 64

    (21) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET add_array_variable
    (22) vars_simple_type_aux -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    CTEI            shift and go to state 91


state 65

    (23) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .
    (24) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON . dec_vars_aux
    (10) dec_vars_aux -> . dec_vars_simple
    (11) dec_vars_aux -> . dec_vars_complex
    (12) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON
    (13) dec_vars_simple -> . simple_type vars_simple_type SEMICOLON dec_vars_aux
    (23) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON
    (24) dec_vars_complex -> . OBJECT vars_complex_type SEMICOLON dec_vars_aux
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    FUNCT           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    INIT            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    CALL            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    ID              reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    READ            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    WRITE           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    IF              reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    WHILE           reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    FROM            reduce using rule 23 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON .)
    OBJECT          shift and go to state 37
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    dec_vars_aux                   shift and go to state 92
    dec_vars_simple                shift and go to state 34
    dec_vars_complex               shift and go to state 35
    simple_type                    shift and go to state 36

state 66

    (25) vars_complex_type -> ID add_variable .
    (26) vars_complex_type -> ID add_variable . COMMA vars_complex_type

    SEMICOLON       reduce using rule 25 (vars_complex_type -> ID add_variable .)
    COMMA           shift and go to state 93


state 67

    (35) functions_aux -> VOID ID add_function . LPAREN params RPAREN body
    (36) functions_aux -> VOID ID add_function . LPAREN RPAREN body

    LPAREN          shift and go to state 94


state 68

    (37) functions_aux -> simple_type ID add_function . LPAREN RPAREN body
    (38) functions_aux -> simple_type ID add_function . LPAREN params RPAREN body

    LPAREN          shift and go to state 95


state 69

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions . RBRACE

    RBRACE          shift and go to state 96


state 70

    (32) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .

    CLASS           reduce using rule 32 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .)
    MAIN            reduce using rule 32 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE functions RBRACE .)


state 71

    (1) program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program .

    $end            reduce using rule 1 (program -> PROGRAM ID TWOPOINTS program_classes MAIN add_class LBRACE program_body init RBRACE END end_program .)


state 72

    (108) init -> INIT add_init LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 97


state 73

    (109) init -> INIT add_init LBRACE dec_vars . statutes_aux RBRACE
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 98
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 74

    (56) statutes_aux -> statutes .
    (57) statutes_aux -> statutes . statutes_aux
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RBRACE          reduce using rule 56 (statutes_aux -> statutes .)
    RETURN          reduce using rule 56 (statutes_aux -> statutes .)
    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes                       shift and go to state 74
    statutes_aux                   shift and go to state 99
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 75

    (49) statutes -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 100


state 76

    (50) statutes -> CALL . call SEMICOLON
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN

    ID              shift and go to state 102

    call                           shift and go to state 101

state 77

    (51) statutes -> read .

    CALL            reduce using rule 51 (statutes -> read .)
    ID              reduce using rule 51 (statutes -> read .)
    READ            reduce using rule 51 (statutes -> read .)
    WRITE           reduce using rule 51 (statutes -> read .)
    IF              reduce using rule 51 (statutes -> read .)
    WHILE           reduce using rule 51 (statutes -> read .)
    FROM            reduce using rule 51 (statutes -> read .)
    RBRACE          reduce using rule 51 (statutes -> read .)
    RETURN          reduce using rule 51 (statutes -> read .)


state 78

    (52) statutes -> write .

    CALL            reduce using rule 52 (statutes -> write .)
    ID              reduce using rule 52 (statutes -> write .)
    READ            reduce using rule 52 (statutes -> write .)
    WRITE           reduce using rule 52 (statutes -> write .)
    IF              reduce using rule 52 (statutes -> write .)
    WHILE           reduce using rule 52 (statutes -> write .)
    FROM            reduce using rule 52 (statutes -> write .)
    RBRACE          reduce using rule 52 (statutes -> write .)
    RETURN          reduce using rule 52 (statutes -> write .)


state 79

    (53) statutes -> condition .

    CALL            reduce using rule 53 (statutes -> condition .)
    ID              reduce using rule 53 (statutes -> condition .)
    READ            reduce using rule 53 (statutes -> condition .)
    WRITE           reduce using rule 53 (statutes -> condition .)
    IF              reduce using rule 53 (statutes -> condition .)
    WHILE           reduce using rule 53 (statutes -> condition .)
    FROM            reduce using rule 53 (statutes -> condition .)
    RBRACE          reduce using rule 53 (statutes -> condition .)
    RETURN          reduce using rule 53 (statutes -> condition .)


state 80

    (54) statutes -> while .

    CALL            reduce using rule 54 (statutes -> while .)
    ID              reduce using rule 54 (statutes -> while .)
    READ            reduce using rule 54 (statutes -> while .)
    WRITE           reduce using rule 54 (statutes -> while .)
    IF              reduce using rule 54 (statutes -> while .)
    WHILE           reduce using rule 54 (statutes -> while .)
    FROM            reduce using rule 54 (statutes -> while .)
    RBRACE          reduce using rule 54 (statutes -> while .)
    RETURN          reduce using rule 54 (statutes -> while .)


state 81

    (55) statutes -> for .

    CALL            reduce using rule 55 (statutes -> for .)
    ID              reduce using rule 55 (statutes -> for .)
    READ            reduce using rule 55 (statutes -> for .)
    WRITE           reduce using rule 55 (statutes -> for .)
    IF              reduce using rule 55 (statutes -> for .)
    WHILE           reduce using rule 55 (statutes -> for .)
    FROM            reduce using rule 55 (statutes -> for .)
    RBRACE          reduce using rule 55 (statutes -> for .)
    RETURN          reduce using rule 55 (statutes -> for .)


state 82

    (58) assignation -> ID . push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> ID . var_aux push_var EQUAL push_op exp pop_op_assign
    (120) push_var -> .
    (60) var_aux -> . POINT ID
    (61) var_aux -> . POINT ID var_aux_2
    (62) var_aux -> . var_aux_2
    (63) var_aux_2 -> . LBRACKET exp RBRACKET
    (64) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    EQUAL           reduce using rule 120 (push_var -> .)
    POINT           shift and go to state 105
    LBRACKET        shift and go to state 107

    push_var                       shift and go to state 103
    var_aux                        shift and go to state 104
    var_aux_2                      shift and go to state 106

state 83

    (76) read -> READ . LPAREN read_aux RPAREN SEMICOLON generate_read

    LPAREN          shift and go to state 108


state 84

    (79) write -> WRITE . LPAREN write_aux RPAREN SEMICOLON generate_write

    LPAREN          shift and go to state 109


state 85

    (71) condition -> IF . LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    LPAREN          shift and go to state 110


state 86

    (84) while -> WHILE . while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (137) while_jump -> .

    LPAREN          reduce using rule 137 (while_jump -> .)

    while_jump                     shift and go to state 111

state 87

    (85) for -> FROM . LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    LPAREN          shift and go to state 112


state 88

    (13) dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .

    FUNCT           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    INIT            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 13 (dec_vars_simple -> simple_type vars_simple_type SEMICOLON dec_vars_aux .)


state 89

    (18) vars_simple_type -> ID add_variable COMMA . vars_simple_type
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 50

    vars_simple_type               shift and go to state 113

state 90

    (20) vars_simple_type -> ID vars_simple_type_aux COMMA . vars_simple_type
    (17) vars_simple_type -> . ID add_variable
    (18) vars_simple_type -> . ID add_variable COMMA vars_simple_type
    (19) vars_simple_type -> . ID vars_simple_type_aux
    (20) vars_simple_type -> . ID vars_simple_type_aux COMMA vars_simple_type

    ID              shift and go to state 50

    vars_simple_type               shift and go to state 114

state 91

    (21) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET add_array_variable
    (22) vars_simple_type_aux -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable

    RBRACKET        shift and go to state 115


state 92

    (24) dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .

    FUNCT           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    INIT            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    CALL            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    ID              reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    READ            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    WRITE           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    IF              reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    WHILE           reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)
    FROM            reduce using rule 24 (dec_vars_complex -> OBJECT vars_complex_type SEMICOLON dec_vars_aux .)


state 93

    (26) vars_complex_type -> ID add_variable COMMA . vars_complex_type
    (25) vars_complex_type -> . ID add_variable
    (26) vars_complex_type -> . ID add_variable COMMA vars_complex_type

    ID              shift and go to state 52

    vars_complex_type              shift and go to state 116

state 94

    (35) functions_aux -> VOID ID add_function LPAREN . params RPAREN body
    (36) functions_aux -> VOID ID add_function LPAREN . RPAREN body
    (39) params -> . simple_type ID add_variable
    (40) params -> . simple_type ID add_variable COMMA params
    (41) params -> . simple_type ID params_aux
    (42) params -> . simple_type ID params_aux COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    RPAREN          shift and go to state 118
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    params                         shift and go to state 117
    simple_type                    shift and go to state 119

state 95

    (37) functions_aux -> simple_type ID add_function LPAREN . RPAREN body
    (38) functions_aux -> simple_type ID add_function LPAREN . params RPAREN body
    (39) params -> . simple_type ID add_variable
    (40) params -> . simple_type ID add_variable COMMA params
    (41) params -> . simple_type ID params_aux
    (42) params -> . simple_type ID params_aux COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    RPAREN          shift and go to state 120
    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    simple_type                    shift and go to state 119
    params                         shift and go to state 121

state 96

    (31) classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .

    CLASS           reduce using rule 31 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .)
    MAIN            reduce using rule 31 (classes_aux -> INHERITS OBJECT add_inherit_class LBRACE dec_vars functions RBRACE .)


state 97

    (108) init -> INIT add_init LBRACE statutes_aux RBRACE .

    RBRACE          reduce using rule 108 (init -> INIT add_init LBRACE statutes_aux RBRACE .)


state 98

    (109) init -> INIT add_init LBRACE dec_vars statutes_aux . RBRACE

    RBRACE          shift and go to state 122


state 99

    (57) statutes_aux -> statutes statutes_aux .

    RBRACE          reduce using rule 57 (statutes_aux -> statutes statutes_aux .)
    RETURN          reduce using rule 57 (statutes_aux -> statutes statutes_aux .)


state 100

    (49) statutes -> assignation SEMICOLON .

    CALL            reduce using rule 49 (statutes -> assignation SEMICOLON .)
    ID              reduce using rule 49 (statutes -> assignation SEMICOLON .)
    READ            reduce using rule 49 (statutes -> assignation SEMICOLON .)
    WRITE           reduce using rule 49 (statutes -> assignation SEMICOLON .)
    IF              reduce using rule 49 (statutes -> assignation SEMICOLON .)
    WHILE           reduce using rule 49 (statutes -> assignation SEMICOLON .)
    FROM            reduce using rule 49 (statutes -> assignation SEMICOLON .)
    RBRACE          reduce using rule 49 (statutes -> assignation SEMICOLON .)
    RETURN          reduce using rule 49 (statutes -> assignation SEMICOLON .)


state 101

    (50) statutes -> CALL call . SEMICOLON

    SEMICOLON       shift and go to state 123


state 102

    (65) call -> ID . LPAREN RPAREN
    (66) call -> ID . POINT ID LPAREN RPAREN
    (67) call -> ID . LPAREN call_aux RPAREN
    (68) call -> ID . POINT ID LPAREN call_aux RPAREN

    LPAREN          shift and go to state 124
    POINT           shift and go to state 125


state 103

    (58) assignation -> ID push_var . EQUAL push_op exp pop_op_assign

    EQUAL           shift and go to state 126


state 104

    (59) assignation -> ID var_aux . push_var EQUAL push_op exp pop_op_assign
    (120) push_var -> .

    EQUAL           reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 127

state 105

    (60) var_aux -> POINT . ID
    (61) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 128


state 106

    (62) var_aux -> var_aux_2 .

    EQUAL           reduce using rule 62 (var_aux -> var_aux_2 .)
    TIMES           reduce using rule 62 (var_aux -> var_aux_2 .)
    DIVIDE          reduce using rule 62 (var_aux -> var_aux_2 .)
    PLUS            reduce using rule 62 (var_aux -> var_aux_2 .)
    MINUS           reduce using rule 62 (var_aux -> var_aux_2 .)
    RELOP           reduce using rule 62 (var_aux -> var_aux_2 .)
    OR              reduce using rule 62 (var_aux -> var_aux_2 .)
    AND             reduce using rule 62 (var_aux -> var_aux_2 .)
    RBRACKET        reduce using rule 62 (var_aux -> var_aux_2 .)
    COMMA           reduce using rule 62 (var_aux -> var_aux_2 .)
    RPAREN          reduce using rule 62 (var_aux -> var_aux_2 .)
    SEMICOLON       reduce using rule 62 (var_aux -> var_aux_2 .)


state 107

    (63) var_aux_2 -> LBRACKET . exp RBRACKET
    (64) var_aux_2 -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 129
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 108

    (76) read -> READ LPAREN . read_aux RPAREN SEMICOLON generate_read
    (77) read_aux -> . ID push_var
    (78) read_aux -> . ID push_var COMMA generate_read read_aux

    ID              shift and go to state 145

    read_aux                       shift and go to state 144

state 109

    (79) write -> WRITE LPAREN . write_aux RPAREN SEMICOLON generate_write
    (80) write_aux -> . exp
    (81) write_aux -> . exp COMMA generate_write write_aux
    (82) write_aux -> . CTESTRING save_string
    (83) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 148
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    write_aux                      shift and go to state 146
    exp                            shift and go to state 147
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 110

    (71) condition -> IF LPAREN . exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 149
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 111

    (84) while -> WHILE while_jump . LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while

    LPAREN          shift and go to state 150


state 112

    (85) for -> FROM LPAREN . assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign

    ID              shift and go to state 82

    assignation                    shift and go to state 151

state 113

    (18) vars_simple_type -> ID add_variable COMMA vars_simple_type .

    SEMICOLON       reduce using rule 18 (vars_simple_type -> ID add_variable COMMA vars_simple_type .)


state 114

    (20) vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .

    SEMICOLON       reduce using rule 20 (vars_simple_type -> ID vars_simple_type_aux COMMA vars_simple_type .)


state 115

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . add_array_variable
    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET add_matrix_variable
    (112) add_array_variable -> .

    LBRACKET        shift and go to state 152
    COMMA           reduce using rule 112 (add_array_variable -> .)
    SEMICOLON       reduce using rule 112 (add_array_variable -> .)

    add_array_variable             shift and go to state 153

state 116

    (26) vars_complex_type -> ID add_variable COMMA vars_complex_type .

    SEMICOLON       reduce using rule 26 (vars_complex_type -> ID add_variable COMMA vars_complex_type .)


state 117

    (35) functions_aux -> VOID ID add_function LPAREN params . RPAREN body

    RPAREN          shift and go to state 154


state 118

    (36) functions_aux -> VOID ID add_function LPAREN RPAREN . body
    (45) body -> . LBRACE dec_vars statutes_aux RBRACE
    (46) body -> . LBRACE statutes_aux RBRACE
    (47) body -> . LBRACE statutes_aux RETURN ID SEMICOLON RBRACE
    (48) body -> . LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE

    LBRACE          shift and go to state 156

    body                           shift and go to state 155

state 119

    (39) params -> simple_type . ID add_variable
    (40) params -> simple_type . ID add_variable COMMA params
    (41) params -> simple_type . ID params_aux
    (42) params -> simple_type . ID params_aux COMMA params

    ID              shift and go to state 157


state 120

    (37) functions_aux -> simple_type ID add_function LPAREN RPAREN . body
    (45) body -> . LBRACE dec_vars statutes_aux RBRACE
    (46) body -> . LBRACE statutes_aux RBRACE
    (47) body -> . LBRACE statutes_aux RETURN ID SEMICOLON RBRACE
    (48) body -> . LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE

    LBRACE          shift and go to state 156

    body                           shift and go to state 158

state 121

    (38) functions_aux -> simple_type ID add_function LPAREN params . RPAREN body

    RPAREN          shift and go to state 159


state 122

    (109) init -> INIT add_init LBRACE dec_vars statutes_aux RBRACE .

    RBRACE          reduce using rule 109 (init -> INIT add_init LBRACE dec_vars statutes_aux RBRACE .)


state 123

    (50) statutes -> CALL call SEMICOLON .

    CALL            reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    ID              reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    READ            reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    WRITE           reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    IF              reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    WHILE           reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    FROM            reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    RBRACE          reduce using rule 50 (statutes -> CALL call SEMICOLON .)
    RETURN          reduce using rule 50 (statutes -> CALL call SEMICOLON .)


state 124

    (65) call -> ID LPAREN . RPAREN
    (67) call -> ID LPAREN . call_aux RPAREN
    (69) call_aux -> . exp
    (70) call_aux -> . exp COMMA call_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    RPAREN          shift and go to state 160
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    call_aux                       shift and go to state 161
    exp                            shift and go to state 162
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 125

    (66) call -> ID POINT . ID LPAREN RPAREN
    (68) call -> ID POINT . ID LPAREN call_aux RPAREN

    ID              shift and go to state 163


state 126

    (58) assignation -> ID push_var EQUAL . push_op exp pop_op_assign
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 164

state 127

    (59) assignation -> ID var_aux push_var . EQUAL push_op exp pop_op_assign

    EQUAL           shift and go to state 165


state 128

    (60) var_aux -> POINT ID .
    (61) var_aux -> POINT ID . var_aux_2
    (63) var_aux_2 -> . LBRACKET exp RBRACKET
    (64) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    EQUAL           reduce using rule 60 (var_aux -> POINT ID .)
    TIMES           reduce using rule 60 (var_aux -> POINT ID .)
    DIVIDE          reduce using rule 60 (var_aux -> POINT ID .)
    PLUS            reduce using rule 60 (var_aux -> POINT ID .)
    MINUS           reduce using rule 60 (var_aux -> POINT ID .)
    RELOP           reduce using rule 60 (var_aux -> POINT ID .)
    OR              reduce using rule 60 (var_aux -> POINT ID .)
    AND             reduce using rule 60 (var_aux -> POINT ID .)
    RBRACKET        reduce using rule 60 (var_aux -> POINT ID .)
    COMMA           reduce using rule 60 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 60 (var_aux -> POINT ID .)
    SEMICOLON       reduce using rule 60 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 107

    var_aux_2                      shift and go to state 166

state 129

    (63) var_aux_2 -> LBRACKET exp . RBRACKET
    (64) var_aux_2 -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET

    RBRACKET        shift and go to state 167


state 130

    (86) exp -> l_exp . pop_op_lop
    (87) exp -> l_exp . pop_op_lop OR push_op exp
    (88) exp -> l_exp . pop_op_lop AND push_op exp
    (125) pop_op_lop -> .

    OR              reduce using rule 125 (pop_op_lop -> .)
    AND             reduce using rule 125 (pop_op_lop -> .)
    RBRACKET        reduce using rule 125 (pop_op_lop -> .)
    COMMA           reduce using rule 125 (pop_op_lop -> .)
    RPAREN          reduce using rule 125 (pop_op_lop -> .)
    SEMICOLON       reduce using rule 125 (pop_op_lop -> .)

    pop_op_lop                     shift and go to state 168

state 131

    (89) l_exp -> a_exp .
    (90) l_exp -> a_exp . RELOP push_op a_exp pop_op_relop

    OR              reduce using rule 89 (l_exp -> a_exp .)
    AND             reduce using rule 89 (l_exp -> a_exp .)
    RBRACKET        reduce using rule 89 (l_exp -> a_exp .)
    COMMA           reduce using rule 89 (l_exp -> a_exp .)
    RPAREN          reduce using rule 89 (l_exp -> a_exp .)
    SEMICOLON       reduce using rule 89 (l_exp -> a_exp .)
    RELOP           shift and go to state 169


state 132

    (91) a_exp -> term . pop_op_art_n2
    (92) a_exp -> term . pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> term . pop_op_art_n2 MINUS push_op a_exp
    (123) pop_op_art_n2 -> .

    PLUS            reduce using rule 123 (pop_op_art_n2 -> .)
    MINUS           reduce using rule 123 (pop_op_art_n2 -> .)
    RELOP           reduce using rule 123 (pop_op_art_n2 -> .)
    OR              reduce using rule 123 (pop_op_art_n2 -> .)
    AND             reduce using rule 123 (pop_op_art_n2 -> .)
    RBRACKET        reduce using rule 123 (pop_op_art_n2 -> .)
    COMMA           reduce using rule 123 (pop_op_art_n2 -> .)
    RPAREN          reduce using rule 123 (pop_op_art_n2 -> .)
    SEMICOLON       reduce using rule 123 (pop_op_art_n2 -> .)

    pop_op_art_n2                  shift and go to state 170

state 133

    (101) factor_aux -> PLUS . cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    ID              shift and go to state 172
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    cte                            shift and go to state 171

state 134

    (102) factor_aux -> MINUS . cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    ID              shift and go to state 172
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    cte                            shift and go to state 173

state 135

    (94) term -> factor . pop_op_art_n1
    (95) term -> factor . pop_op_art_n1 TIMES push_op term
    (96) term -> factor . pop_op_art_n1 DIVIDE push_op term
    (122) pop_op_art_n1 -> .

    TIMES           reduce using rule 122 (pop_op_art_n1 -> .)
    DIVIDE          reduce using rule 122 (pop_op_art_n1 -> .)
    PLUS            reduce using rule 122 (pop_op_art_n1 -> .)
    MINUS           reduce using rule 122 (pop_op_art_n1 -> .)
    RELOP           reduce using rule 122 (pop_op_art_n1 -> .)
    OR              reduce using rule 122 (pop_op_art_n1 -> .)
    AND             reduce using rule 122 (pop_op_art_n1 -> .)
    RBRACKET        reduce using rule 122 (pop_op_art_n1 -> .)
    COMMA           reduce using rule 122 (pop_op_art_n1 -> .)
    RPAREN          reduce using rule 122 (pop_op_art_n1 -> .)
    SEMICOLON       reduce using rule 122 (pop_op_art_n1 -> .)

    pop_op_art_n1                  shift and go to state 174

state 136

    (97) factor -> LPAREN . push_paren exp RPAREN pop_paren
    (127) push_paren -> .

    LPAREN          reduce using rule 127 (push_paren -> .)
    ID              reduce using rule 127 (push_paren -> .)
    PLUS            reduce using rule 127 (push_paren -> .)
    MINUS           reduce using rule 127 (push_paren -> .)
    CTEI            reduce using rule 127 (push_paren -> .)
    CTEF            reduce using rule 127 (push_paren -> .)
    CTECHAR         reduce using rule 127 (push_paren -> .)

    push_paren                     shift and go to state 175

state 137

    (98) factor -> call .

    TIMES           reduce using rule 98 (factor -> call .)
    DIVIDE          reduce using rule 98 (factor -> call .)
    PLUS            reduce using rule 98 (factor -> call .)
    MINUS           reduce using rule 98 (factor -> call .)
    RELOP           reduce using rule 98 (factor -> call .)
    OR              reduce using rule 98 (factor -> call .)
    AND             reduce using rule 98 (factor -> call .)
    RBRACKET        reduce using rule 98 (factor -> call .)
    COMMA           reduce using rule 98 (factor -> call .)
    RPAREN          reduce using rule 98 (factor -> call .)
    SEMICOLON       reduce using rule 98 (factor -> call .)


state 138

    (99) factor -> factor_aux .

    TIMES           reduce using rule 99 (factor -> factor_aux .)
    DIVIDE          reduce using rule 99 (factor -> factor_aux .)
    PLUS            reduce using rule 99 (factor -> factor_aux .)
    MINUS           reduce using rule 99 (factor -> factor_aux .)
    RELOP           reduce using rule 99 (factor -> factor_aux .)
    OR              reduce using rule 99 (factor -> factor_aux .)
    AND             reduce using rule 99 (factor -> factor_aux .)
    RBRACKET        reduce using rule 99 (factor -> factor_aux .)
    COMMA           reduce using rule 99 (factor -> factor_aux .)
    RPAREN          reduce using rule 99 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 99 (factor -> factor_aux .)


state 139

    (65) call -> ID . LPAREN RPAREN
    (66) call -> ID . POINT ID LPAREN RPAREN
    (67) call -> ID . LPAREN call_aux RPAREN
    (68) call -> ID . POINT ID LPAREN call_aux RPAREN
    (103) cte -> ID . push_var
    (104) cte -> ID . var_aux push_var
    (120) push_var -> .
    (60) var_aux -> . POINT ID
    (61) var_aux -> . POINT ID var_aux_2
    (62) var_aux -> . var_aux_2
    (63) var_aux_2 -> . LBRACKET exp RBRACKET
    (64) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    LPAREN          shift and go to state 124
    POINT           shift and go to state 176
    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)
    LBRACKET        shift and go to state 107

    push_var                       shift and go to state 177
    var_aux                        shift and go to state 178
    var_aux_2                      shift and go to state 106

state 140

    (100) factor_aux -> cte .

    TIMES           reduce using rule 100 (factor_aux -> cte .)
    DIVIDE          reduce using rule 100 (factor_aux -> cte .)
    PLUS            reduce using rule 100 (factor_aux -> cte .)
    MINUS           reduce using rule 100 (factor_aux -> cte .)
    RELOP           reduce using rule 100 (factor_aux -> cte .)
    OR              reduce using rule 100 (factor_aux -> cte .)
    AND             reduce using rule 100 (factor_aux -> cte .)
    RBRACKET        reduce using rule 100 (factor_aux -> cte .)
    COMMA           reduce using rule 100 (factor_aux -> cte .)
    RPAREN          reduce using rule 100 (factor_aux -> cte .)
    SEMICOLON       reduce using rule 100 (factor_aux -> cte .)


state 141

    (105) cte -> CTEI . push_var
    (120) push_var -> .

    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 179

state 142

    (106) cte -> CTEF . push_var
    (120) push_var -> .

    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 180

state 143

    (107) cte -> CTECHAR . push_var
    (120) push_var -> .

    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 181

state 144

    (76) read -> READ LPAREN read_aux . RPAREN SEMICOLON generate_read

    RPAREN          shift and go to state 182


state 145

    (77) read_aux -> ID . push_var
    (78) read_aux -> ID . push_var COMMA generate_read read_aux
    (120) push_var -> .

    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 183

state 146

    (79) write -> WRITE LPAREN write_aux . RPAREN SEMICOLON generate_write

    RPAREN          shift and go to state 184


state 147

    (80) write_aux -> exp .
    (81) write_aux -> exp . COMMA generate_write write_aux

    RPAREN          reduce using rule 80 (write_aux -> exp .)
    COMMA           shift and go to state 185


state 148

    (82) write_aux -> CTESTRING . save_string
    (83) write_aux -> CTESTRING . save_string COMMA generate_write write_aux
    (130) save_string -> .

    COMMA           reduce using rule 130 (save_string -> .)
    RPAREN          reduce using rule 130 (save_string -> .)

    save_string                    shift and go to state 186

state 149

    (71) condition -> IF LPAREN exp . RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    RPAREN          shift and go to state 187


state 150

    (84) while -> WHILE while_jump LPAREN . exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 188
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 151

    (85) for -> FROM LPAREN assignation . RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RPAREN          shift and go to state 189


state 152

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET add_matrix_variable

    CTEI            shift and go to state 190


state 153

    (21) vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .

    COMMA           reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .)
    SEMICOLON       reduce using rule 21 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET add_array_variable .)


state 154

    (35) functions_aux -> VOID ID add_function LPAREN params RPAREN . body
    (45) body -> . LBRACE dec_vars statutes_aux RBRACE
    (46) body -> . LBRACE statutes_aux RBRACE
    (47) body -> . LBRACE statutes_aux RETURN ID SEMICOLON RBRACE
    (48) body -> . LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE

    LBRACE          shift and go to state 156

    body                           shift and go to state 191

state 155

    (36) functions_aux -> VOID ID add_function LPAREN RPAREN body .

    FUNCT           reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)
    RBRACE          reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)
    INIT            reduce using rule 36 (functions_aux -> VOID ID add_function LPAREN RPAREN body .)


state 156

    (45) body -> LBRACE . dec_vars statutes_aux RBRACE
    (46) body -> LBRACE . statutes_aux RBRACE
    (47) body -> LBRACE . statutes_aux RETURN ID SEMICOLON RBRACE
    (48) body -> LBRACE . dec_vars statutes_aux RETURN ID SEMICOLON RBRACE
    (9) dec_vars -> . VAR dec_vars_aux
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    VAR             shift and go to state 23
    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    dec_vars                       shift and go to state 192
    statutes_aux                   shift and go to state 193
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 157

    (39) params -> simple_type ID . add_variable
    (40) params -> simple_type ID . add_variable COMMA params
    (41) params -> simple_type ID . params_aux
    (42) params -> simple_type ID . params_aux COMMA params
    (111) add_variable -> .
    (43) params_aux -> . LBRACKET RBRACKET add_array_var_params
    (44) params_aux -> . LBRACKET RBRACKET LBRACKET RBRACKET add_matrix_var_params

    COMMA           reduce using rule 111 (add_variable -> .)
    RPAREN          reduce using rule 111 (add_variable -> .)
    LBRACKET        shift and go to state 196

    add_variable                   shift and go to state 194
    params_aux                     shift and go to state 195

state 158

    (37) functions_aux -> simple_type ID add_function LPAREN RPAREN body .

    FUNCT           reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)
    RBRACE          reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)
    INIT            reduce using rule 37 (functions_aux -> simple_type ID add_function LPAREN RPAREN body .)


state 159

    (38) functions_aux -> simple_type ID add_function LPAREN params RPAREN . body
    (45) body -> . LBRACE dec_vars statutes_aux RBRACE
    (46) body -> . LBRACE statutes_aux RBRACE
    (47) body -> . LBRACE statutes_aux RETURN ID SEMICOLON RBRACE
    (48) body -> . LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE

    LBRACE          shift and go to state 156

    body                           shift and go to state 197

state 160

    (65) call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 65 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 65 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 65 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 65 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 65 (call -> ID LPAREN RPAREN .)
    RELOP           reduce using rule 65 (call -> ID LPAREN RPAREN .)
    OR              reduce using rule 65 (call -> ID LPAREN RPAREN .)
    AND             reduce using rule 65 (call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 65 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 65 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 65 (call -> ID LPAREN RPAREN .)


state 161

    (67) call -> ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 198


state 162

    (69) call_aux -> exp .
    (70) call_aux -> exp . COMMA call_aux

    RPAREN          reduce using rule 69 (call_aux -> exp .)
    COMMA           shift and go to state 199


state 163

    (66) call -> ID POINT ID . LPAREN RPAREN
    (68) call -> ID POINT ID . LPAREN call_aux RPAREN

    LPAREN          shift and go to state 200


state 164

    (58) assignation -> ID push_var EQUAL push_op . exp pop_op_assign
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 201
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 165

    (59) assignation -> ID var_aux push_var EQUAL . push_op exp pop_op_assign
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 202

state 166

    (61) var_aux -> POINT ID var_aux_2 .

    EQUAL           reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    TIMES           reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    DIVIDE          reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    PLUS            reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    MINUS           reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    RELOP           reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    OR              reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    AND             reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    RBRACKET        reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    COMMA           reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    RPAREN          reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)
    SEMICOLON       reduce using rule 61 (var_aux -> POINT ID var_aux_2 .)


state 167

    (63) var_aux_2 -> LBRACKET exp RBRACKET .
    (64) var_aux_2 -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET

    EQUAL           reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 63 (var_aux_2 -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 203


state 168

    (86) exp -> l_exp pop_op_lop .
    (87) exp -> l_exp pop_op_lop . OR push_op exp
    (88) exp -> l_exp pop_op_lop . AND push_op exp

    RBRACKET        reduce using rule 86 (exp -> l_exp pop_op_lop .)
    COMMA           reduce using rule 86 (exp -> l_exp pop_op_lop .)
    RPAREN          reduce using rule 86 (exp -> l_exp pop_op_lop .)
    SEMICOLON       reduce using rule 86 (exp -> l_exp pop_op_lop .)
    OR              shift and go to state 204
    AND             shift and go to state 205


state 169

    (90) l_exp -> a_exp RELOP . push_op a_exp pop_op_relop
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 206

state 170

    (91) a_exp -> term pop_op_art_n2 .
    (92) a_exp -> term pop_op_art_n2 . PLUS push_op a_exp
    (93) a_exp -> term pop_op_art_n2 . MINUS push_op a_exp

    RELOP           reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    OR              reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    AND             reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    RBRACKET        reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    COMMA           reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    RPAREN          reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    SEMICOLON       reduce using rule 91 (a_exp -> term pop_op_art_n2 .)
    PLUS            shift and go to state 207
    MINUS           shift and go to state 208


state 171

    (101) factor_aux -> PLUS cte .

    TIMES           reduce using rule 101 (factor_aux -> PLUS cte .)
    DIVIDE          reduce using rule 101 (factor_aux -> PLUS cte .)
    PLUS            reduce using rule 101 (factor_aux -> PLUS cte .)
    MINUS           reduce using rule 101 (factor_aux -> PLUS cte .)
    RELOP           reduce using rule 101 (factor_aux -> PLUS cte .)
    OR              reduce using rule 101 (factor_aux -> PLUS cte .)
    AND             reduce using rule 101 (factor_aux -> PLUS cte .)
    RBRACKET        reduce using rule 101 (factor_aux -> PLUS cte .)
    COMMA           reduce using rule 101 (factor_aux -> PLUS cte .)
    RPAREN          reduce using rule 101 (factor_aux -> PLUS cte .)
    SEMICOLON       reduce using rule 101 (factor_aux -> PLUS cte .)


state 172

    (103) cte -> ID . push_var
    (104) cte -> ID . var_aux push_var
    (120) push_var -> .
    (60) var_aux -> . POINT ID
    (61) var_aux -> . POINT ID var_aux_2
    (62) var_aux -> . var_aux_2
    (63) var_aux_2 -> . LBRACKET exp RBRACKET
    (64) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)
    POINT           shift and go to state 105
    LBRACKET        shift and go to state 107

    push_var                       shift and go to state 177
    var_aux                        shift and go to state 178
    var_aux_2                      shift and go to state 106

state 173

    (102) factor_aux -> MINUS cte .

    TIMES           reduce using rule 102 (factor_aux -> MINUS cte .)
    DIVIDE          reduce using rule 102 (factor_aux -> MINUS cte .)
    PLUS            reduce using rule 102 (factor_aux -> MINUS cte .)
    MINUS           reduce using rule 102 (factor_aux -> MINUS cte .)
    RELOP           reduce using rule 102 (factor_aux -> MINUS cte .)
    OR              reduce using rule 102 (factor_aux -> MINUS cte .)
    AND             reduce using rule 102 (factor_aux -> MINUS cte .)
    RBRACKET        reduce using rule 102 (factor_aux -> MINUS cte .)
    COMMA           reduce using rule 102 (factor_aux -> MINUS cte .)
    RPAREN          reduce using rule 102 (factor_aux -> MINUS cte .)
    SEMICOLON       reduce using rule 102 (factor_aux -> MINUS cte .)


state 174

    (94) term -> factor pop_op_art_n1 .
    (95) term -> factor pop_op_art_n1 . TIMES push_op term
    (96) term -> factor pop_op_art_n1 . DIVIDE push_op term

    PLUS            reduce using rule 94 (term -> factor pop_op_art_n1 .)
    MINUS           reduce using rule 94 (term -> factor pop_op_art_n1 .)
    RELOP           reduce using rule 94 (term -> factor pop_op_art_n1 .)
    OR              reduce using rule 94 (term -> factor pop_op_art_n1 .)
    AND             reduce using rule 94 (term -> factor pop_op_art_n1 .)
    RBRACKET        reduce using rule 94 (term -> factor pop_op_art_n1 .)
    COMMA           reduce using rule 94 (term -> factor pop_op_art_n1 .)
    RPAREN          reduce using rule 94 (term -> factor pop_op_art_n1 .)
    SEMICOLON       reduce using rule 94 (term -> factor pop_op_art_n1 .)
    TIMES           shift and go to state 209
    DIVIDE          shift and go to state 210


state 175

    (97) factor -> LPAREN push_paren . exp RPAREN pop_paren
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 211
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 176

    (66) call -> ID POINT . ID LPAREN RPAREN
    (68) call -> ID POINT . ID LPAREN call_aux RPAREN
    (60) var_aux -> POINT . ID
    (61) var_aux -> POINT . ID var_aux_2

    ID              shift and go to state 212


state 177

    (103) cte -> ID push_var .

    TIMES           reduce using rule 103 (cte -> ID push_var .)
    DIVIDE          reduce using rule 103 (cte -> ID push_var .)
    PLUS            reduce using rule 103 (cte -> ID push_var .)
    MINUS           reduce using rule 103 (cte -> ID push_var .)
    RELOP           reduce using rule 103 (cte -> ID push_var .)
    OR              reduce using rule 103 (cte -> ID push_var .)
    AND             reduce using rule 103 (cte -> ID push_var .)
    RBRACKET        reduce using rule 103 (cte -> ID push_var .)
    COMMA           reduce using rule 103 (cte -> ID push_var .)
    RPAREN          reduce using rule 103 (cte -> ID push_var .)
    SEMICOLON       reduce using rule 103 (cte -> ID push_var .)


state 178

    (104) cte -> ID var_aux . push_var
    (120) push_var -> .

    TIMES           reduce using rule 120 (push_var -> .)
    DIVIDE          reduce using rule 120 (push_var -> .)
    PLUS            reduce using rule 120 (push_var -> .)
    MINUS           reduce using rule 120 (push_var -> .)
    RELOP           reduce using rule 120 (push_var -> .)
    OR              reduce using rule 120 (push_var -> .)
    AND             reduce using rule 120 (push_var -> .)
    RBRACKET        reduce using rule 120 (push_var -> .)
    COMMA           reduce using rule 120 (push_var -> .)
    RPAREN          reduce using rule 120 (push_var -> .)
    SEMICOLON       reduce using rule 120 (push_var -> .)

    push_var                       shift and go to state 213

state 179

    (105) cte -> CTEI push_var .

    TIMES           reduce using rule 105 (cte -> CTEI push_var .)
    DIVIDE          reduce using rule 105 (cte -> CTEI push_var .)
    PLUS            reduce using rule 105 (cte -> CTEI push_var .)
    MINUS           reduce using rule 105 (cte -> CTEI push_var .)
    RELOP           reduce using rule 105 (cte -> CTEI push_var .)
    OR              reduce using rule 105 (cte -> CTEI push_var .)
    AND             reduce using rule 105 (cte -> CTEI push_var .)
    RBRACKET        reduce using rule 105 (cte -> CTEI push_var .)
    COMMA           reduce using rule 105 (cte -> CTEI push_var .)
    RPAREN          reduce using rule 105 (cte -> CTEI push_var .)
    SEMICOLON       reduce using rule 105 (cte -> CTEI push_var .)


state 180

    (106) cte -> CTEF push_var .

    TIMES           reduce using rule 106 (cte -> CTEF push_var .)
    DIVIDE          reduce using rule 106 (cte -> CTEF push_var .)
    PLUS            reduce using rule 106 (cte -> CTEF push_var .)
    MINUS           reduce using rule 106 (cte -> CTEF push_var .)
    RELOP           reduce using rule 106 (cte -> CTEF push_var .)
    OR              reduce using rule 106 (cte -> CTEF push_var .)
    AND             reduce using rule 106 (cte -> CTEF push_var .)
    RBRACKET        reduce using rule 106 (cte -> CTEF push_var .)
    COMMA           reduce using rule 106 (cte -> CTEF push_var .)
    RPAREN          reduce using rule 106 (cte -> CTEF push_var .)
    SEMICOLON       reduce using rule 106 (cte -> CTEF push_var .)


state 181

    (107) cte -> CTECHAR push_var .

    TIMES           reduce using rule 107 (cte -> CTECHAR push_var .)
    DIVIDE          reduce using rule 107 (cte -> CTECHAR push_var .)
    PLUS            reduce using rule 107 (cte -> CTECHAR push_var .)
    MINUS           reduce using rule 107 (cte -> CTECHAR push_var .)
    RELOP           reduce using rule 107 (cte -> CTECHAR push_var .)
    OR              reduce using rule 107 (cte -> CTECHAR push_var .)
    AND             reduce using rule 107 (cte -> CTECHAR push_var .)
    RBRACKET        reduce using rule 107 (cte -> CTECHAR push_var .)
    COMMA           reduce using rule 107 (cte -> CTECHAR push_var .)
    RPAREN          reduce using rule 107 (cte -> CTECHAR push_var .)
    SEMICOLON       reduce using rule 107 (cte -> CTECHAR push_var .)


state 182

    (76) read -> READ LPAREN read_aux RPAREN . SEMICOLON generate_read

    SEMICOLON       shift and go to state 214


state 183

    (77) read_aux -> ID push_var .
    (78) read_aux -> ID push_var . COMMA generate_read read_aux

    RPAREN          reduce using rule 77 (read_aux -> ID push_var .)
    COMMA           shift and go to state 215


state 184

    (79) write -> WRITE LPAREN write_aux RPAREN . SEMICOLON generate_write

    SEMICOLON       shift and go to state 216


state 185

    (81) write_aux -> exp COMMA . generate_write write_aux
    (129) generate_write -> .

    CTESTRING       reduce using rule 129 (generate_write -> .)
    LPAREN          reduce using rule 129 (generate_write -> .)
    ID              reduce using rule 129 (generate_write -> .)
    PLUS            reduce using rule 129 (generate_write -> .)
    MINUS           reduce using rule 129 (generate_write -> .)
    CTEI            reduce using rule 129 (generate_write -> .)
    CTEF            reduce using rule 129 (generate_write -> .)
    CTECHAR         reduce using rule 129 (generate_write -> .)

    generate_write                 shift and go to state 217

state 186

    (82) write_aux -> CTESTRING save_string .
    (83) write_aux -> CTESTRING save_string . COMMA generate_write write_aux

    RPAREN          reduce using rule 82 (write_aux -> CTESTRING save_string .)
    COMMA           shift and go to state 218


state 187

    (71) condition -> IF LPAREN exp RPAREN . if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (132) if_condition -> .

    THEN            reduce using rule 132 (if_condition -> .)

    if_condition                   shift and go to state 219

state 188

    (84) while -> WHILE while_jump LPAREN exp . RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while

    RPAREN          shift and go to state 220


state 189

    (85) for -> FROM LPAREN assignation RPAREN . UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    UNTIL           shift and go to state 221


state 190

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET add_matrix_variable

    RBRACKET        shift and go to state 222


state 191

    (35) functions_aux -> VOID ID add_function LPAREN params RPAREN body .

    FUNCT           reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN body .)
    RBRACE          reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN body .)
    INIT            reduce using rule 35 (functions_aux -> VOID ID add_function LPAREN params RPAREN body .)


state 192

    (45) body -> LBRACE dec_vars . statutes_aux RBRACE
    (48) body -> LBRACE dec_vars . statutes_aux RETURN ID SEMICOLON RBRACE
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 223
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 193

    (46) body -> LBRACE statutes_aux . RBRACE
    (47) body -> LBRACE statutes_aux . RETURN ID SEMICOLON RBRACE

    RBRACE          shift and go to state 224
    RETURN          shift and go to state 225


state 194

    (39) params -> simple_type ID add_variable .
    (40) params -> simple_type ID add_variable . COMMA params

    RPAREN          reduce using rule 39 (params -> simple_type ID add_variable .)
    COMMA           shift and go to state 226


state 195

    (41) params -> simple_type ID params_aux .
    (42) params -> simple_type ID params_aux . COMMA params

    RPAREN          reduce using rule 41 (params -> simple_type ID params_aux .)
    COMMA           shift and go to state 227


state 196

    (43) params_aux -> LBRACKET . RBRACKET add_array_var_params
    (44) params_aux -> LBRACKET . RBRACKET LBRACKET RBRACKET add_matrix_var_params

    RBRACKET        shift and go to state 228


state 197

    (38) functions_aux -> simple_type ID add_function LPAREN params RPAREN body .

    FUNCT           reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN body .)
    RBRACE          reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN body .)
    INIT            reduce using rule 38 (functions_aux -> simple_type ID add_function LPAREN params RPAREN body .)


state 198

    (67) call -> ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 67 (call -> ID LPAREN call_aux RPAREN .)


state 199

    (70) call_aux -> exp COMMA . call_aux
    (69) call_aux -> . exp
    (70) call_aux -> . exp COMMA call_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 162
    call_aux                       shift and go to state 229
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 200

    (66) call -> ID POINT ID LPAREN . RPAREN
    (68) call -> ID POINT ID LPAREN . call_aux RPAREN
    (69) call_aux -> . exp
    (70) call_aux -> . exp COMMA call_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    RPAREN          shift and go to state 230
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    call_aux                       shift and go to state 231
    exp                            shift and go to state 162
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 201

    (58) assignation -> ID push_var EQUAL push_op exp . pop_op_assign
    (126) pop_op_assign -> .

    SEMICOLON       reduce using rule 126 (pop_op_assign -> .)
    RPAREN          reduce using rule 126 (pop_op_assign -> .)

    pop_op_assign                  shift and go to state 232

state 202

    (59) assignation -> ID var_aux push_var EQUAL push_op . exp pop_op_assign
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 233
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 203

    (64) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 234
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 204

    (87) exp -> l_exp pop_op_lop OR . push_op exp
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 235

state 205

    (88) exp -> l_exp pop_op_lop AND . push_op exp
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 236

state 206

    (90) l_exp -> a_exp RELOP push_op . a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    a_exp                          shift and go to state 237
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 207

    (92) a_exp -> term pop_op_art_n2 PLUS . push_op a_exp
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 238

state 208

    (93) a_exp -> term pop_op_art_n2 MINUS . push_op a_exp
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 239

state 209

    (95) term -> factor pop_op_art_n1 TIMES . push_op term
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 240

state 210

    (96) term -> factor pop_op_art_n1 DIVIDE . push_op term
    (121) push_op -> .

    LPAREN          reduce using rule 121 (push_op -> .)
    ID              reduce using rule 121 (push_op -> .)
    PLUS            reduce using rule 121 (push_op -> .)
    MINUS           reduce using rule 121 (push_op -> .)
    CTEI            reduce using rule 121 (push_op -> .)
    CTEF            reduce using rule 121 (push_op -> .)
    CTECHAR         reduce using rule 121 (push_op -> .)

    push_op                        shift and go to state 241

state 211

    (97) factor -> LPAREN push_paren exp . RPAREN pop_paren

    RPAREN          shift and go to state 242


state 212

    (66) call -> ID POINT ID . LPAREN RPAREN
    (68) call -> ID POINT ID . LPAREN call_aux RPAREN
    (60) var_aux -> POINT ID .
    (61) var_aux -> POINT ID . var_aux_2
    (63) var_aux_2 -> . LBRACKET exp RBRACKET
    (64) var_aux_2 -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET

    LPAREN          shift and go to state 200
    TIMES           reduce using rule 60 (var_aux -> POINT ID .)
    DIVIDE          reduce using rule 60 (var_aux -> POINT ID .)
    PLUS            reduce using rule 60 (var_aux -> POINT ID .)
    MINUS           reduce using rule 60 (var_aux -> POINT ID .)
    RELOP           reduce using rule 60 (var_aux -> POINT ID .)
    OR              reduce using rule 60 (var_aux -> POINT ID .)
    AND             reduce using rule 60 (var_aux -> POINT ID .)
    RBRACKET        reduce using rule 60 (var_aux -> POINT ID .)
    COMMA           reduce using rule 60 (var_aux -> POINT ID .)
    RPAREN          reduce using rule 60 (var_aux -> POINT ID .)
    SEMICOLON       reduce using rule 60 (var_aux -> POINT ID .)
    LBRACKET        shift and go to state 107

    var_aux_2                      shift and go to state 166

state 213

    (104) cte -> ID var_aux push_var .

    TIMES           reduce using rule 104 (cte -> ID var_aux push_var .)
    DIVIDE          reduce using rule 104 (cte -> ID var_aux push_var .)
    PLUS            reduce using rule 104 (cte -> ID var_aux push_var .)
    MINUS           reduce using rule 104 (cte -> ID var_aux push_var .)
    RELOP           reduce using rule 104 (cte -> ID var_aux push_var .)
    OR              reduce using rule 104 (cte -> ID var_aux push_var .)
    AND             reduce using rule 104 (cte -> ID var_aux push_var .)
    RBRACKET        reduce using rule 104 (cte -> ID var_aux push_var .)
    COMMA           reduce using rule 104 (cte -> ID var_aux push_var .)
    RPAREN          reduce using rule 104 (cte -> ID var_aux push_var .)
    SEMICOLON       reduce using rule 104 (cte -> ID var_aux push_var .)


state 214

    (76) read -> READ LPAREN read_aux RPAREN SEMICOLON . generate_read
    (131) generate_read -> .

    CALL            reduce using rule 131 (generate_read -> .)
    ID              reduce using rule 131 (generate_read -> .)
    READ            reduce using rule 131 (generate_read -> .)
    WRITE           reduce using rule 131 (generate_read -> .)
    IF              reduce using rule 131 (generate_read -> .)
    WHILE           reduce using rule 131 (generate_read -> .)
    FROM            reduce using rule 131 (generate_read -> .)
    RBRACE          reduce using rule 131 (generate_read -> .)
    RETURN          reduce using rule 131 (generate_read -> .)

    generate_read                  shift and go to state 243

state 215

    (78) read_aux -> ID push_var COMMA . generate_read read_aux
    (131) generate_read -> .

    ID              reduce using rule 131 (generate_read -> .)

    generate_read                  shift and go to state 244

state 216

    (79) write -> WRITE LPAREN write_aux RPAREN SEMICOLON . generate_write
    (129) generate_write -> .

    CALL            reduce using rule 129 (generate_write -> .)
    ID              reduce using rule 129 (generate_write -> .)
    READ            reduce using rule 129 (generate_write -> .)
    WRITE           reduce using rule 129 (generate_write -> .)
    IF              reduce using rule 129 (generate_write -> .)
    WHILE           reduce using rule 129 (generate_write -> .)
    FROM            reduce using rule 129 (generate_write -> .)
    RBRACE          reduce using rule 129 (generate_write -> .)
    RETURN          reduce using rule 129 (generate_write -> .)

    generate_write                 shift and go to state 245

state 217

    (81) write_aux -> exp COMMA generate_write . write_aux
    (80) write_aux -> . exp
    (81) write_aux -> . exp COMMA generate_write write_aux
    (82) write_aux -> . CTESTRING save_string
    (83) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 148
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 147
    write_aux                      shift and go to state 246
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 218

    (83) write_aux -> CTESTRING save_string COMMA . generate_write write_aux
    (129) generate_write -> .

    CTESTRING       reduce using rule 129 (generate_write -> .)
    LPAREN          reduce using rule 129 (generate_write -> .)
    ID              reduce using rule 129 (generate_write -> .)
    PLUS            reduce using rule 129 (generate_write -> .)
    MINUS           reduce using rule 129 (generate_write -> .)
    CTEI            reduce using rule 129 (generate_write -> .)
    CTEF            reduce using rule 129 (generate_write -> .)
    CTECHAR         reduce using rule 129 (generate_write -> .)

    generate_write                 shift and go to state 247

state 219

    (71) condition -> IF LPAREN exp RPAREN if_condition . THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    THEN            shift and go to state 248


state 220

    (84) while -> WHILE while_jump LPAREN exp RPAREN . while_condition DO LBRACE statutes_aux RBRACE end_while
    (138) while_condition -> .

    DO              reduce using rule 138 (while_condition -> .)

    while_condition                shift and go to state 249

state 221

    (85) for -> FROM LPAREN assignation RPAREN UNTIL . for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (140) for_jump -> .

    LPAREN          reduce using rule 140 (for_jump -> .)

    for_jump                       shift and go to state 250

state 222

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET . add_matrix_variable
    (113) add_matrix_variable -> .

    COMMA           reduce using rule 113 (add_matrix_variable -> .)
    SEMICOLON       reduce using rule 113 (add_matrix_variable -> .)

    add_matrix_variable            shift and go to state 251

state 223

    (45) body -> LBRACE dec_vars statutes_aux . RBRACE
    (48) body -> LBRACE dec_vars statutes_aux . RETURN ID SEMICOLON RBRACE

    RBRACE          shift and go to state 252
    RETURN          shift and go to state 253


state 224

    (46) body -> LBRACE statutes_aux RBRACE .

    FUNCT           reduce using rule 46 (body -> LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 46 (body -> LBRACE statutes_aux RBRACE .)
    INIT            reduce using rule 46 (body -> LBRACE statutes_aux RBRACE .)


state 225

    (47) body -> LBRACE statutes_aux RETURN . ID SEMICOLON RBRACE

    ID              shift and go to state 254


state 226

    (40) params -> simple_type ID add_variable COMMA . params
    (39) params -> . simple_type ID add_variable
    (40) params -> . simple_type ID add_variable COMMA params
    (41) params -> . simple_type ID params_aux
    (42) params -> . simple_type ID params_aux COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    simple_type                    shift and go to state 119
    params                         shift and go to state 255

state 227

    (42) params -> simple_type ID params_aux COMMA . params
    (39) params -> . simple_type ID add_variable
    (40) params -> . simple_type ID add_variable COMMA params
    (41) params -> . simple_type ID params_aux
    (42) params -> . simple_type ID params_aux COMMA params
    (14) simple_type -> . INT
    (15) simple_type -> . FLOAT
    (16) simple_type -> . CHAR

    INT             shift and go to state 38
    FLOAT           shift and go to state 39
    CHAR            shift and go to state 40

    simple_type                    shift and go to state 119
    params                         shift and go to state 256

state 228

    (43) params_aux -> LBRACKET RBRACKET . add_array_var_params
    (44) params_aux -> LBRACKET RBRACKET . LBRACKET RBRACKET add_matrix_var_params
    (114) add_array_var_params -> .

    LBRACKET        shift and go to state 257
    COMMA           reduce using rule 114 (add_array_var_params -> .)
    RPAREN          reduce using rule 114 (add_array_var_params -> .)

    add_array_var_params           shift and go to state 258

state 229

    (70) call_aux -> exp COMMA call_aux .

    RPAREN          reduce using rule 70 (call_aux -> exp COMMA call_aux .)


state 230

    (66) call -> ID POINT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    TIMES           reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    PLUS            reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    MINUS           reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    RELOP           reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    OR              reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    AND             reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    COMMA           reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 66 (call -> ID POINT ID LPAREN RPAREN .)


state 231

    (68) call -> ID POINT ID LPAREN call_aux . RPAREN

    RPAREN          shift and go to state 259


state 232

    (58) assignation -> ID push_var EQUAL push_op exp pop_op_assign .

    SEMICOLON       reduce using rule 58 (assignation -> ID push_var EQUAL push_op exp pop_op_assign .)
    RPAREN          reduce using rule 58 (assignation -> ID push_var EQUAL push_op exp pop_op_assign .)


state 233

    (59) assignation -> ID var_aux push_var EQUAL push_op exp . pop_op_assign
    (126) pop_op_assign -> .

    SEMICOLON       reduce using rule 126 (pop_op_assign -> .)
    RPAREN          reduce using rule 126 (pop_op_assign -> .)

    pop_op_assign                  shift and go to state 260

state 234

    (64) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 261


state 235

    (87) exp -> l_exp pop_op_lop OR push_op . exp
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    l_exp                          shift and go to state 130
    exp                            shift and go to state 262
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 236

    (88) exp -> l_exp pop_op_lop AND push_op . exp
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    l_exp                          shift and go to state 130
    exp                            shift and go to state 263
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 237

    (90) l_exp -> a_exp RELOP push_op a_exp . pop_op_relop
    (124) pop_op_relop -> .

    OR              reduce using rule 124 (pop_op_relop -> .)
    AND             reduce using rule 124 (pop_op_relop -> .)
    RBRACKET        reduce using rule 124 (pop_op_relop -> .)
    COMMA           reduce using rule 124 (pop_op_relop -> .)
    RPAREN          reduce using rule 124 (pop_op_relop -> .)
    SEMICOLON       reduce using rule 124 (pop_op_relop -> .)

    pop_op_relop                   shift and go to state 264

state 238

    (92) a_exp -> term pop_op_art_n2 PLUS push_op . a_exp
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    term                           shift and go to state 132
    a_exp                          shift and go to state 265
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 239

    (93) a_exp -> term pop_op_art_n2 MINUS push_op . a_exp
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    term                           shift and go to state 132
    a_exp                          shift and go to state 266
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 240

    (95) term -> factor pop_op_art_n1 TIMES push_op . term
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    factor                         shift and go to state 135
    term                           shift and go to state 267
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 241

    (96) term -> factor pop_op_art_n1 DIVIDE push_op . term
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    factor                         shift and go to state 135
    term                           shift and go to state 268
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 242

    (97) factor -> LPAREN push_paren exp RPAREN . pop_paren
    (128) pop_paren -> .

    TIMES           reduce using rule 128 (pop_paren -> .)
    DIVIDE          reduce using rule 128 (pop_paren -> .)
    PLUS            reduce using rule 128 (pop_paren -> .)
    MINUS           reduce using rule 128 (pop_paren -> .)
    RELOP           reduce using rule 128 (pop_paren -> .)
    OR              reduce using rule 128 (pop_paren -> .)
    AND             reduce using rule 128 (pop_paren -> .)
    RBRACKET        reduce using rule 128 (pop_paren -> .)
    COMMA           reduce using rule 128 (pop_paren -> .)
    RPAREN          reduce using rule 128 (pop_paren -> .)
    SEMICOLON       reduce using rule 128 (pop_paren -> .)

    pop_paren                      shift and go to state 269

state 243

    (76) read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .

    CALL            reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    ID              reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    READ            reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    WRITE           reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    IF              reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    WHILE           reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    FROM            reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    RBRACE          reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)
    RETURN          reduce using rule 76 (read -> READ LPAREN read_aux RPAREN SEMICOLON generate_read .)


state 244

    (78) read_aux -> ID push_var COMMA generate_read . read_aux
    (77) read_aux -> . ID push_var
    (78) read_aux -> . ID push_var COMMA generate_read read_aux

    ID              shift and go to state 145

    read_aux                       shift and go to state 270

state 245

    (79) write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .

    CALL            reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    ID              reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    READ            reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    WRITE           reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    IF              reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    WHILE           reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    FROM            reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    RBRACE          reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)
    RETURN          reduce using rule 79 (write -> WRITE LPAREN write_aux RPAREN SEMICOLON generate_write .)


state 246

    (81) write_aux -> exp COMMA generate_write write_aux .

    RPAREN          reduce using rule 81 (write_aux -> exp COMMA generate_write write_aux .)


state 247

    (83) write_aux -> CTESTRING save_string COMMA generate_write . write_aux
    (80) write_aux -> . exp
    (81) write_aux -> . exp COMMA generate_write write_aux
    (82) write_aux -> . CTESTRING save_string
    (83) write_aux -> . CTESTRING save_string COMMA generate_write write_aux
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    CTESTRING       shift and go to state 148
    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    write_aux                      shift and go to state 271
    exp                            shift and go to state 147
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 248

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN . LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if

    LBRACE          shift and go to state 272


state 249

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition . DO LBRACE statutes_aux RBRACE end_while

    DO              shift and go to state 273


state 250

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump . LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    LPAREN          shift and go to state 274


state 251

    (22) vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .

    COMMA           reduce using rule 22 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .)
    SEMICOLON       reduce using rule 22 (vars_simple_type_aux -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET add_matrix_variable .)


state 252

    (45) body -> LBRACE dec_vars statutes_aux RBRACE .

    FUNCT           reduce using rule 45 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    RBRACE          reduce using rule 45 (body -> LBRACE dec_vars statutes_aux RBRACE .)
    INIT            reduce using rule 45 (body -> LBRACE dec_vars statutes_aux RBRACE .)


state 253

    (48) body -> LBRACE dec_vars statutes_aux RETURN . ID SEMICOLON RBRACE

    ID              shift and go to state 275


state 254

    (47) body -> LBRACE statutes_aux RETURN ID . SEMICOLON RBRACE

    SEMICOLON       shift and go to state 276


state 255

    (40) params -> simple_type ID add_variable COMMA params .

    RPAREN          reduce using rule 40 (params -> simple_type ID add_variable COMMA params .)


state 256

    (42) params -> simple_type ID params_aux COMMA params .

    RPAREN          reduce using rule 42 (params -> simple_type ID params_aux COMMA params .)


state 257

    (44) params_aux -> LBRACKET RBRACKET LBRACKET . RBRACKET add_matrix_var_params

    RBRACKET        shift and go to state 277


state 258

    (43) params_aux -> LBRACKET RBRACKET add_array_var_params .

    COMMA           reduce using rule 43 (params_aux -> LBRACKET RBRACKET add_array_var_params .)
    RPAREN          reduce using rule 43 (params_aux -> LBRACKET RBRACKET add_array_var_params .)


state 259

    (68) call -> ID POINT ID LPAREN call_aux RPAREN .

    SEMICOLON       reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    TIMES           reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    DIVIDE          reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    PLUS            reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    MINUS           reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RELOP           reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    OR              reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    AND             reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RBRACKET        reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    COMMA           reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)
    RPAREN          reduce using rule 68 (call -> ID POINT ID LPAREN call_aux RPAREN .)


state 260

    (59) assignation -> ID var_aux push_var EQUAL push_op exp pop_op_assign .

    SEMICOLON       reduce using rule 59 (assignation -> ID var_aux push_var EQUAL push_op exp pop_op_assign .)
    RPAREN          reduce using rule 59 (assignation -> ID var_aux push_var EQUAL push_op exp pop_op_assign .)


state 261

    (64) var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    EQUAL           reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RELOP           reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 64 (var_aux_2 -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 262

    (87) exp -> l_exp pop_op_lop OR push_op exp .

    RBRACKET        reduce using rule 87 (exp -> l_exp pop_op_lop OR push_op exp .)
    COMMA           reduce using rule 87 (exp -> l_exp pop_op_lop OR push_op exp .)
    RPAREN          reduce using rule 87 (exp -> l_exp pop_op_lop OR push_op exp .)
    SEMICOLON       reduce using rule 87 (exp -> l_exp pop_op_lop OR push_op exp .)


state 263

    (88) exp -> l_exp pop_op_lop AND push_op exp .

    RBRACKET        reduce using rule 88 (exp -> l_exp pop_op_lop AND push_op exp .)
    COMMA           reduce using rule 88 (exp -> l_exp pop_op_lop AND push_op exp .)
    RPAREN          reduce using rule 88 (exp -> l_exp pop_op_lop AND push_op exp .)
    SEMICOLON       reduce using rule 88 (exp -> l_exp pop_op_lop AND push_op exp .)


state 264

    (90) l_exp -> a_exp RELOP push_op a_exp pop_op_relop .

    OR              reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    AND             reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    RBRACKET        reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    COMMA           reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    RPAREN          reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)
    SEMICOLON       reduce using rule 90 (l_exp -> a_exp RELOP push_op a_exp pop_op_relop .)


state 265

    (92) a_exp -> term pop_op_art_n2 PLUS push_op a_exp .

    RELOP           reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    OR              reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    AND             reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    RBRACKET        reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    COMMA           reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    RPAREN          reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)
    SEMICOLON       reduce using rule 92 (a_exp -> term pop_op_art_n2 PLUS push_op a_exp .)


state 266

    (93) a_exp -> term pop_op_art_n2 MINUS push_op a_exp .

    RELOP           reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    OR              reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    AND             reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    RBRACKET        reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    COMMA           reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    RPAREN          reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)
    SEMICOLON       reduce using rule 93 (a_exp -> term pop_op_art_n2 MINUS push_op a_exp .)


state 267

    (95) term -> factor pop_op_art_n1 TIMES push_op term .

    PLUS            reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    MINUS           reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RELOP           reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    OR              reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    AND             reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RBRACKET        reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    COMMA           reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    RPAREN          reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)
    SEMICOLON       reduce using rule 95 (term -> factor pop_op_art_n1 TIMES push_op term .)


state 268

    (96) term -> factor pop_op_art_n1 DIVIDE push_op term .

    PLUS            reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    MINUS           reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RELOP           reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    OR              reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    AND             reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RBRACKET        reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    COMMA           reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    RPAREN          reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)
    SEMICOLON       reduce using rule 96 (term -> factor pop_op_art_n1 DIVIDE push_op term .)


state 269

    (97) factor -> LPAREN push_paren exp RPAREN pop_paren .

    TIMES           reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    DIVIDE          reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    PLUS            reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    MINUS           reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RELOP           reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    OR              reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    AND             reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RBRACKET        reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    COMMA           reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    RPAREN          reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)
    SEMICOLON       reduce using rule 97 (factor -> LPAREN push_paren exp RPAREN pop_paren .)


state 270

    (78) read_aux -> ID push_var COMMA generate_read read_aux .

    RPAREN          reduce using rule 78 (read_aux -> ID push_var COMMA generate_read read_aux .)


state 271

    (83) write_aux -> CTESTRING save_string COMMA generate_write write_aux .

    RPAREN          reduce using rule 83 (write_aux -> CTESTRING save_string COMMA generate_write write_aux .)


state 272

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE . statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 278
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 273

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO . LBRACE statutes_aux RBRACE end_while

    LBRACE          shift and go to state 279


state 274

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN . exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 280
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 275

    (48) body -> LBRACE dec_vars statutes_aux RETURN ID . SEMICOLON RBRACE

    SEMICOLON       shift and go to state 281


state 276

    (47) body -> LBRACE statutes_aux RETURN ID SEMICOLON . RBRACE

    RBRACE          shift and go to state 282


state 277

    (44) params_aux -> LBRACKET RBRACKET LBRACKET RBRACKET . add_matrix_var_params
    (115) add_matrix_var_params -> .

    COMMA           reduce using rule 115 (add_matrix_var_params -> .)
    RPAREN          reduce using rule 115 (add_matrix_var_params -> .)

    add_matrix_var_params          shift and go to state 283

state 278

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux . RBRACE condition_aux_elif condition_aux_else end_if

    RBRACE          shift and go to state 284


state 279

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE . statutes_aux RBRACE end_while
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 285
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 280

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp . RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    RPAREN          shift and go to state 286


state 281

    (48) body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON . RBRACE

    RBRACE          shift and go to state 287


state 282

    (47) body -> LBRACE statutes_aux RETURN ID SEMICOLON RBRACE .

    FUNCT           reduce using rule 47 (body -> LBRACE statutes_aux RETURN ID SEMICOLON RBRACE .)
    RBRACE          reduce using rule 47 (body -> LBRACE statutes_aux RETURN ID SEMICOLON RBRACE .)
    INIT            reduce using rule 47 (body -> LBRACE statutes_aux RETURN ID SEMICOLON RBRACE .)


state 283

    (44) params_aux -> LBRACKET RBRACKET LBRACKET RBRACKET add_matrix_var_params .

    COMMA           reduce using rule 44 (params_aux -> LBRACKET RBRACKET LBRACKET RBRACKET add_matrix_var_params .)
    RPAREN          reduce using rule 44 (params_aux -> LBRACKET RBRACKET LBRACKET RBRACKET add_matrix_var_params .)


state 284

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE . condition_aux_elif condition_aux_else end_if
    (72) condition_aux_elif -> . ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (73) condition_aux_elif -> . empty
    (110) empty -> .

    ELIF            shift and go to state 289
    ELSE            reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    condition_aux_elif             shift and go to state 288
    empty                          shift and go to state 290

state 285

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux . RBRACE end_while

    RBRACE          shift and go to state 291


state 286

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN . for_condition DO LBRACE statutes_aux RBRACE end_for
    (141) for_condition -> .

    DO              reduce using rule 141 (for_condition -> .)

    for_condition                  shift and go to state 292

state 287

    (48) body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE .

    FUNCT           reduce using rule 48 (body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE .)
    RBRACE          reduce using rule 48 (body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE .)
    INIT            reduce using rule 48 (body -> LBRACE dec_vars statutes_aux RETURN ID SEMICOLON RBRACE .)


state 288

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif . condition_aux_else end_if
    (74) condition_aux_else -> . ELSE else_condition LBRACE statutes_aux RBRACE
    (75) condition_aux_else -> . empty
    (110) empty -> .

    ELSE            shift and go to state 294
    CALL            reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    condition_aux_else             shift and go to state 293
    empty                          shift and go to state 295

state 289

    (72) condition_aux_elif -> ELIF . LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif

    LPAREN          shift and go to state 296


state 290

    (73) condition_aux_elif -> empty .

    ELSE            reduce using rule 73 (condition_aux_elif -> empty .)
    CALL            reduce using rule 73 (condition_aux_elif -> empty .)
    ID              reduce using rule 73 (condition_aux_elif -> empty .)
    READ            reduce using rule 73 (condition_aux_elif -> empty .)
    WRITE           reduce using rule 73 (condition_aux_elif -> empty .)
    IF              reduce using rule 73 (condition_aux_elif -> empty .)
    WHILE           reduce using rule 73 (condition_aux_elif -> empty .)
    FROM            reduce using rule 73 (condition_aux_elif -> empty .)
    RBRACE          reduce using rule 73 (condition_aux_elif -> empty .)
    RETURN          reduce using rule 73 (condition_aux_elif -> empty .)


state 291

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE . end_while
    (139) end_while -> .

    CALL            reduce using rule 139 (end_while -> .)
    ID              reduce using rule 139 (end_while -> .)
    READ            reduce using rule 139 (end_while -> .)
    WRITE           reduce using rule 139 (end_while -> .)
    IF              reduce using rule 139 (end_while -> .)
    WHILE           reduce using rule 139 (end_while -> .)
    FROM            reduce using rule 139 (end_while -> .)
    RBRACE          reduce using rule 139 (end_while -> .)
    RETURN          reduce using rule 139 (end_while -> .)

    end_while                      shift and go to state 297

state 292

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition . DO LBRACE statutes_aux RBRACE end_for

    DO              shift and go to state 298


state 293

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else . end_if
    (136) end_if -> .

    CALL            reduce using rule 136 (end_if -> .)
    ID              reduce using rule 136 (end_if -> .)
    READ            reduce using rule 136 (end_if -> .)
    WRITE           reduce using rule 136 (end_if -> .)
    IF              reduce using rule 136 (end_if -> .)
    WHILE           reduce using rule 136 (end_if -> .)
    FROM            reduce using rule 136 (end_if -> .)
    RBRACE          reduce using rule 136 (end_if -> .)
    RETURN          reduce using rule 136 (end_if -> .)

    end_if                         shift and go to state 299

state 294

    (74) condition_aux_else -> ELSE . else_condition LBRACE statutes_aux RBRACE
    (135) else_condition -> .

    LBRACE          reduce using rule 135 (else_condition -> .)

    else_condition                 shift and go to state 300

state 295

    (75) condition_aux_else -> empty .

    CALL            reduce using rule 75 (condition_aux_else -> empty .)
    ID              reduce using rule 75 (condition_aux_else -> empty .)
    READ            reduce using rule 75 (condition_aux_else -> empty .)
    WRITE           reduce using rule 75 (condition_aux_else -> empty .)
    IF              reduce using rule 75 (condition_aux_else -> empty .)
    WHILE           reduce using rule 75 (condition_aux_else -> empty .)
    FROM            reduce using rule 75 (condition_aux_else -> empty .)
    RBRACE          reduce using rule 75 (condition_aux_else -> empty .)
    RETURN          reduce using rule 75 (condition_aux_else -> empty .)


state 296

    (72) condition_aux_elif -> ELIF LPAREN . elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (134) elif_expression -> .

    LPAREN          reduce using rule 134 (elif_expression -> .)
    ID              reduce using rule 134 (elif_expression -> .)
    PLUS            reduce using rule 134 (elif_expression -> .)
    MINUS           reduce using rule 134 (elif_expression -> .)
    CTEI            reduce using rule 134 (elif_expression -> .)
    CTEF            reduce using rule 134 (elif_expression -> .)
    CTECHAR         reduce using rule 134 (elif_expression -> .)

    elif_expression                shift and go to state 301

state 297

    (84) while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .

    CALL            reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    ID              reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    READ            reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    WRITE           reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    IF              reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    WHILE           reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    FROM            reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    RBRACE          reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)
    RETURN          reduce using rule 84 (while -> WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while .)


state 298

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO . LBRACE statutes_aux RBRACE end_for

    LBRACE          shift and go to state 302


state 299

    (71) condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .

    CALL            reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    ID              reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    READ            reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    WRITE           reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    IF              reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    WHILE           reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    FROM            reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    RBRACE          reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)
    RETURN          reduce using rule 71 (condition -> IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if .)


state 300

    (74) condition_aux_else -> ELSE else_condition . LBRACE statutes_aux RBRACE

    LBRACE          shift and go to state 303


state 301

    (72) condition_aux_elif -> ELIF LPAREN elif_expression . exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (86) exp -> . l_exp pop_op_lop
    (87) exp -> . l_exp pop_op_lop OR push_op exp
    (88) exp -> . l_exp pop_op_lop AND push_op exp
    (89) l_exp -> . a_exp
    (90) l_exp -> . a_exp RELOP push_op a_exp pop_op_relop
    (91) a_exp -> . term pop_op_art_n2
    (92) a_exp -> . term pop_op_art_n2 PLUS push_op a_exp
    (93) a_exp -> . term pop_op_art_n2 MINUS push_op a_exp
    (94) term -> . factor pop_op_art_n1
    (95) term -> . factor pop_op_art_n1 TIMES push_op term
    (96) term -> . factor pop_op_art_n1 DIVIDE push_op term
    (97) factor -> . LPAREN push_paren exp RPAREN pop_paren
    (98) factor -> . call
    (99) factor -> . factor_aux
    (65) call -> . ID LPAREN RPAREN
    (66) call -> . ID POINT ID LPAREN RPAREN
    (67) call -> . ID LPAREN call_aux RPAREN
    (68) call -> . ID POINT ID LPAREN call_aux RPAREN
    (100) factor_aux -> . cte
    (101) factor_aux -> . PLUS cte
    (102) factor_aux -> . MINUS cte
    (103) cte -> . ID push_var
    (104) cte -> . ID var_aux push_var
    (105) cte -> . CTEI push_var
    (106) cte -> . CTEF push_var
    (107) cte -> . CTECHAR push_var

    LPAREN          shift and go to state 136
    ID              shift and go to state 139
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    CTEI            shift and go to state 141
    CTEF            shift and go to state 142
    CTECHAR         shift and go to state 143

    exp                            shift and go to state 304
    l_exp                          shift and go to state 130
    a_exp                          shift and go to state 131
    term                           shift and go to state 132
    factor                         shift and go to state 135
    call                           shift and go to state 137
    factor_aux                     shift and go to state 138
    cte                            shift and go to state 140

state 302

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE . statutes_aux RBRACE end_for
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    assignation                    shift and go to state 75
    statutes_aux                   shift and go to state 305
    statutes                       shift and go to state 74
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 303

    (74) condition_aux_else -> ELSE else_condition LBRACE . statutes_aux RBRACE
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 306
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 304

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp . RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif

    RPAREN          shift and go to state 307


state 305

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux . RBRACE end_for

    RBRACE          shift and go to state 308


state 306

    (74) condition_aux_else -> ELSE else_condition LBRACE statutes_aux . RBRACE

    RBRACE          shift and go to state 309


state 307

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN . elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (133) elif_condition -> .

    THEN            reduce using rule 133 (elif_condition -> .)

    elif_condition                 shift and go to state 310

state 308

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE . end_for
    (142) end_for -> .

    CALL            reduce using rule 142 (end_for -> .)
    ID              reduce using rule 142 (end_for -> .)
    READ            reduce using rule 142 (end_for -> .)
    WRITE           reduce using rule 142 (end_for -> .)
    IF              reduce using rule 142 (end_for -> .)
    WHILE           reduce using rule 142 (end_for -> .)
    FROM            reduce using rule 142 (end_for -> .)
    RBRACE          reduce using rule 142 (end_for -> .)
    RETURN          reduce using rule 142 (end_for -> .)

    end_for                        shift and go to state 311

state 309

    (74) condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .

    CALL            reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    ID              reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    READ            reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    WRITE           reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    IF              reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    WHILE           reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    FROM            reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    RBRACE          reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)
    RETURN          reduce using rule 74 (condition_aux_else -> ELSE else_condition LBRACE statutes_aux RBRACE .)


state 310

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition . THEN LBRACE statutes_aux RBRACE condition_aux_elif

    THEN            shift and go to state 312


state 311

    (85) for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .

    CALL            reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    ID              reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    READ            reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    WRITE           reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    IF              reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    WHILE           reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    FROM            reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    RBRACE          reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)
    RETURN          reduce using rule 85 (for -> FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for .)


state 312

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN . LBRACE statutes_aux RBRACE condition_aux_elif

    LBRACE          shift and go to state 313


state 313

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE . statutes_aux RBRACE condition_aux_elif
    (56) statutes_aux -> . statutes
    (57) statutes_aux -> . statutes statutes_aux
    (49) statutes -> . assignation SEMICOLON
    (50) statutes -> . CALL call SEMICOLON
    (51) statutes -> . read
    (52) statutes -> . write
    (53) statutes -> . condition
    (54) statutes -> . while
    (55) statutes -> . for
    (58) assignation -> . ID push_var EQUAL push_op exp pop_op_assign
    (59) assignation -> . ID var_aux push_var EQUAL push_op exp pop_op_assign
    (76) read -> . READ LPAREN read_aux RPAREN SEMICOLON generate_read
    (79) write -> . WRITE LPAREN write_aux RPAREN SEMICOLON generate_write
    (71) condition -> . IF LPAREN exp RPAREN if_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif condition_aux_else end_if
    (84) while -> . WHILE while_jump LPAREN exp RPAREN while_condition DO LBRACE statutes_aux RBRACE end_while
    (85) for -> . FROM LPAREN assignation RPAREN UNTIL for_jump LPAREN exp RPAREN for_condition DO LBRACE statutes_aux RBRACE end_for

    CALL            shift and go to state 76
    ID              shift and go to state 82
    READ            shift and go to state 83
    WRITE           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 86
    FROM            shift and go to state 87

    statutes_aux                   shift and go to state 314
    statutes                       shift and go to state 74
    assignation                    shift and go to state 75
    read                           shift and go to state 77
    write                          shift and go to state 78
    condition                      shift and go to state 79
    while                          shift and go to state 80
    for                            shift and go to state 81

state 314

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux . RBRACE condition_aux_elif

    RBRACE          shift and go to state 315


state 315

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE . condition_aux_elif
    (72) condition_aux_elif -> . ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif
    (73) condition_aux_elif -> . empty
    (110) empty -> .

    ELIF            shift and go to state 289
    ELSE            reduce using rule 110 (empty -> .)
    CALL            reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FROM            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    condition_aux_elif             shift and go to state 316
    empty                          shift and go to state 290

state 316

    (72) condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .

    ELSE            reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    CALL            reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    ID              reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    READ            reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    WRITE           reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    IF              reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    WHILE           reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    FROM            reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    RBRACE          reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)
    RETURN          reduce using rule 72 (condition_aux_elif -> ELIF LPAREN elif_expression exp RPAREN elif_condition THEN LBRACE statutes_aux RBRACE condition_aux_elif .)

